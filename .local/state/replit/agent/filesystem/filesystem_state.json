{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a text-based role-playing game inspired by the Wings of Fire book series, where players control an animus dragon (a dragon with magical powers) attending Jade Mountain Academy. The core gameplay revolves around making choices that affect the character's soul integrity - using animus magic corrupts the dragon's soul, creating a compelling risk-reward mechanic. Players must balance using their powerful magical abilities with preserving their humanity and moral compass.\n\nThe application is built as a full-stack web game with a React frontend and Express backend, featuring character generation, scenario-based storytelling, and persistent game state management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n- **Character Customization System** (January 2025): Added comprehensive character creator allowing players to choose tribe, powers, attributes, and animus status, plus randomization options.\n- **Local Storage Migration** (January 2025): Completely converted from PostgreSQL database to local browser storage. Game now runs without any database dependencies or Replit Core requirements.\n- **Enhanced Romance & Family System** (January 2025): Added comprehensive romance mechanics, mating system, dragonet inheritance, and multi-generational family tracking.\n- **Expanded Achievement System** (January 2025): Added 25+ achievements across categories including magic, relationships, survival, and family legacy.\n- **Multiple Game Endings** (January 2025): Implemented 12+ different endings based on player choices, including victory, tragic, neutral, and legendary outcomes.\n- **Enhanced Magic Variety** (January 2025): Expanded animus spell system with 6+ spell types including enchantment, combat, healing, weather control, curses, and summoning.\n- **Hybrid Dragon Support** (January 2025): Enhanced hybrid dragon generation with mixed tribal abilities and inheritance mechanics.\n- **Comprehensive Animus Filtering System** (January 2025): Fixed persistent issue where animus magic prompts appeared for non-animus dragons. Implemented thorough filtering across all AI generation systems.\n- **Enhanced Storyline Progression** (January 2025): Fixed custom actions, tribal powers, and special abilities to actually advance the story rather than just showing static results. Powers now generate new scenarios based on their effects.\n- **Contextual Tribal Powers** (January 2025): Made tribal powers more relevant to current situations and properly integrated with the storyline progression system.\n- **Location-Based Migration System** (January 2025): Added comprehensive travel system with 15+ locations across Pyrrhia and Pantala continents, featuring location-specific scenarios, tribal relationships, migration animations, and Wings of Fire lore integration.\n- **Special Events System** (January 2025): Implemented rare, time-gated special events including animus artifact discoveries, mindreading scenarios, and prophecy events. These complement existing gameplay with 5-minute cooldowns and dragon-type requirements.\n- **Animus Artifact System** (January 2025): Added 5 unique collectible animus artifacts with complex moral choices, soul corruption mechanics, and location-based discovery system. Maximum 3 artifacts per playthrough.\n- **Enhanced Outcome Display** (January 2025): Integrated continue button system that displays story outcomes before proceeding to next scenario, improving narrative flow and player engagement.\n- **Comprehensive Custom Action System** (January 2025): Enhanced custom action responses to work with ALL scenario types, providing contextual, immersive responses that integrate with Wings of Fire lore and character abilities.\n- **Improved Aging and Event Timing** (January 2025): Changed aging to 1 year per turn and special event timing to every 10 turns with higher success rates (15% for artifacts, 12% for special powers).\n- **Fixed Special Events System** (January 2025): Corrected special event triggering to ensure events occur every 10 turns as intended. Updated max artifacts per game to 3 for better game balance. Added persistent event state tracking and comprehensive debug logging.\n- **Enhanced Artifact Discovery System** (January 2025): Made animus artifacts discoverable at any location with guaranteed discovery on every 10th turn. Fixed location filtering issues that prevented artifact discovery.\n- **Expanded Scenario Database** (January 2025): Added 200+ new scenarios from attached file including friendship offers, battle tactics, feast invitations, Darkstalker encounters, and immortality requests. Integrated scenarios properly with character ability requirements.\n- **Location-Based Special Events** (January 2025): Added rare location-specific scenarios like NightWing-RainWing village architecture disputes and Ice Kingdom diplomatic crises. Limited to 3 special events every 10 minutes for rarity.\n- **Rarer Artifact System** (January 2025): Reduced artifact discovery chance from 15% to 5% per turn to make artifacts more precious and meaningful. Artifacts now distribute across all game locations with at least one per location.\n- **Year and Season Progression System** (January 2025): Removed \"Day X\" display and implemented proper time progression where years advance by 0.5 per turn and seasons change every turn (Spring→Summer→Fall→Winter). Time display now shows current season and character's total age.\n- **Enhanced Social Relationship System** (January 2025): Implemented comprehensive social interaction mechanics with 12+ social event types, dynamic relationship tracking (friends/rivals/enemies), and multi-tribal social groups. Dragons can now form meaningful friendships, rivalries, and alliances that affect gameplay.\n- **Advanced Dragonet & Family System** (January 2025): Added complete dragonet lifecycle management with 7 developmental stages (birth to independence), inherited traits system, hybrid offspring mechanics, and multi-generational family tracking. Dragonets develop unique personalities and abilities over time.\n- **Comprehensive Animus Artifact Distribution** (January 2025): Created 25+ unique animus artifacts distributed across ALL game locations including the newly added Scorpion Den. Each artifact features moral dilemmas, soul corruption risks, and location-specific discovery requirements with enhanced rarity balancing.\n- **Enhanced Scenario Diversity System** (January 2025): Developed 13+ scenario template categories (Social, Academic, Adventure, Mystery, Cultural, Nature, Political, Personal Growth, Romance, Family, Achievement, Crisis, Discovery) with anti-repetition tracking and contextual variable generation to eliminate repetitive scenarios.\n- **Integrated Enhanced Game Systems** (January 2025): Seamlessly integrated all new social, family, and artifact systems into the existing game engine with proper consequence processing, relationship management, and story progression. Enhanced scenarios now contribute meaningfully to character development and world building.\n- **Fixed Random Animus Object Spawning** (January 2025): Disabled automatic artifact discovery in the special events system. Animus objects now only appear in specific discovery scenarios where players actively choose to search or investigate, eliminating unwanted random spawning.\n- **Enhanced Soundtrack System** (January 2025): Fixed audio overlapping issues by implementing audio lock mechanisms, proper track cleanup, and debounced transitions. Improved soul threshold music switching and AI control track handling for smoother audio experience.\n- **MAJOR FIX: Animus Artifact System Overhaul** (January 2025): Completely rebuilt the artifact system to resolve all discovery and collection issues:\n  - **Fixed artifact discovery scenarios**: Scenarios now properly display with correct collection choices instead of generic options\n  - **Fixed inventory integration**: Artifacts now properly appear in player inventory after collection\n  - **Enhanced discovery probability**: Guaranteed artifact discovery every 10 turns, higher base chance for all players\n  - **Added comprehensive artifact usage**: Complete usage modal with magical powers, moral dilemmas, and consequences\n  - **Improved debugging**: Added extensive logging to track artifact generation, collection, and inventory flow\n  - **Fixed scenario persistence**: Artifact scenarios no longer get replaced by generic scenarios after generation\n  - **Added inventory action processing**: Proper handling of artifact usage through inventory with soul/sanity effects\n  - **Enhanced special events system**: Better integration between artifact generation and game engine\n  - Fixed invalid location mappings, TypeScript errors, and maximum artifact limits from previous attempts\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with **React 18** using **TypeScript** and **Vite** as the build tool. The UI leverages **shadcn/ui** components built on **Radix UI** primitives, styled with **TailwindCSS** for a modern, accessible interface. State management is handled through **TanStack Query** for server state and React hooks for local state.\n\nThe routing system uses **Wouter** for lightweight client-side navigation. The application follows a component-based architecture with clear separation between game logic (housed in utility classes) and presentation components.\n\n## Backend Architecture  \nThe server runs on **Express.js** with TypeScript, following a simple REST API pattern. The architecture includes:\n\n- **Route handlers** in `/server/routes.ts` for game state CRUD operations\n- **Storage abstraction layer** with an in-memory implementation (`MemStorage`) for development\n- **Middleware** for request logging and error handling\n- **Schema validation** using Zod for type-safe data handling\n\nThe backend is designed to be database-agnostic through the `IStorage` interface, making it easy to swap storage implementations.\n\n## Game Engine Design\nThe core game logic is centralized in a `GameEngine` class that processes player choices and updates game state. Key design decisions include:\n\n- **Immutable state updates** - all game state changes return new objects\n- **Scenario-based progression** - the game generates contextual scenarios based on character state and history\n- **Soul corruption system** - the central mechanic where magic use gradually corrupts the character\n- **Deterministic randomness** - random elements are controlled to ensure fair gameplay\n\n## Data Storage Solutions\nNow uses **local browser storage (localStorage)** for all game data persistence, eliminating database dependencies entirely. The storage system includes:\n\n- **LocalGameStorage** class handling all data persistence in browser localStorage\n- **Game states** stored as structured JSON including character data, relationships, dragonets, and life events\n- **Save/Load system** with multiple game slot support and save game management\n- **Import/Export functionality** allowing players to backup and share their game data\n- **Type-safe schemas** maintained for data consistency using Zod validation\n\n## Development Environment\nThe project is configured for **Replit** deployment with:\n- **Hot module replacement** in development\n- **ESBuild** for production bundling  \n- **Integrated development tools** including error overlays and debugging support\n- **Path aliases** for clean imports (`@/` for client, `@shared/` for shared code)\n\n# External Dependencies\n\n## Database Integration\n- **Drizzle ORM** with PostgreSQL dialect for database operations\n- **@neondatabase/serverless** for cloud database connectivity\n- **connect-pg-simple** for session management (prepared for future authentication)\n\n## UI and Styling\n- **Radix UI** component library for accessible, unstyled primitives\n- **TailwindCSS** for utility-first styling with custom design system\n- **Lucide React** for consistent iconography\n- **class-variance-authority** for component variant management\n\n## State Management and Data Fetching\n- **TanStack React Query** for server state management, caching, and synchronization\n- **React Hook Form** with **Hookform Resolvers** for form validation\n- **Zod** for runtime type validation and schema generation\n\n## Development and Build Tools\n- **Vite** for fast development server and optimized production builds\n- **TypeScript** for type safety across the entire application\n- **ESBuild** for fast JavaScript bundling in production\n- **Replit-specific plugins** for enhanced development experience on the platform\n\n## Utility Libraries\n- **date-fns** for date manipulation and formatting\n- **clsx** and **tailwind-merge** for conditional CSS class handling\n- **nanoid** for generating unique identifiers\n- **cmdk** for command palette functionality","size_bytes":12817},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simplified logging middleware for static file serving\napp.use((req, res, next) => {\n  const start = Date.now();\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.path !== \"/\" && !req.path.includes(\".js\") && !req.path.includes(\".css\")) {\n      log(`${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);\n    }\n  });\n  next();\n});\n\n(async () => {\n  const server = createServer(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    log(`Error: ${message}`);\n    res.status(status).json({ message });\n  });\n\n  // Setup Vite in development or serve static files in production\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Serve the frontend-only app\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Wings of Fire RPG serving on port ${port} (local storage mode)`);\n  });\n})();\n","size_bytes":1390},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertGameStateSchema, type GameState, type InsertGameState } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Game state routes\n  app.get(\"/api/game/:id\", async (req, res) => {\n    try {\n      const gameState = await storage.getGameState(req.params.id);\n      if (!gameState) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      res.json(gameState);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get game state\" });\n    }\n  });\n\n  app.get(\"/api/game/user/:userId\", async (req, res) => {\n    try {\n      const gameState = await storage.getGameStateByUserId(req.params.userId);\n      res.json(gameState || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get game state\" });\n    }\n  });\n\n  app.post(\"/api/game\", async (req, res) => {\n    try {\n      const validatedData = insertGameStateSchema.parse(req.body);\n      const gameState = await storage.createGameState(validatedData);\n      res.status(201).json(gameState);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid game state data\" });\n    }\n  });\n\n  app.patch(\"/api/game/:id\", async (req, res) => {\n    try {\n      const updateData = insertGameStateSchema.partial().parse(req.body);\n      const gameState = await storage.updateGameState(req.params.id, updateData);\n      res.json(gameState);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update game state\" });\n    }\n  });\n\n  app.delete(\"/api/game/:id\", async (req, res) => {\n    try {\n      await storage.deleteGameState(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete game state\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1958},"server/storage.ts":{"content":"import { type User, type InsertUser, type GameState, type InsertGameState } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getGameState(id: string): Promise<GameState | undefined>;\n  getGameStateByUserId(userId: string): Promise<GameState | undefined>;\n  createGameState(gameState: InsertGameState): Promise<GameState>;\n  updateGameState(id: string, gameState: Partial<InsertGameState>): Promise<GameState>;\n  deleteGameState(id: string): Promise<void>;\n}\n\n// Using DatabaseStorage now, keeping MemStorage for reference\nclass MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private gameStates: Map<string, GameState>;\n\n  constructor() {\n    this.users = new Map();\n    this.gameStates = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getGameState(id: string): Promise<GameState | undefined> {\n    return this.gameStates.get(id);\n  }\n\n  async getGameStateByUserId(userId: string): Promise<GameState | undefined> {\n    return Array.from(this.gameStates.values()).find(\n      (gameState) => gameState.userId === userId,\n    );\n  }\n\n  async createGameState(insertGameState: InsertGameState): Promise<GameState> {\n    const id = randomUUID();\n    const now = new Date();\n    const gameState: GameState = {\n      ...insertGameState,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.gameStates.set(id, gameState);\n    return gameState;\n  }\n\n  async updateGameState(id: string, updateData: Partial<InsertGameState>): Promise<GameState> {\n    const existing = this.gameStates.get(id);\n    if (!existing) {\n      throw new Error(\"Game state not found\");\n    }\n    \n    const updated: GameState = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.gameStates.set(id, updated);\n    return updated;\n  }\n\n  async deleteGameState(id: string): Promise<void> {\n    this.gameStates.delete(id);\n  }\n}\n\nimport { db } from \"./db\";\nimport { gameStates } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    // User functionality not implemented yet\n    return undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    // User functionality not implemented yet\n    return undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // User functionality not implemented yet\n    throw new Error(\"User functionality not implemented\");\n  }\n\n  async getGameState(id: string): Promise<GameState | undefined> {\n    const [gameState] = await db.select().from(gameStates).where(eq(gameStates.id, id));\n    return gameState || undefined;\n  }\n\n  async getGameStateByUserId(userId: string): Promise<GameState | undefined> {\n    const [gameState] = await db.select().from(gameStates).where(eq(gameStates.userId, userId));\n    return gameState || undefined;\n  }\n\n  async createGameState(insertGameState: InsertGameState): Promise<GameState> {\n    const [gameState] = await db\n      .insert(gameStates)\n      .values(insertGameState)\n      .returning();\n    return gameState;\n  }\n\n  async updateGameState(id: string, updateData: Partial<InsertGameState>): Promise<GameState> {\n    const [gameState] = await db\n      .update(gameStates)\n      .set(updateData)\n      .where(eq(gameStates.id, id))\n      .returning();\n    return gameState;\n  }\n\n  async deleteGameState(id: string): Promise<void> {\n    await db.delete(gameStates).where(eq(gameStates.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4170},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const gameStates = pgTable(\"game_states\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  characterData: jsonb(\"character_data\").notNull(),\n  gameData: jsonb(\"game_data\").notNull(),\n  turn: integer(\"turn\").notNull().default(1),\n  location: text(\"location\").notNull().default(\"Jade Mountain Academy\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertGameStateSchema = createInsertSchema(gameStates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type GameState = typeof gameStates.$inferSelect;\nexport type InsertGameState = z.infer<typeof insertGameStateSchema>;\n\n// Game-specific types\nexport interface Character {\n  name: string;\n  tribe: string;\n  hybridTribes?: string[]; // For hybrid dragons\n  age: number;\n  yearsSurvived: number;\n  currentSeason: \"Spring\" | \"Summer\" | \"Fall\" | \"Winter\";\n  soulPercentage: number;\n  sanityPercentage: number;\n  soulCorruptionStage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\";\n  strength: number;\n  intelligence: number;\n  charisma: number;\n  wisdom: number;\n  mother: string;\n  father: string;\n  siblings: string[];\n  mate?: string;\n  dragonets: Dragonet[];\n  traits: string[];\n  avatar: string;\n  isAnimus: boolean;\n  tribalPowers: string[];\n  specialPowers: string[];\n  relationships: Record<string, Relationship>;\n  achievements: string[];\n  isAIControlled: boolean;\n  lifeEvents: LifeEvent[];\n  romanticHistory: RomanticEvent[];\n}\n\nexport interface Dragonet {\n  name: string;\n  age: number;\n  tribe: string;\n  hybridTribes?: string[];\n  inheritedTraits: string[];\n  isAnimus: boolean;\n  parentage: \"biological\" | \"adopted\";\n  personality: string;\n}\n\nexport interface Relationship {\n  name: string;\n  type: \"friend\" | \"rival\" | \"enemy\" | \"neutral\" | \"romantic\" | \"mate\" | \"ex_mate\" | \"family\";\n  strength: number;\n  history: string[];\n  isAlive: boolean;\n}\n\nexport interface RomanticEvent {\n  partnerName: string;\n  eventType: \"courtship\" | \"mating\" | \"breakup\" | \"loss\";\n  turnOccurred: number;\n  outcome: string;\n  hasOffspring: boolean;\n}\n\nexport interface LifeEvent {\n  turn: number;\n  category: \"birth\" | \"death\" | \"political\" | \"war\" | \"discovery\" | \"romance\" | \"achievement\" | \"corruption\";\n  description: string;\n  impact: \"positive\" | \"negative\" | \"neutral\";\n}\n\nexport interface GameData {\n  turn: number;\n  location: string;\n  timeInfo: string;\n  yearsPassed?: number;\n  currentSeason?: string;\n  currentScenario: Scenario;\n  history: GameEvent[];\n  relationships: Record<string, number>;\n  inventory: InventoryItem[];\n  reputation: number;\n  politicalEvents: PoliticalEvent[];\n  warStatus: WarStatus;\n  explorationLog: ExplorationEvent[];\n  continent?: \"Pyrrhia\" | \"Pantala\"; // Track which continent player is on\n  lastChoiceResult?: string; // Store the outcome text to display\n  awaitingResponse?: boolean; // Whether waiting for user to continue\n}\n\nexport interface InventoryItem {\n  id: string;\n  name: string;\n  description: string;\n  type: \"enchanted_object\" | \"treasure\" | \"scroll\" | \"weapon\" | \"tool\" | \"magical_artifact\";\n  enchantments: string[];\n  soulCostToCreate?: number;\n  turnCreated?: number;\n  isActive: boolean;\n  canGiveAway?: boolean; // Whether this item can be given to NPCs\n  questItem?: string; // ID of NPC or quest that wants this item\n  rarity?: \"common\" | \"uncommon\" | \"rare\" | \"legendary\" | \"mythical\";\n}\n\nexport interface Scenario {\n  id: string;\n  title: string;\n  description: string;\n  narrativeText: string[];\n  choices: Choice[];\n  type: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic';\n  location: string;\n  timeOfDay: string;\n  weather: string;\n}\n\nexport interface Choice {\n  id: string;\n  text: string;\n  description: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  requirements?: string[];\n  corruption?: boolean;\n  requiresModal?: string;\n  rewardItem?: InventoryItem; // Item to add to inventory when choice is made\n  requiresItem?: string; // Item ID required to make this choice\n  consumesItem?: boolean; // Whether the choice consumes the required item\n}\n\nexport interface GameEvent {\n  turn: number;\n  scenario: string;\n  choice: string;\n  consequences: string[];\n  soulLoss: number;\n  sanityLoss: number;\n}\n\nexport interface MagicSpell {\n  name: string;\n  category: 'minor' | 'moderate' | 'major' | 'catastrophic';\n  soulCost: [number, number]; // min, max\n  description: string;\n  examples: string[];\n  type: \"enchantment\" | \"combat\" | \"healing\" | \"weather\" | \"curse\" | \"summoning\";\n}\n\nexport interface CustomSpell {\n  id: string;\n  targetObject: string;\n  enchantmentDescription: string;\n  estimatedSoulCost: number;\n  spellType: \"enchantment\" | \"combat\" | \"healing\" | \"weather\" | \"curse\" | \"summoning\";\n  complexity: \"simple\" | \"moderate\" | \"complex\" | \"catastrophic\";\n  turnCast: number;\n}\n\nexport interface PoliticalEvent {\n  type: \"succession\" | \"civil_war\" | \"queen_demand\" | \"alliance\" | \"betrayal\";\n  tribes: string[];\n  description: string;\n  playerChoice?: string;\n  consequences: string;\n}\n\nexport interface WarStatus {\n  isAtWar: boolean;\n  warringTribes: string[];\n  warCause: string;\n  playerInvolvement: \"forced_fighter\" | \"enchanter\" | \"neutral\" | \"deserter\";\n}\n\nexport interface ExplorationEvent {\n  location: string;\n  discovery: \"ruins\" | \"scroll\" | \"treasure\" | \"enemy\" | \"ally\" | \"mystery\";\n  description: string;\n  consequences: string[];\n}\n","size_bytes":6111},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Game from \"@/pages/game\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/game/:gameId?\" component={Game} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <Toaster />\n      <Router />\n    </TooltipProvider>\n  );\n}\n\nexport default App;\n","size_bytes":595},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Loading screen animations */\n@keyframes slideIn {\n  0% {\n    width: 0%;\n  }\n  100% {\n    width: 100%;\n  }\n}\n\n/* Pulse animation for loading elements */\n@keyframes pulse-glow {\n  0%, 100% {\n    opacity: 0.6;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n}\n\n:root {\n  --background: hsl(270 20% 98%);\n  --foreground: hsl(260 15% 8%);\n  --card: hsl(270 20% 95%);\n  --card-foreground: hsl(260 15% 8%);\n  --popover: hsl(270 20% 98%);\n  --popover-foreground: hsl(260 15% 8%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(260 15% 8%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(270 20% 88%);\n  --muted-foreground: hsl(260 15% 8%);\n  --accent: hsl(268 50% 90%);\n  --accent-foreground: hsl(262 83% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(268 30% 85%);\n  --input: hsl(270 23% 93%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(270 20% 95%);\n  --sidebar-foreground: hsl(260 15% 8%);\n  --sidebar-primary: hsl(262 83% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(268 50% 90%);\n  --sidebar-accent-foreground: hsl(262 83% 58%);\n  --sidebar-border: hsl(268 25% 80%);\n  --sidebar-ring: hsl(262 83% 58%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Dragon theme colors */\n  --dragon-deep: hsl(255 27% 10%);\n  --dragon-scale: hsl(260 20% 18%);\n  --dragon-purple: hsl(262 83% 58%);\n  --dragon-gold: hsl(43 96% 56%);\n  --soul-pure: hsl(0 0% 100%);\n  --soul-corrupt: hsl(0 74% 42%);\n  \n  /* Fantasy fonts */\n  --font-fantasy: 'Cinzel', serif;\n  --font-narrative: 'Crimson Text', serif;\n}\n\n.dark {\n  --background: hsl(260 20% 8%);\n  --foreground: hsl(270 15% 92%);\n  --card: hsl(260 20% 12%);\n  --card-foreground: hsl(270 15% 85%);\n  --popover: hsl(260 20% 8%);\n  --popover-foreground: hsl(270 15% 92%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(270 15% 92%);\n  --secondary-foreground: hsl(260 15% 8%);\n  --muted: hsl(260 20% 10%);\n  --muted-foreground: hsl(270 15% 46%);\n  --accent: hsl(268 50% 15%);\n  --accent-foreground: hsl(262 83% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(268 30% 20%);\n  --input: hsl(260 27% 18%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(260 20% 12%);\n  --sidebar-foreground: hsl(270 15% 85%);\n  --sidebar-primary: hsl(262 83% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(268 50% 15%);\n  --sidebar-accent-foreground: hsl(262 83% 58%);\n  --sidebar-border: hsl(268 25% 25%);\n  --sidebar-ring: hsl(262 83% 58%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  html {\n    background: hsl(260 20% 8%);\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: hsl(260 20% 8%);\n    min-height: 100vh;\n  }\n  \n  #root {\n    background: hsl(260 20% 8%);\n    min-height: 100vh;\n  }\n}\n\n/* Dragon theme styles */\n.bg-dragon-gradient {\n  background: linear-gradient(135deg, hsl(262 80% 8%) 0%, hsl(262 60% 15%) 30%, hsl(268 50% 25%) 70%, hsl(262 80% 8%) 100%);\n}\n\n.corrupted-soul {\n  background: linear-gradient(90deg, var(--soul-corrupt) 0%, hsl(0 50% 30%) 100%);\n  animation: pulse-corrupt 1.5s infinite;\n}\n\n.pure-soul {\n  background: linear-gradient(90deg, var(--soul-pure) 0%, hsl(210 20% 95%) 100%);\n}\n\n.narrative-text {\n  line-height: 1.8;\n  text-align: justify;\n}\n\n.choice-button:hover {\n  transform: translateY(-2px);\n  transition: all 0.3s ease;\n}\n\n.tribal-border {\n  border-image: linear-gradient(45deg, var(--dragon-gold), var(--dragon-purple)) 1;\n}\n\n@keyframes pulse-corrupt {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n/* Loading screen animations */\n@keyframes spin-slow {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes fade-in {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes loading-bar {\n  0% { width: 0%; }\n  50% { width: 70%; }\n  100% { width: 100%; }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 3s linear infinite;\n}\n\n.animate-fade-in {\n  animation: fade-in 1s ease-out forwards;\n  opacity: 0;\n}\n\n.animate-loading-bar {\n  animation: loading-bar 3s ease-in-out infinite;\n}\n\n.animation-delay-500 {\n  animation-delay: 0.5s;\n}\n\n.animation-delay-1000 {\n  animation-delay: 1s;\n}\n\n.animation-delay-2000 {\n  animation-delay: 2s;\n}\n\n.animation-delay-3000 {\n  animation-delay: 3s;\n}\n\n/* Custom range slider styling */\n.slider::-webkit-slider-thumb {\n  appearance: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: hsl(280.4, 72.8%, 55.7%);\n  cursor: pointer;\n}\n\n.slider::-moz-range-thumb {\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: hsl(280.4, 72.8%, 55.7%);\n  cursor: pointer;\n  border: none;\n}\n\n@keyframes glow {\n  from { box-shadow: 0 0 5px var(--dragon-gold), 0 0 10px var(--dragon-gold), 0 0 15px var(--dragon-gold); }\n  to { box-shadow: 0 0 10px var(--dragon-gold), 0 0 20px var(--dragon-gold), 0 0 30px var(--dragon-gold); }\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite alternate;\n}\n","size_bytes":7615},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/character-creator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dice6, Sparkles, Zap, Shuffle } from \"lucide-react\";\nimport { generateCharacter } from \"@/lib/character-generator\";\nimport { Character } from \"@shared/schema\";\n\nconst TRIBES = [\n  \"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \n  \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\", \"Hybrid\"\n];\n\nconst AVAILABLE_TRAITS = [\n  \"Brave\", \"Cunning\", \"Wise\", \"Curious\", \"Fierce\", \"Gentle\", \"Loyal\", \"Mysterious\",\n  \"Ambitious\", \"Calm\", \"Reckless\", \"Patient\", \"Proud\", \"Humble\", \"Vengeful\", \"Forgiving\",\n  \"Studious\", \"Impulsive\", \"Cautious\", \"Bold\", \"Sarcastic\", \"Optimistic\", \"Pessimistic\", \"Protective\"\n];\n\nconst TRIBAL_POWERS = {\n  MudWing: [\"Fire resistance\", \"Mud camouflage\", \"Enhanced strength when warm\"],\n  SandWing: [\"Venomous tail barb\", \"Desert survival\", \"Heat resistance\"],\n  SkyWing: [\"Superior flight speed\", \"Fire breathing\", \"High altitude adaptation\"],\n  SeaWing: [\"Underwater breathing\", \"Bioluminescent scales\", \"Deep sea pressure resistance\"],\n  IceWing: [\"Frost breath\", \"Cold immunity\", \"Serrated claws\"],\n  RainWing: [\"Color-changing scales\", \"Acidic venom\", \"Prehensile tail\"],\n  NightWing: [\"Future sight\", \"Mind reading\", \"Fire breathing\"],\n  SilkWing: [\"Silk production\", \"Metamorphosis\", \"Enhanced agility\"],\n  HiveWing: [\"Paralytic stinger\", \"Hive mind connection\", \"Toxic breath\"],\n  LeafWing: [\"Plant manipulation\", \"Leaf speak\", \"Photosynthesis healing\"]\n};\n\ninterface CharacterCreatorProps {\n  onCreateCharacter: (character: Character) => void;\n  onCancel: () => void;\n}\n\nexport default function CharacterCreator({ onCreateCharacter, onCancel }: CharacterCreatorProps) {\n  const [customName, setCustomName] = useState(\"\");\n  const [selectedTribe, setSelectedTribe] = useState<string>(\"\");\n  const [isAnimus, setIsAnimus] = useState(false);\n  const [selectedPowers, setSelectedPowers] = useState<string[]>([]);\n  const [selectedTraits, setSelectedTraits] = useState<string[]>([]);\n  const [selectedHybridTribes, setSelectedHybridTribes] = useState<string[]>([]);\n  const [attributes, setAttributes] = useState({\n    strength: 50,\n    intelligence: 50,\n    charisma: 50,\n    wisdom: 50\n  });\n\n  const handleRandomize = () => {\n    const randomChar = generateCharacter();\n    setCustomName(randomChar.name);\n    setSelectedTribe(randomChar.hybridTribes ? \"Hybrid\" : randomChar.tribe);\n    setIsAnimus(randomChar.isAnimus);\n    setSelectedPowers(randomChar.tribalPowers);\n    setSelectedTraits(randomChar.traits);\n    setSelectedHybridTribes(randomChar.hybridTribes || []);\n    setAttributes({\n      strength: randomChar.strength,\n      intelligence: randomChar.intelligence,\n      charisma: randomChar.charisma,\n      wisdom: randomChar.wisdom\n    });\n  };\n\n  const handlePowerToggle = (power: string) => {\n    setSelectedPowers(prev => \n      prev.includes(power) \n        ? prev.filter(p => p !== power)\n        : [...prev, power]\n    );\n  };\n\n  const handleTraitToggle = (trait: string) => {\n    setSelectedTraits(prev => \n      prev.includes(trait) \n        ? prev.filter(t => t !== trait)\n        : [...prev, trait]\n    );\n  };\n\n  const handleHybridTribeToggle = (tribe: string) => {\n    setSelectedHybridTribes(prev => \n      prev.includes(tribe) \n        ? prev.filter(t => t !== tribe)\n        : prev.length < 3 ? [...prev, tribe] : prev\n    );\n  };\n\n  const randomizeTraits = () => {\n    const shuffled = [...AVAILABLE_TRAITS].sort(() => Math.random() - 0.5);\n    setSelectedTraits(shuffled.slice(0, 2 + Math.floor(Math.random() * 3)));\n  };\n\n  const handleCreateCustom = () => {\n    const baseChar = generateCharacter();\n    const customCharacter: Character = {\n      ...baseChar,\n      name: customName || baseChar.name,\n      tribe: selectedTribe === \"Hybrid\" ? (selectedHybridTribes[0] || \"MudWing\") : selectedTribe || baseChar.tribe,\n      hybridTribes: selectedTribe === \"Hybrid\" ? selectedHybridTribes : undefined,\n      isAnimus,\n      tribalPowers: selectedPowers,\n      traits: selectedTraits,\n      strength: attributes.strength,\n      intelligence: attributes.intelligence,\n      charisma: attributes.charisma,\n      wisdom: attributes.wisdom,\n      soulPercentage: 100,\n      sanityPercentage: 100\n    };\n    onCreateCharacter(customCharacter);\n  };\n\n  const availablePowers = (() => {\n    if (selectedTribe === \"Hybrid\" && selectedHybridTribes.length > 0) {\n      // Combine powers from all selected hybrid tribes\n      const combinedPowers: string[] = [];\n      selectedHybridTribes.forEach(tribe => {\n        const tribePowers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS] || [];\n        combinedPowers.push(...tribePowers);\n      });\n      return Array.from(new Set(combinedPowers)); // Remove duplicates\n    }\n    return selectedTribe ? TRIBAL_POWERS[selectedTribe as keyof typeof TRIBAL_POWERS] || [] : [];\n  })();\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient text-slate-100 p-4\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30\">\n          <CardHeader>\n            <CardTitle className=\"font-fantasy text-3xl text-purple-300 text-center\">\n              <span className=\"mr-3\">🐉</span>\n              Create Your Dragon\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Quick Actions */}\n            <div className=\"flex gap-4 justify-center\">\n              <Button \n                onClick={handleRandomize}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                <Dice6 className=\"w-4 h-4 mr-2\" />\n                Randomize Everything\n              </Button>\n              <Button \n                onClick={() => onCreateCharacter(generateCharacter())}\n                variant=\"outline\"\n              >\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Quick Start (Random)\n              </Button>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {/* Basic Info */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Basic Information</h3>\n                \n                <div>\n                  <Label htmlFor=\"name\">Dragon Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={customName}\n                    onChange={(e) => setCustomName(e.target.value)}\n                    placeholder=\"Enter custom name or leave blank for random\"\n                    className=\"bg-black/50 border-purple-500/30\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"tribe\">Tribe</Label>\n                  <Select value={selectedTribe} onValueChange={setSelectedTribe}>\n                    <SelectTrigger className=\"bg-black/50 border-purple-500/30\">\n                      <SelectValue placeholder=\"Choose your tribe\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {TRIBES.map(tribe => (\n                        <SelectItem key={tribe} value={tribe}>{tribe}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"animus\" \n                    checked={isAnimus}\n                    onCheckedChange={(checked) => setIsAnimus(checked === true)}\n                  />\n                  <Label htmlFor=\"animus\" className=\"flex items-center\">\n                    <Zap className=\"w-4 h-4 mr-2 text-red-400\" />\n                    Animus Dragon (Soul magic abilities)\n                  </Label>\n                </div>\n\n                {/* Hybrid Tribe Selection */}\n                {selectedTribe === \"Hybrid\" && (\n                  <div className=\"space-y-3\">\n                    <Label>Choose Hybrid Tribes (2-3 tribes)</Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {TRIBES.filter(t => t !== \"Hybrid\").map(tribe => (\n                        <div \n                          key={tribe}\n                          className={`p-2 rounded-lg border text-sm cursor-pointer transition-colors ${\n                            selectedHybridTribes.includes(tribe)\n                              ? 'bg-purple-600/50 border-purple-400'\n                              : 'bg-black/30 border-purple-500/30 hover:bg-purple-500/20'\n                          }`}\n                          onClick={() => handleHybridTribeToggle(tribe)}\n                        >\n                          {tribe}\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-slate-400\">\n                      Select 2-3 tribes for your hybrid heritage. Order matters - first tribe is primary.\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* Attributes */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Attributes</h3>\n                \n                {Object.entries(attributes).map(([attr, value]) => (\n                  <div key={attr}>\n                    <Label className=\"capitalize\">{attr}: {value}</Label>\n                    <input\n                      type=\"range\"\n                      min=\"10\"\n                      max=\"90\"\n                      value={value}\n                      onChange={(e) => setAttributes(prev => ({\n                        ...prev,\n                        [attr]: parseInt(e.target.value)\n                      }))}\n                      className=\"w-full h-2 bg-black/50 rounded-lg appearance-none cursor-pointer slider\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Tribal Powers */}\n            {selectedTribe && availablePowers.length > 0 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">\n                  {selectedTribe === \"Hybrid\" ? \"Hybrid\" : selectedTribe} Tribal Powers\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {availablePowers.map(power => (\n                    <div \n                      key={power}\n                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                        selectedPowers.includes(power)\n                          ? 'bg-purple-600/50 border-purple-400'\n                          : 'bg-black/50 border-purple-500/30 hover:bg-purple-500/20'\n                      }`}\n                      onClick={() => handlePowerToggle(power)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">{power}</span>\n                        {selectedPowers.includes(power) && (\n                          <Badge variant=\"secondary\" className=\"ml-2\">Selected</Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <p className=\"text-xs text-slate-400\">\n                  Select the powers your dragon has mastered. You can choose multiple abilities.\n                </p>\n              </div>\n            )}\n\n            {/* Character Traits */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Character Traits</h3>\n                <Button \n                  onClick={randomizeTraits}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"text-xs\"\n                >\n                  <Dice6 className=\"w-3 h-3 mr-1\" />\n                  Randomize\n                </Button>\n              </div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {AVAILABLE_TRAITS.map(trait => (\n                  <div \n                    key={trait}\n                    className={`p-2 rounded-lg border text-sm cursor-pointer transition-colors ${\n                      selectedTraits.includes(trait)\n                        ? 'bg-purple-600/50 border-purple-400'\n                        : 'bg-black/30 border-purple-500/30 hover:bg-purple-500/20'\n                    }`}\n                    onClick={() => handleTraitToggle(trait)}\n                  >\n                    {trait}\n                  </div>\n                ))}\n              </div>\n              <p className=\"text-xs text-slate-400\">\n                Select 2-5 traits that define your dragon's personality and behavior.\n              </p>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 justify-center pt-6\">\n              <Button \n                onClick={handleCreateCustom}\n                size=\"lg\"\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                Create Character\n              </Button>\n              <Button \n                onClick={onCancel}\n                variant=\"outline\"\n                size=\"lg\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13884},"client/src/components/character-panel.tsx":{"content":"import { Character, InventoryItem } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { GameEngine } from \"@/lib/game-engine\";\nimport { getHybridDisplayName, getHybridPowerDescription } from \"@/lib/hybrid-generator\";\nimport SanityBar from \"./sanity-bar\";\nimport { Zap, Eye, Sparkles, Package, Heart, Users, Baby } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CharacterPanelProps {\n  character: Character;\n  inventory?: InventoryItem[];\n  onShowTribalPowers?: () => void;\n  onUseInventoryItem?: (item: InventoryItem) => void;\n  onSeekRomance?: () => void;\n}\n\nexport default function CharacterPanel({ character, inventory = [], onShowTribalPowers, onUseInventoryItem, onSeekRomance }: CharacterPanelProps) {\n  const [activeTab, setActiveTab] = useState<\"info\" | \"family\" | \"social\" | \"inventory\">(\"info\");\n  const corruptionLevel = GameEngine.getCorruptionLevel(character.soulPercentage);\n  \n  const getSoulBarColor = () => {\n    if (character.soulPercentage >= 80) return \"bg-white\";\n    if (character.soulPercentage >= 50) return \"bg-yellow-400\";\n    if (character.soulPercentage >= 20) return \"bg-orange-500\";\n    return \"bg-red-600 animate-pulse\";\n  };\n\n  return (\n    <div className=\"lg:col-span-1\">\n      <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30 h-full overflow-y-auto\">\n        <CardContent className=\"p-6\">\n          {/* Character Avatar & Basic Info */}\n          <div className=\"text-center mb-6\">\n            <img\n              src={character.avatar}\n              alt=\"Dragon character portrait\"\n              className=\"w-32 h-32 rounded-full mx-auto mb-4 border-4 border-purple-400 object-cover\"\n            />\n            <h2 className=\"font-fantasy text-2xl font-bold text-purple-300\">\n              {character.name}\n            </h2>\n            <p className=\"text-purple-400 font-medium\">\n              {character.hybridTribes ? getHybridDisplayName(character) : `${character.tribe} Dragonet`}\n            </p>\n            {character.hybridTribes && (\n              <div className=\"mt-2\">\n                <Badge variant=\"outline\" className=\"border-rainbow bg-gradient-to-r from-purple-500/20 to-blue-500/20\">\n                  <Sparkles className=\"w-3 h-3 mr-1\" />\n                  Hybrid Dragon\n                </Badge>\n              </div>\n            )}\n            <p className=\"text-sm text-purple-200\">\n              {character.age} years old\n            </p>\n          </div>\n\n          {/* Soul Status */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-medium text-slate-200\">Soul Integrity</span>\n              <span className=\"text-sm font-bold\">{character.soulPercentage}%</span>\n            </div>\n            <Progress\n              value={character.soulPercentage}\n              className=\"h-3\"\n            />\n            <div className=\"flex items-center justify-between mt-1\">\n              <Badge variant={character.soulCorruptionStage === 'Normal' ? 'default' : character.soulCorruptionStage === 'Frayed' ? 'secondary' : character.soulCorruptionStage === 'Twisted' ? 'destructive' : 'destructive'} className=\"text-xs\">\n                {character.soulCorruptionStage}\n              </Badge>\n              <span className=\"text-xs text-slate-400\">\n                {character.soulCorruptionStage === 'Normal' ? 'Pure soul' : character.soulCorruptionStage === 'Frayed' ? 'Minor corruption' : character.soulCorruptionStage === 'Twisted' ? 'Significant corruption' : 'Soul nearly lost'}\n              </span>\n            </div>\n          </div>\n\n          {/* Sanity Status */}\n          <div className=\"mb-6\">\n            <SanityBar sanityPercentage={character.sanityPercentage} />\n          </div>\n\n          {/* Animus & Powers Status */}\n          <div className=\"mb-6\">\n            <div className=\"space-y-3\">\n              {character.isAnimus && (\n                <Badge variant=\"destructive\" className=\"w-full justify-center py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Animus Dragon\n                </Badge>\n              )}\n              \n              {(character.tribalPowers.length > 0 || character.specialPowers.length > 0) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onShowTribalPowers}\n                  className=\"w-full\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  View Powers ({character.tribalPowers.length + character.specialPowers.length})\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex space-x-1 mb-4\">\n            <Button\n              variant={activeTab === \"info\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"info\")}\n              className=\"flex-1\"\n            >\n              <Eye className=\"w-3 h-3 mr-1\" />\n              Info\n            </Button>\n            <Button\n              variant={activeTab === \"family\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"family\")}\n              className=\"flex-1\"\n            >\n              <Baby className=\"w-3 h-3 mr-1\" />\n              Family\n            </Button>\n            <Button\n              variant={activeTab === \"social\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"social\")}\n              className=\"flex-1\"\n            >\n              <Users className=\"w-3 h-3 mr-1\" />\n              Social\n            </Button>\n            <Button\n              variant={activeTab === \"inventory\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"inventory\")}\n              className=\"flex-1\"\n            >\n              <Package className=\"w-3 h-3 mr-1\" />\n              Items\n            </Button>\n          </div>\n\n          {/* Tab Content */}\n          {activeTab === \"info\" && (\n            <div className=\"space-y-4\">\n              {/* Character Stats */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Attributes\n                </h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Strength</div>\n                    <div className=\"font-semibold\">{character.strength}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Intelligence</div>\n                    <div className=\"font-semibold\">{character.intelligence}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Charisma</div>\n                    <div className=\"font-semibold\">{character.charisma}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Wisdom</div>\n                    <div className=\"font-semibold\">{character.wisdom}</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Hybrid Dragon Info */}\n              {character.hybridTribes && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    Hybrid Heritage\n                  </h3>\n                  <div className=\"bg-gradient-to-r from-purple-900/30 to-blue-900/30 rounded-lg p-3 border border-purple-500/20\">\n                    <div className=\"space-y-2 text-sm\">\n                      {getHybridPowerDescription(character).map((desc, index) => (\n                        <p key={index} className=\"text-slate-300\">{desc}</p>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Traits */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Traits\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {character.traits.map((trait, index) => (\n                    <Badge\n                      key={index}\n                      variant={trait === 'Corrupted' ? 'destructive' : 'secondary'}\n                      className={trait === 'Corrupted' ? 'bg-red-600/30 text-red-300' : 'bg-purple-600/30 text-purple-300'}\n                    >\n                      {trait}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Achievements */}\n              {character.achievements.length > 0 && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    Achievements\n                  </h3>\n                  <div className=\"space-y-1\">\n                    {character.achievements.slice(0, 5).map((achievement, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"w-full justify-start text-xs py-1\">\n                        <Sparkles className=\"w-3 h-3 mr-1\" />\n                        {achievement}\n                      </Badge>\n                    ))}\n                    {character.achievements.length > 5 && (\n                      <p className=\"text-xs text-slate-400\">+{character.achievements.length - 5} more...</p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"family\" && (\n            <div className=\"space-y-4\">\n              {/* Parents & Siblings */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Birth Family\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Mother:</span>\n                    <span>{character.mother}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Father:</span>\n                    <span>{character.father}</span>\n                  </div>\n                  {character.siblings.length > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Siblings:</span>\n                      <span>{character.siblings.join(\", \")}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Mate & Romance */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  <Heart className=\"w-4 h-4 inline mr-2\" />\n                  Romantic Life\n                </h3>\n                \n                {character.mate ? (\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Mate:</span>\n                      <span className=\"text-pink-300\">{character.mate}</span>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <p className=\"text-sm text-slate-400\">No mate yet</p>\n                    {character.age >= 3 && character.soulPercentage >= 50 && character.sanityPercentage >= 50 && onSeekRomance && (\n                      <Button\n                        onClick={onSeekRomance}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/10\"\n                      >\n                        <Heart className=\"w-4 h-4 mr-2\" />\n                        Seek Romance\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                {/* Romantic History */}\n                {character.romanticHistory && character.romanticHistory.length > 0 && (\n                  <div className=\"mt-4\">\n                    <h4 className=\"text-sm font-semibold text-purple-400 mb-2\">Romantic History</h4>\n                    <div className=\"space-y-2\">\n                      {character.romanticHistory.slice(-3).map((event, index) => (\n                        <div key={index} className=\"bg-black/30 rounded p-2 text-xs\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-pink-300\">{event.partnerName}</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {event.eventType}\n                            </Badge>\n                          </div>\n                          <p className=\"text-slate-400 mt-1\">{event.outcome}</p>\n                        </div>\n                      ))}\n                      {character.romanticHistory.length > 3 && (\n                        <p className=\"text-xs text-slate-400 text-center\">+{character.romanticHistory.length - 3} more romantic events...</p>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Dragonets */}\n              {character.dragonets.length > 0 && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    <Baby className=\"w-4 h-4 inline mr-2\" />\n                    Dragonets ({character.dragonets.length})\n                  </h3>\n                  <div className=\"space-y-3\">\n                    {character.dragonets.map((dragonet, index) => (\n                      <div key={index} className=\"bg-black/30 rounded-lg p-3\">\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"font-semibold text-purple-300\">{dragonet.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {dragonet.age} years\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs space-y-1 text-slate-400\">\n                          <div>Heritage: {dragonet.hybridTribes ? dragonet.hybridTribes.join('/') : dragonet.tribe}</div>\n                          <div>Personality: {dragonet.personality}</div>\n                          {dragonet.isAnimus && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              <Zap className=\"w-2 h-2 mr-1\" />\n                              Animus\n                            </Badge>\n                          )}\n                          {dragonet.inheritedTraits.length > 0 && (\n                            <div>Traits: {dragonet.inheritedTraits.join(', ')}</div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"social\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                <Users className=\"w-4 h-4 inline mr-2\" />\n                Relationships ({Object.keys(character.relationships).length})\n              </h3>\n              {Object.keys(character.relationships).length === 0 ? (\n                <p className=\"text-slate-400 text-sm text-center py-4\">No significant relationships yet.</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {Object.values(character.relationships).slice(0, 8).map((relationship, index) => (\n                    <div key={index} className=\"bg-black/30 rounded-lg p-3\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-semibold text-purple-300\">{relationship.name}</span>\n                        <Badge \n                          variant={relationship.type === 'mate' || relationship.type === 'romantic' ? 'default' : relationship.type === 'friend' ? 'secondary' : relationship.type === 'rival' || relationship.type === 'enemy' ? 'destructive' : 'outline'}\n                          className=\"text-xs\"\n                        >\n                          {relationship.type === 'mate' ? '💕 Mate' : relationship.type === 'romantic' ? '💖 Romance' : relationship.type === 'friend' ? '🤝 Friend' : relationship.type === 'rival' ? '⚔️ Rival' : relationship.type === 'enemy' ? '💀 Enemy' : '🤷 Neutral'}\n                        </Badge>\n                      </div>\n                      <div className=\"text-xs text-slate-400\">\n                        <div>Strength: {relationship.strength}</div>\n                        {relationship.history.length > 0 && (\n                          <div>Last: {relationship.history[relationship.history.length - 1]}</div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  {Object.keys(character.relationships).length > 8 && (\n                    <p className=\"text-xs text-slate-400 text-center\">+{Object.keys(character.relationships).length - 8} more relationships...</p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"inventory\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                <Package className=\"w-4 h-4 inline mr-2\" />\n                Inventory ({inventory.length})\n              </h3>\n              {inventory.length === 0 ? (\n                <p className=\"text-slate-400 text-sm text-center py-4\">No items in inventory.</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {inventory.slice(0, 6).map((item, index) => (\n                    <div key={index} className=\"bg-black/30 rounded-lg p-3 hover:bg-black/40 transition-colors\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-semibold text-purple-300\">{item.name}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={item.type === 'enchanted_object' ? 'default' : item.type === 'magical_artifact' ? 'destructive' : 'secondary'} className=\"text-xs\">\n                            {item.type.replace('_', ' ')}\n                          </Badge>\n                          {onUseInventoryItem && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => onUseInventoryItem(item)}\n                              className=\"h-6 px-2 text-xs hover:bg-purple-600/30\"\n                            >\n                              Use\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-slate-300 mb-2\">{item.description}</p>\n                      {item.enchantments.length > 0 && (\n                        <div className=\"text-xs text-blue-300\">\n                          ✨ {item.enchantments.join(', ')}\n                        </div>\n                      )}\n                      {item.soulCostToCreate && (\n                        <div className=\"text-xs text-red-300 mt-1\">\n                          Soul cost: {item.soulCostToCreate}%\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  {inventory.length > 6 && (\n                    <p className=\"text-xs text-slate-400 text-center\">+{inventory.length - 6} more items...</p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":20483},"client/src/components/enhanced-magic-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Character } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Wand2, Skull, Zap, Shield, Cloud, Heart, Sword, Eye } from \"lucide-react\";\nimport { ENHANCED_MAGIC_SPELLS, calculateSpellSoulCost } from \"@/lib/enhanced-magic-system\";\n\ninterface EnhancedMagicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  onCastSpell?: (spellName: string, soulCost: number) => void;\n}\n\nconst typeIcons = {\n  enchantment: Wand2,\n  combat: Sword,\n  healing: Heart,\n  weather: Cloud,\n  curse: Skull,\n  summoning: Eye\n};\n\nconst typeColors = {\n  enchantment: \"bg-purple-600\",\n  combat: \"bg-red-600\", \n  healing: \"bg-green-600\",\n  weather: \"bg-blue-600\",\n  curse: \"bg-black\",\n  summoning: \"bg-orange-600\"\n};\n\nexport default function EnhancedMagicModal({ \n  isOpen, \n  onClose, \n  character,\n  onCastSpell \n}: EnhancedMagicModalProps) {\n  const [selectedType, setSelectedType] = useState<string>(\"enchantment\");\n\n  if (!character.isAnimus) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-md bg-black/90 border-purple-500/30\">\n          <DialogHeader>\n            <DialogTitle className=\"text-purple-300\">Magic Denied</DialogTitle>\n            <DialogDescription className=\"text-purple-200\">\n              Only animus dragons can cast soul magic. Your character lacks this rare and dangerous gift.\n            </DialogDescription>\n          </DialogHeader>\n          <Button onClick={onClose} className=\"bg-purple-600 hover:bg-purple-700\">\n            Close\n          </Button>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const spellsByType = ENHANCED_MAGIC_SPELLS.reduce((acc, spell) => {\n    if (!acc[spell.type]) acc[spell.type] = [];\n    acc[spell.type].push(spell);\n    return acc;\n  }, {} as Record<string, typeof ENHANCED_MAGIC_SPELLS>);\n\n  const handleCastSpell = (spellName: string) => {\n    const spell = ENHANCED_MAGIC_SPELLS.find(s => s.name === spellName);\n    if (spell && onCastSpell) {\n      const soulCost = calculateSpellSoulCost(spell);\n      onCastSpell(spellName, soulCost);\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-black/90 border-purple-500/30\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-2xl text-purple-300 flex items-center\">\n            <Zap className=\"w-6 h-6 mr-2 text-red-400\" />\n            Animus Magic Grimoire\n          </DialogTitle>\n          <DialogDescription className=\"text-purple-200\">\n            Channel your soul's power to reshape reality itself. Each spell costs a fragment of your very essence.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Soul Status Warning */}\n        <div className=\"bg-red-900/30 border border-red-500/50 rounded-lg p-4 mb-4\">\n          <div className=\"flex items-center mb-2\">\n            <Skull className=\"w-5 h-5 mr-2 text-red-400\" />\n            <span className=\"font-semibold text-red-300\">Soul Integrity: {character.soulPercentage}%</span>\n          </div>\n          <p className=\"text-sm text-red-200\">\n            Corruption Stage: <Badge variant=\"destructive\">{character.soulCorruptionStage}</Badge>\n          </p>\n          {character.soulPercentage < 50 && (\n            <p className=\"text-xs text-red-300 mt-2\">\n              ⚠️ Your soul is heavily corrupted. Magic use is increasingly dangerous.\n            </p>\n          )}\n        </div>\n\n        <Tabs value={selectedType} onValueChange={setSelectedType}>\n          <TabsList className=\"grid w-full grid-cols-6 bg-black/50\">\n            {Object.keys(spellsByType).map(type => {\n              const Icon = typeIcons[type as keyof typeof typeIcons];\n              return (\n                <TabsTrigger \n                  key={type} \n                  value={type}\n                  className=\"flex flex-col items-center p-2 data-[state=active]:bg-purple-600\"\n                >\n                  <Icon className=\"w-4 h-4 mb-1\" />\n                  <span className=\"text-xs capitalize\">{type}</span>\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n\n          {Object.entries(spellsByType).map(([type, spells]) => (\n            <TabsContent key={type} value={type} className=\"space-y-4\">\n              <div className=\"grid gap-4\">\n                {spells.map((spell) => {\n                  const Icon = typeIcons[spell.type as keyof typeof typeIcons];\n                  const canCast = character.soulPercentage >= spell.soulCost[0];\n                  \n                  return (\n                    <Card \n                      key={spell.name}\n                      className={`bg-black/40 border-purple-500/30 ${\n                        !canCast ? 'opacity-50' : 'hover:bg-purple-500/10'\n                      }`}\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className={`p-2 rounded-full mr-3 ${typeColors[spell.type as keyof typeof typeColors]}`}>\n                              <Icon className=\"w-4 h-4 text-white\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-lg text-purple-300\">\n                                {spell.name}\n                              </CardTitle>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Badge \n                                  variant={spell.category === 'catastrophic' ? 'destructive' : 'secondary'}\n                                  className=\"text-xs\"\n                                >\n                                  {spell.category}\n                                </Badge>\n                                <span className=\"text-sm text-slate-400\">\n                                  Soul Cost: {spell.soulCost[0]}-{spell.soulCost[1]}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <Button\n                            onClick={() => handleCastSpell(spell.name)}\n                            disabled={!canCast}\n                            variant={spell.category === 'catastrophic' ? 'destructive' : 'default'}\n                            size=\"sm\"\n                          >\n                            Cast Spell\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      \n                      <CardContent>\n                        <p className=\"text-purple-200 mb-3\">{spell.description}</p>\n                        \n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-semibold text-purple-300 text-sm\">Possible Effects:</h4>\n                          <ul className=\"space-y-1\">\n                            {spell.examples.map((example, index) => (\n                              <li key={index} className=\"text-sm text-slate-300 flex items-start\">\n                                <span className=\"text-purple-400 mr-2\">•</span>\n                                {example}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                        \n                        {spell.category === 'catastrophic' && (\n                          <div className=\"mt-3 p-2 bg-red-900/30 border border-red-500/50 rounded\">\n                            <p className=\"text-xs text-red-300 flex items-center\">\n                              <Skull className=\"w-3 h-3 mr-1\" />\n                              WARNING: Catastrophic magic may completely corrupt your soul\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        <div className=\"mt-6 p-4 bg-slate-800/50 rounded-lg border border-slate-600\">\n          <h4 className=\"font-semibold text-purple-300 mb-2\">Remember:</h4>\n          <ul className=\"text-sm text-slate-300 space-y-1\">\n            <li>• Each spell permanently removes soul fragments</li>\n            <li>• Higher-tier magic carries exponentially greater risks</li>\n            <li>• Soul corruption changes your personality and choices</li>\n            <li>• At 0% soul, the AI takes complete control of your character</li>\n          </ul>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9203},"client/src/components/gameplay-area.tsx":{"content":"import { Character, GameData, Choice } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Wand2, Package, SkipForward, Eye, Brain, Sparkles, Zap, MapPin, Gift } from \"lucide-react\";\nimport { LocationMigrationSystem } from \"./location-migration-system\";\nimport ContextualInventoryModal from \"./contextual-inventory-modal\";\nimport { LocationSystem, Location } from \"@/lib/location-system\";\nimport { useState } from \"react\";\n\ninterface GameplayAreaProps {\n  character: Character;\n  gameData: GameData;\n  onChoice: (choice: Choice) => void;\n  onShowMagic: () => void;\n  onShowSpecialPower: (powerType: 'prophecy' | 'mindreading' | 'future') => void;\n  onShowTribalPowers: () => void;\n  onCustomAction: () => void;\n  onLocationMigration?: (destination: Location) => void;\n  onGiveItem?: (itemId: string, npcName: string, result: string) => void;\n  onInventoryAction?: (action: string, itemId: string, result: string) => void;\n  isProcessing: boolean;\n}\n\nexport default function GameplayArea({\n  character,\n  gameData,\n  onChoice,\n  onShowMagic,\n  onShowSpecialPower,\n  onShowTribalPowers,\n  onCustomAction,\n  onLocationMigration,\n  onGiveItem,\n  onInventoryAction,\n  isProcessing,\n}: GameplayAreaProps) {\n  const scenario = gameData.currentScenario;\n  \n  // Safety check - if no scenario, don't render anything\n  if (!scenario) {\n    return (\n      <div className=\"lg:col-span-2\">\n        <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30 h-full flex flex-col\">\n          <div className=\"p-6 text-center\">\n            <p className=\"text-purple-300\">Loading scenario...</p>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n  const [showMigrationSystem, setShowMigrationSystem] = useState(false);\n  const [showGivingModal, setShowGivingModal] = useState(false);\n  const currentLocation = LocationSystem.getCurrentLocation(gameData);\n\n  const getChoiceButtonColor = (choice: Choice, index: number) => {\n    if (choice.corruption) {\n      return \"bg-red-900/50 hover:bg-red-900/70 border-red-600/30 text-red-300\";\n    }\n    if (choice.soulCost > 10) {\n      return \"bg-orange-900/50 hover:bg-orange-900/70 border-orange-600/30\";\n    }\n    if (choice.soulCost > 0) {\n      return \"bg-yellow-900/50 hover:bg-yellow-900/70 border-yellow-600/30\";\n    }\n    return \"bg-black/50 hover:bg-purple-500/20 border-purple-500/30\";\n  };\n\n  return (\n    <div className=\"lg:col-span-2\">\n      <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30 h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"border-b border-purple-500/30 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"font-fantasy text-xl font-semibold text-purple-300\">\n                {currentLocation?.name || (gameData.location || 'Unknown Location').split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\n              </h3>\n              <p className=\"text-sm text-purple-200\">\n                {gameData.currentSeason || 'Spring'} • Year {Math.floor((gameData.yearsPassed || 0) + character.age)} • {gameData.timeInfo}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-slate-400\">Turn</div>\n              <div className=\"font-bold text-lg\">{gameData.turn}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Narrative Display */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"narrative-text font-narrative text-base leading-relaxed\">\n            {/* Show choice outcome if waiting for user to continue */}\n            {gameData.lastChoiceResult && gameData.awaitingResponse && (\n              <div className=\"bg-gradient-to-r from-blue-900/50 to-purple-900/50 border border-purple-400/50 rounded-lg p-6 mb-6 animate-pulse\">\n                <h4 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3 flex items-center\">\n                  <Sparkles className=\"w-5 h-5 mr-2\" />\n                  What Happened\n                </h4>\n                <p className=\"text-purple-100 leading-relaxed mb-4\">{gameData.lastChoiceResult}</p>\n                <Button\n                  onClick={() => onChoice({ id: 'continue', text: 'Continue', description: '', soulCost: 0, sanityCost: 0, consequences: [], corruption: false })}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-2\"\n                >\n                  <SkipForward className=\"w-4 h-4 mr-2\" />\n                  Continue Your Story\n                </Button>\n              </div>\n            )}\n\n            {!gameData.awaitingResponse && (scenario.narrativeText || [scenario.description || \"\"]).map((paragraph, index) => (\n              <p\n                key={index}\n                className=\"mb-4\"\n                dangerouslySetInnerHTML={{\n                  __html: paragraph\n                    .replace(/\\*([^*]+)\\*/g, '<em>$1</em>')\n                    .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>')\n                }}\n              />\n            ))}\n\n            {!gameData.awaitingResponse && scenario.type === 'magical' && (\n              <div className=\"bg-black/50 border-l-4 border-purple-400 p-4 rounded-r-lg mb-6\">\n                <p className=\"font-semibold text-purple-300 mb-2\">Current Scenario:</p>\n                <p>{scenario.description || \"A magical event unfolds...\"}</p>\n              </div>\n            )}\n\n            {/* Special Event Indicators */}\n            {!gameData.awaitingResponse && (scenario.type === 'magical' || scenario.id.includes('artifact') || scenario.id.includes('mindreading') || scenario.id.includes('prophecy')) && (\n              <div className=\"bg-gradient-to-r from-yellow-900/30 to-red-900/30 border border-yellow-500/50 rounded-lg p-4 mb-6\">\n                <p className=\"font-semibold text-yellow-300 mb-2 flex items-center\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  {scenario.id.includes('artifact') && \"Rare Animus Artifact Discovery!\"}\n                  {scenario.id.includes('mindreading') && \"Mind Reading Event!\"}\n                  {scenario.id.includes('prophecy') && \"Prophetic Vision!\"}\n                  {scenario.type === 'magical' && !scenario.id.includes('artifact') && !scenario.id.includes('mindreading') && !scenario.id.includes('prophecy') && \"Magical Event!\"}\n                </p>\n                <p className=\"text-yellow-200 text-sm\">This is a rare special event that will have significant consequences for your dragon's journey.</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Choice Selection Area */}\n        <div className=\"border-t border-purple-500/30 p-6\">\n          {/* Don't show choices if awaiting response */}\n          {!gameData.awaitingResponse && (\n            <>\n              {character.isAIControlled ? (\n                <div className=\"bg-red-900/50 border border-red-500/50 rounded-lg p-4 mb-4\">\n                  <h4 className=\"font-fantasy text-lg font-semibold text-red-300 mb-2 flex items-center\">\n                    <Eye className=\"w-5 h-5 mr-2 animate-pulse\" />\n                    AI Controlling Your Dragon\n                  </h4>\n                  <p className=\"text-red-200 text-sm\">\n                    Your corrupted dragon is now under AI control. Watch as evil choices are made automatically...\n                  </p>\n                </div>\n              ) : (\n                <h4 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-4\">\n                  Choose your action:\n                </h4>\n              )}\n\n              <div className=\"space-y-3\">\n                {(scenario.choices || []).map((choice, index) => (\n                  <Button\n                    key={choice.id}\n                    variant=\"ghost\"\n                    className={`choice-button w-full text-left p-4 border transition-all duration-300 ${getChoiceButtonColor(choice, index)}`}\n                    onClick={() => onChoice(choice)}\n                    disabled={isProcessing || character.isAIControlled}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-semibold\">{choice.text}</p>\n                        {choice.description && (\n                          <p className=\"text-xs opacity-75 mt-1\">{choice.description}</p>\n                        )}\n                      </div>\n                      <div className=\"text-right text-xs flex flex-col items-end gap-1\">\n                        {choice.soulCost > 0 && (\n                          <span className=\"text-red-400\">-{choice.soulCost} Soul</span>\n                        )}\n                        {choice.sanityCost > 0 && (\n                          <span className=\"text-yellow-400\">-{choice.sanityCost} Sanity</span>\n                        )}\n                        {choice.corruption && (\n                          <span className=\"text-red-500 font-bold\">⚠ Corrupting</span>\n                        )}\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </>\n          )}\n\n          {/* Quick Actions Bar */}\n          {!character.isAIControlled && (\n            <div className=\"mt-6 pt-4 border-t border-purple-500/20\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {/* Animus Magic - Only for animus dragons */}\n              {character.isAnimus && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onShowMagic}\n                  className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                >\n                  <Wand2 className=\"w-4 h-4 mr-1\" />\n                  Animus Magic\n                </Button>\n              )}\n              \n              {/* Special Powers - Prophecy, Mind Reading, Future Sight */}\n              {(character.tribalPowers || []).some(power => power.toLowerCase().includes('prophecy') || power.toLowerCase().includes('future')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('prophecy')}\n                  className=\"border-blue-500/50 text-blue-400 hover:bg-blue-500/10\"\n                >\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  Prophecy\n                </Button>\n              )}\n              \n              {(character.tribalPowers || []).some(power => power.toLowerCase().includes('mind')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('mindreading')}\n                  className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n                >\n                  <Brain className=\"w-4 h-4 mr-1\" />\n                  Mind Reading\n                </Button>\n              )}\n              \n              {(character.specialPowers || []).some(power => power.toLowerCase().includes('foresight') || power.toLowerCase().includes('future')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('future')}\n                  className=\"border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/10\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-1\" />\n                  Future Sight\n                </Button>\n              )}\n              \n              {/* Tribal Powers */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onShowTribalPowers}\n                className=\"border-green-500/50 text-green-400 hover:bg-green-500/10\"\n              >\n                <Zap className=\"w-4 h-4 mr-1\" />\n                Tribal Powers\n              </Button>\n              \n              {/* Custom Action */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onCustomAction}\n                className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n              >\n                <Package className=\"w-4 h-4 mr-1\" />\n                Custom Action\n              </Button>\n              \n              {/* Location Migration */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowMigrationSystem(true)}\n                className=\"border-orange-500/50 text-orange-400 hover:bg-orange-500/10\"\n              >\n                <MapPin className=\"w-4 h-4 mr-1\" />\n                Travel\n              </Button>\n              \n              {/* Inventory Actions */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowGivingModal(true)}\n                className=\"border-pink-500/50 text-pink-400 hover:bg-pink-500/10\"\n                disabled={gameData.inventory.length === 0}\n              >\n                <Package className=\"w-4 h-4 mr-1\" />\n                Inventory\n              </Button>\n            </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Location Migration System Modal/Panel */}\n        {showMigrationSystem && (\n          <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-black/90 border border-purple-500/30 rounded-lg p-6 max-w-4xl max-h-[80vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-fantasy text-purple-300\">Location Migration</h2>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setShowMigrationSystem(false)}\n                  className=\"text-purple-400 hover:bg-purple-500/20\"\n                >\n                  ✕\n                </Button>\n              </div>\n              \n              <LocationMigrationSystem\n                character={character}\n                currentLocation={currentLocation}\n                gameData={gameData}\n                onMigrate={(destination) => {\n                  setShowMigrationSystem(false);\n                  if (onLocationMigration) {\n                    onLocationMigration(destination);\n                  }\n                }}\n              />\n            </div>\n          </div>\n        )}\n        \n        {/* Contextual Inventory Modal */}\n        {showGivingModal && (\n          <ContextualInventoryModal\n            isOpen={showGivingModal}\n            onClose={() => setShowGivingModal(false)}\n            character={character}\n            gameData={gameData}\n            scenarioContext={scenario.type}\n            onGiveItem={(itemId, npcName, result) => {\n              if (onGiveItem) {\n                onGiveItem(itemId, npcName, result);\n              }\n            }}\n            onInventoryAction={(action, itemId, result) => {\n              if (onInventoryAction) {\n                onInventoryAction(action, itemId, result);\n              }\n            }}\n          />\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15392},"client/src/components/magic-modal.tsx":{"content":"import { Character, MagicSpell, CustomSpell, InventoryItem } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wand2, Skull, Zap, Shield, Sparkles, Package } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { ENHANCED_MAGIC_SPELLS, calculateSpellSoulCost } from \"@/lib/enhanced-magic-system\";\n\ninterface MagicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  inventory: InventoryItem[];\n  onCastSpell: (spell: CustomSpell) => void;\n}\n\n\nexport default function MagicModal({ isOpen, onClose, character, inventory, onCastSpell }: MagicModalProps) {\n  const [activeTab, setActiveTab] = useState<\"predefined\" | \"custom\" | \"inventory\">(\"custom\");\n  const [customSpell, setCustomSpell] = useState({\n    targetObject: \"\",\n    enchantmentDescription: \"\",\n    spellType: \"enchantment\" as const\n  });\n  \n  const estimateSpellCost = () => {\n    if (!customSpell.targetObject || !customSpell.enchantmentDescription) return 0;\n    \n    const words = customSpell.enchantmentDescription.split(' ').length;\n    const complexity = words > 20 ? \"catastrophic\" : words > 10 ? \"complex\" : words > 5 ? \"moderate\" : \"simple\";\n    \n    const baseCost = {\n      simple: [1, 5],\n      moderate: [5, 15],\n      complex: [15, 30],\n      catastrophic: [30, 60]\n    }[complexity];\n    \n    const typeMultiplier = {\n      enchantment: 1,\n      healing: 0.8,\n      weather: 1.2,\n      combat: 1.1,\n      summoning: 1.3,\n      curse: 1.4\n    }[customSpell.spellType];\n    \n    return Math.floor(baseCost[1] * typeMultiplier);\n  };\n  \n  const handleCastCustomSpell = () => {\n    if (!customSpell.targetObject || !customSpell.enchantmentDescription) return;\n    \n    const spell: CustomSpell = {\n      id: `custom_${Date.now()}`,\n      targetObject: customSpell.targetObject,\n      enchantmentDescription: customSpell.enchantmentDescription,\n      estimatedSoulCost: estimateSpellCost(),\n      spellType: customSpell.spellType,\n      complexity: estimateSpellCost() > 30 ? \"catastrophic\" : estimateSpellCost() > 15 ? \"complex\" : estimateSpellCost() > 5 ? \"moderate\" : \"simple\",\n      turnCast: Date.now()\n    };\n    \n    onCastSpell(spell);\n    setCustomSpell({ targetObject: \"\", enchantmentDescription: \"\", spellType: \"enchantment\" });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'minor':\n        return 'border-green-500/30 bg-green-500/10';\n      case 'moderate':\n        return 'border-yellow-500/30 bg-yellow-500/10';\n      case 'major':\n        return 'border-orange-500/30 bg-orange-500/10';\n      case 'catastrophic':\n        return 'border-red-500/30 bg-red-500/10';\n      default:\n        return 'border-gray-500/30 bg-gray-500/10';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'minor':\n        return <Shield className=\"w-5 h-5\" />;\n      case 'moderate':\n        return <Zap className=\"w-5 h-5\" />;\n      case 'major':\n        return <Sparkles className=\"w-5 h-5\" />;\n      case 'catastrophic':\n        return <Skull className=\"w-5 h-5\" />;\n      default:\n        return <Wand2 className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getCorruptionInfo = () => {\n    const stage = character.soulCorruptionStage;\n    switch (stage) {\n      case 'Normal':\n        return { text: \"Full control\", color: \"text-green-400\" };\n      case 'Frayed':\n        return { text: \"Occasional dark thoughts\", color: \"text-yellow-400\" };\n      case 'Twisted':\n        return { text: \"Partial AI control\", color: \"text-orange-400\" };\n      case 'Broken':\n        return { text: \"Mostly corrupted\", color: \"text-red-400\" };\n    }\n  };\n\n  const corruptionInfo = getCorruptionInfo();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] bg-black/90 border-purple-500/50 text-slate-100 overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-2xl font-bold text-purple-300 flex items-center\">\n            <Wand2 className=\"mr-3\" />\n            Animus Magic Spells\n          </DialogTitle>\n          <DialogDescription className=\"text-purple-200\">\n            Understanding the cost of power. Each spell category represents increasing corruption to your soul.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-4 mb-6\">\n          <Button \n            variant={activeTab === \"custom\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"custom\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            Cast Custom Spell\n          </Button>\n          <Button \n            variant={activeTab === \"predefined\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"predefined\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Wand2 className=\"w-4 h-4\" />\n            Spell Examples\n          </Button>\n          <Button \n            variant={activeTab === \"inventory\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"inventory\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Package className=\"w-4 h-4\" />\n            Inventory ({inventory.length})\n          </Button>\n        </div>\n\n        {/* Custom Spell Casting */}\n        {activeTab === \"custom\" && (\n          <div className=\"space-y-6\">\n            <Card className=\"border-purple-500/30 bg-purple-500/10\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-300\">Create Your Own Animus Spell</CardTitle>\n                <DialogDescription className=\"text-purple-200\">\n                  Describe what object you want to enchant and what you want it to do. Be creative!\n                </DialogDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"target-object\" className=\"text-slate-300\">What do you want to enchant?</Label>\n                  <Input\n                    id=\"target-object\"\n                    placeholder=\"e.g., a sword, a ring, a cloak, the weather, an enemy...\"\n                    value={customSpell.targetObject}\n                    onChange={(e) => setCustomSpell({...customSpell, targetObject: e.target.value})}\n                    className=\"bg-black/50 border-purple-400/30 text-slate-100\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"enchantment\" className=\"text-slate-300\">Describe the enchantment:</Label>\n                  <Input\n                    id=\"enchantment\"\n                    placeholder=\"e.g., to cut through any material, to make me invisible, to summon lightning...\"\n                    value={customSpell.enchantmentDescription}\n                    onChange={(e) => setCustomSpell({...customSpell, enchantmentDescription: e.target.value})}\n                    className=\"bg-black/50 border-purple-400/30 text-slate-100\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"spell-type\" className=\"text-slate-300\">Spell Type:</Label>\n                  <Select value={customSpell.spellType} onValueChange={(value: any) => setCustomSpell({...customSpell, spellType: value})}>\n                    <SelectTrigger className=\"bg-black/50 border-purple-400/30 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"enchantment\">Enchantment</SelectItem>\n                      <SelectItem value=\"combat\">Combat</SelectItem>\n                      <SelectItem value=\"healing\">Healing</SelectItem>\n                      <SelectItem value=\"weather\">Weather</SelectItem>\n                      <SelectItem value=\"curse\">Curse</SelectItem>\n                      <SelectItem value=\"summoning\">Summoning</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"bg-black/30 p-4 rounded border border-yellow-400/30\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-yellow-300 font-semibold\">Estimated Soul Cost:</span>\n                    <span className=\"text-yellow-300 font-bold text-lg\">{estimateSpellCost()}%</span>\n                  </div>\n                  <p className=\"text-xs text-yellow-200\">\n                    More complex descriptions and dangerous spell types cost more soul.\n                  </p>\n                </div>\n                \n                <Button \n                  onClick={handleCastCustomSpell}\n                  disabled={!customSpell.targetObject || !customSpell.enchantmentDescription || character.soulPercentage < estimateSpellCost()}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Cast Spell ({estimateSpellCost()}% soul cost)\n                </Button>\n              </CardContent>\n            </Card>\n            \n            {/* Soul Status */}\n            <Card className=\"border-purple-500/30 bg-purple-500/10\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg text-purple-400\">\n                  <Skull />\n                  Your Soul Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-slate-300\">Current Purity:</span>\n                    <span className=\"font-bold\">{character.soulPercentage}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-slate-300\">Corruption Stage:</span>\n                    <span className={`font-semibold ${corruptionInfo.color}`}>\n                      {character.soulCorruptionStage}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-slate-400 mt-3 space-y-1\">\n                    <div>• Normal (75-100%): Full control over choices</div>\n                    <div>• Frayed (50-74%): Occasional dark thoughts</div>\n                    <div>• Twisted (25-49%): AI may override decisions</div>\n                    <div>• Broken (0-24%): Mostly AI controlled</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n        \n        {/* Predefined Spell Examples */}\n        {activeTab === \"predefined\" && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {ENHANCED_MAGIC_SPELLS.slice(0, 6).map((spell) => (\n              <Card key={spell.name} className={`${getCategoryColor(spell.category)} border`}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    {getCategoryIcon(spell.category)}\n                    {spell.name}\n                    <Badge\n                      variant=\"outline\"\n                      className={`ml-auto ${\n                        spell.category === 'minor'\n                          ? 'border-green-400 text-green-400'\n                          : spell.category === 'moderate'\n                          ? 'border-yellow-400 text-yellow-400'\n                          : spell.category === 'major'\n                          ? 'border-orange-400 text-orange-400'\n                          : 'border-red-400 text-red-400'\n                      }`}\n                    >\n                      {spell.soulCost[0]}-{spell.soulCost[1]}% soul\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-slate-300 mb-3\">{spell.description}</p>\n                  <ul className=\"text-sm space-y-1 text-slate-300\">\n                    {spell.examples.slice(0, 3).map((example, index) => (\n                      <li key={index}>• {example}</li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n        \n        {/* Inventory */}\n        {activeTab === \"inventory\" && (\n          <div className=\"space-y-4\">\n            {inventory.length === 0 ? (\n              <Card className=\"border-gray-500/30 bg-gray-500/10\">\n                <CardContent className=\"pt-6 text-center\">\n                  <Package className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-slate-300\">Your inventory is empty.</p>\n                  <p className=\"text-slate-400 text-sm\">Create enchanted objects to add them to your inventory.</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {inventory.map((item) => (\n                  <Card key={item.id} className=\"border-blue-500/30 bg-blue-500/10\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-2 text-lg text-blue-300\">\n                        <Package className=\"w-5 h-5\" />\n                        {item.name}\n                        <Badge variant=\"outline\" className=\"ml-auto border-blue-400 text-blue-400\">\n                          {item.type.replace('_', ' ')}\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-slate-300 mb-3\">{item.description}</p>\n                      {item.enchantments.length > 0 && (\n                        <div>\n                          <p className=\"text-xs text-blue-300 font-semibold mb-1\">Enchantments:</p>\n                          <ul className=\"text-xs space-y-1 text-slate-300\">\n                            {item.enchantments.map((enchantment, index) => (\n                              <li key={index}>• {enchantment}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      {item.soulCostToCreate && (\n                        <p className=\"text-xs text-slate-400 mt-2\">\n                          Soul cost to create: {item.soulCostToCreate}%\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"bg-black/50 border border-purple-400/30 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-purple-300 mb-2 flex items-center\">\n            <Skull className=\"w-4 h-4 mr-2\" />\n            Warning: The Price of Power\n          </h4>\n          <p className=\"text-sm text-purple-200\">\n            Every use of animus magic corrupts your soul. As your purity decreases, you will lose control\n            over your choices. The game will begin making increasingly dark decisions for you. At 0% purity,\n            you become a villain that others must stop.\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15914},"client/src/components/sanity-bar.tsx":{"content":"import { Progress } from \"@/components/ui/progress\";\nimport { Brain, AlertTriangle } from \"lucide-react\";\n\ninterface SanityBarProps {\n  sanityPercentage: number;\n  className?: string;\n}\n\nexport default function SanityBar({ sanityPercentage, className = \"\" }: SanityBarProps) {\n  const getSanityColor = (sanity: number) => {\n    if (sanity >= 70) return \"bg-blue-500\";\n    if (sanity >= 50) return \"bg-yellow-500\";\n    if (sanity >= 30) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getSanityLabel = (sanity: number) => {\n    if (sanity >= 70) return \"Stable\";\n    if (sanity >= 50) return \"Stressed\";\n    if (sanity >= 30) return \"Unstable\";\n    if (sanity >= 10) return \"Fragmented\";\n    return \"Breaking\";\n  };\n\n  const getSanityDescription = (sanity: number) => {\n    if (sanity >= 70) return \"Your mind is clear and focused.\";\n    if (sanity >= 50) return \"You feel the weight of knowledge and power.\";\n    if (sanity >= 30) return \"Reality seems less certain than before.\";\n    if (sanity >= 10) return \"You struggle to distinguish truth from delusion.\";\n    return \"Your grip on reality is slipping away.\";\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Brain className=\"w-4 h-4 text-blue-400\" />\n          <span className=\"text-sm font-medium text-purple-200\">\n            Sanity: {getSanityLabel(sanityPercentage)}\n          </span>\n        </div>\n        <span className=\"text-sm text-purple-300\">\n          {Math.round(sanityPercentage)}%\n        </span>\n      </div>\n      \n      <div className=\"relative\">\n        <Progress \n          value={sanityPercentage} \n          className=\"h-3 bg-purple-900/50\" \n        />\n        <div \n          className={`absolute top-0 left-0 h-3 rounded-full transition-all duration-300 ${getSanityColor(sanityPercentage)}`}\n          style={{ width: `${sanityPercentage}%` }}\n        />\n      </div>\n      \n      <p className=\"text-xs text-purple-300\">\n        {getSanityDescription(sanityPercentage)}\n      </p>\n      \n      {sanityPercentage <= 20 && (\n        <div className=\"flex items-center gap-2 text-red-400 text-xs\">\n          <AlertTriangle className=\"w-3 h-3\" />\n          <span>Warning: Mental breakdown imminent!</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2372},"client/src/components/tribal-powers-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { Zap, Eye, Flame, Droplets, Snowflake, Leaf, Moon, Sparkles } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TribalPowersModalProps {\n  character: Character;\n  currentScenario?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onUsePower: (power: string, scenario?: string) => void;\n}\n\nconst POWER_ICONS = {\n  \"Fire resistance\": Flame,\n  \"Mud camouflage\": Eye,\n  \"Enhanced strength when warm\": Zap,\n  \"Venomous tail barb\": Zap,\n  \"Desert survival\": Flame,\n  \"Heat resistance\": Flame,\n  \"Superior flight speed\": Sparkles,\n  \"Fire breathing\": Flame,\n  \"High altitude adaptation\": Sparkles,\n  \"Underwater breathing\": Droplets,\n  \"Bioluminescent scales\": Sparkles,\n  \"Deep sea pressure resistance\": Droplets,\n  \"Frost breath\": Snowflake,\n  \"Cold immunity\": Snowflake,\n  \"Serrated claws\": Zap,\n  \"Color-changing scales\": Sparkles,\n  \"Acidic venom\": Zap,\n  \"Prehensile tail\": Zap,\n  \"Future sight\": Moon,\n  \"Mind reading\": Eye,\n  \"Silk production\": Sparkles,\n  \"Metamorphosis\": Sparkles,\n  \"Enhanced agility\": Zap,\n  \"Paralytic stinger\": Zap,\n  \"Hive mind connection\": Eye,\n  \"Toxic breath\": Zap,\n  \"Plant manipulation\": Leaf,\n  \"Leaf speak\": Leaf,\n  \"Photosynthesis healing\": Leaf,\n};\n\nexport default function TribalPowersModal({ character, currentScenario, isOpen, onClose, onUsePower }: TribalPowersModalProps) {\n  const [selectedPower, setSelectedPower] = useState<string | null>(null);\n  const [powerScenarios, setPowerScenarios] = useState<string[]>([]);\n  const [aiResponse, setAiResponse] = useState<string | null>(null);\n\n  const allPowers = [...character.tribalPowers, ...character.specialPowers];\n\n  const getPowerIcon = (power: string) => {\n    const IconComponent = POWER_ICONS[power as keyof typeof POWER_ICONS];\n    return IconComponent ? <IconComponent className=\"w-4 h-4\" /> : <Zap className=\"w-4 h-4\" />;\n  };\n\n  const handlePowerSelect = (power: string) => {\n    setSelectedPower(power);\n    const powerType = determinePowerType(power);\n    const scenarios = MockAIService.generatePowerUsageOptions(powerType, { \n      turn: Math.floor(Math.random() * 100),\n      currentSituation: currentScenario || \"general situation\",\n      powerName: power\n    });\n    setPowerScenarios(scenarios);\n    setAiResponse(null);\n  };\n\n  const handleUsePowerWithScenario = (scenario: string) => {\n    const response = MockAIService.generateRandomEvent(character, { location: currentScenario });\n    setAiResponse(response.content);\n    onUsePower(selectedPower!, scenario);\n  };\n\n  const handleUseVisionPower = (power: string) => {\n    if (power.toLowerCase().includes('future') || power.toLowerCase().includes('prophecy')) {\n      const prophecy = MockAIService.generateProphecy(character, { turn: Math.random() * 100 });\n      setAiResponse(prophecy.content);\n    } else if (power.toLowerCase().includes('mind')) {\n      const vision = MockAIService.generateVision(character, { turn: Math.random() * 100 });\n      setAiResponse(vision.content);\n    }\n    onUsePower(power);\n  };\n\n  const determinePowerType = (power: string): string => {\n    const powerLower = power.toLowerCase();\n    if (powerLower.includes('fire') || powerLower.includes('flame') || powerLower.includes('breath')) return 'fire';\n    if (powerLower.includes('ice') || powerLower.includes('frost') || powerLower.includes('cold')) return 'ice';\n    if (powerLower.includes('water') || powerLower.includes('sea') || powerLower.includes('underwater')) return 'water';\n    if (powerLower.includes('earth') || powerLower.includes('mud')) return 'earth';\n    if (powerLower.includes('electric') || powerLower.includes('lightning')) return 'electricity';\n    if (powerLower.includes('mind')) return 'mind_reading';\n    if (powerLower.includes('future') || powerLower.includes('prophecy')) return 'prophecy';\n    if (powerLower.includes('camouflage') || powerLower.includes('color')) return 'camouflage';\n    return 'fire';\n  };\n\n  const resetModal = () => {\n    setSelectedPower(null);\n    setPowerScenarios([]);\n    setAiResponse(null);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) { resetModal(); onClose(); } }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-purple-100\">\n            {character.hybridTribes ? \"Hybrid\" : character.tribe} Powers & Abilities\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {!selectedPower ? (\n            <>\n              {/* Tribal Powers */}\n              {character.tribalPowers.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-purple-200 mb-3\">Tribal Powers</h3>\n                  <div className=\"space-y-3\">\n                    {character.tribalPowers.map((power, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-purple-900/30 rounded-lg\">\n                        <div className=\"flex items-center\">\n                          {getPowerIcon(power)}\n                          <span className=\"ml-3 font-medium text-purple-100\">{power}</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {(power.toLowerCase().includes('future') || power.toLowerCase().includes('mind') || power.toLowerCase().includes('prophecy')) && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleUseVisionPower(power)}\n                              className=\"bg-blue-600 hover:bg-blue-700\"\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              Vision\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handlePowerSelect(power)}\n                            className=\"bg-purple-600 hover:bg-purple-700\"\n                          >\n                            <Sparkles className=\"w-3 h-3 mr-1\" />\n                            Use\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Special Powers */}\n              {character.specialPowers.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-purple-200 mb-3\">Special Abilities</h3>\n                  <div className=\"space-y-3\">\n                    {character.specialPowers.map((power, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-blue-900/30 rounded-lg\">\n                        <div className=\"flex items-center\">\n                          {getPowerIcon(power)}\n                          <span className=\"ml-3 font-medium text-blue-100\">{power}</span>\n                          <Badge variant=\"outline\" className=\"ml-2 text-xs text-amber-400 border-amber-400\">\n                            Rare\n                          </Badge>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handlePowerSelect(power)}\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                        >\n                          <Sparkles className=\"w-3 h-3 mr-1\" />\n                          Use\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* No Powers */}\n              {allPowers.length === 0 && (\n                <div className=\"text-center py-8 text-purple-300\">\n                  <p>You have not yet manifested any special powers.</p>\n                  <p className=\"text-sm mt-2\">Powers may develop as you grow and face challenges.</p>\n                </div>\n              )}\n\n              {/* Animus Warning */}\n              {character.isAnimus && (\n                <div className=\"mt-6 p-4 bg-red-900/30 border border-red-700 rounded-lg\">\n                  <p className=\"text-red-200 text-sm\">\n                    <strong>Animus Warning:</strong> Your animus magic is far more powerful than these tribal abilities, \n                    but remember - every spell costs part of your soul.\n                  </p>\n                </div>\n              )}\n            </>\n          ) : (\n            /* Power Usage Scenarios */\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-semibold text-purple-300 flex items-center\">\n                  {getPowerIcon(selectedPower)}\n                  <span className=\"ml-2\">Using: {selectedPower}</span>\n                </h4>\n                <Button size=\"sm\" variant=\"ghost\" onClick={resetModal}>Back</Button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-slate-300\">Choose how you want to use this power:</p>\n                {powerScenarios.map((scenario, index) => (\n                  <div \n                    key={index} \n                    className=\"p-3 bg-black/30 rounded-lg border border-purple-500/30 hover:border-purple-400 cursor-pointer transition-colors\"\n                    onClick={() => handleUsePowerWithScenario(scenario)}\n                  >\n                    <p className=\"text-sm text-slate-200\">{scenario}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* AI Response */}\n          {aiResponse && (\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-900/50 to-blue-900/50 rounded-lg border border-purple-500/30\">\n              <div className=\"flex items-center mb-2\">\n                <Sparkles className=\"w-4 h-4 text-purple-400 mr-2\" />\n                <h4 className=\"font-semibold text-purple-300\">Mystical Vision</h4>\n              </div>\n              <p className=\"text-sm text-slate-200 italic\">{aiResponse}</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={() => { resetModal(); onClose(); }} variant=\"outline\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10737},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/ai-dungeon-master.ts":{"content":"import { Character, GameData, Scenario, Choice, PoliticalEvent, WarStatus, ExplorationEvent, InventoryItem } from \"@shared/schema\";\n\nexport class AIDungeonMaster {\n  // Comprehensive animus filtering utility\n  static filterAnimusContent(text: string, character: Character): string {\n    if (character.isAnimus) return text;\n    \n    // Replace animus-specific references with alternatives\n    return text\n      .replace(/animus magic/gi, \"natural abilities\")\n      .replace(/animus power/gi, \"special abilities\")\n      .replace(/soul cost/gi, \"energy cost\")\n      .replace(/soul corruption/gi, \"mental strain\")\n      .replace(/enchant/gi, \"enhance\")\n      .replace(/magical manipulation/gi, \"natural influence\")\n      .replace(/force.*with.*magic/gi, \"use persuasion\");\n  }\n\n  // Dynamic scenario generation categories - increased romance frequency\n  private static scenarioTypes = [\n    \"moral_dilemma\", \"random_disaster\", \"tribal_politics\", \"romance_encounter\", \n    \"exploration_discovery\", \"animus_temptation\", \"war_conflict\", \"social_interaction\",\n    \"mystery_event\", \"magical_phenomenon\", \"family_drama\", \"prophecy_vision\",\n    \"romance_encounter\", \"social_interaction\" // Extra romance and social scenarios\n  ];\n\n  private static randomElements = {\n    locations: [\n      \"Jade Mountain Academy\", \"Queen's Palace\", \"Ancient Ruins\", \"Tribal Border\",\n      \"Mysterious Cave\", \"Sacred Grove\", \"War Camp\", \"Peaceful Village\",\n      \"Abandoned Castle\", \"Underground Tunnels\", \"Mountain Peak\", \"Desert Oasis\"\n    ],\n    weather: [\n      \"thunderstorm brewing\", \"eerily calm\", \"swirling mists\", \"blazing hot\",\n      \"freezing cold\", \"perfect clear skies\", \"strange aurora\", \"unnatural darkness\"\n    ],\n    timeOfDay: [\n      \"dawn breaking\", \"high noon\", \"sunset\", \"midnight\", \"pre-dawn\", \"twilight\"\n    ],\n    characters: [\n      \"mysterious stranger\", \"old prophecy keeper\", \"young dragonet\", \"tribal leader\",\n      \"wounded warrior\", \"wise elder\", \"suspicious merchant\", \"lost traveler\"\n    ],\n    objects: [\n      \"glowing scroll\", \"ancient artifact\", \"magical gem\", \"cursed weapon\",\n      \"prophetic mirror\", \"talking statue\", \"enchanted book\", \"mysterious egg\"\n    ]\n  };\n\n  static generateRandomScenario(character: Character, gameData: GameData): Scenario {\n    // Filter scenario types based on character abilities\n    let availableScenarios = this.scenarioTypes.filter(type => {\n      // Don't show animus scenarios to non-animus dragons\n      if (type === \"animus_temptation\" && !character.isAnimus) {\n        return false;\n      }\n      return true;\n    });\n\n    const scenarioType = availableScenarios[Math.floor(Math.random() * availableScenarios.length)];\n    \n    switch (scenarioType) {\n      case \"moral_dilemma\":\n        return this.generateMoralDilemma(character, gameData);\n      case \"random_disaster\":\n        return this.generateRandomDisaster(character, gameData);\n      case \"tribal_politics\":\n        return this.generateTribalPoliticsScenario(character, gameData);\n      case \"romance_encounter\":\n        return this.generateRomanceEncounter(character, gameData);\n      case \"exploration_discovery\":\n        return this.generateExplorationScenario(character, gameData);\n      case \"animus_temptation\":\n        return this.generateAnimusTemptationScenario(character, gameData);\n      case \"war_conflict\":\n        return this.generateWarScenario(character, gameData);\n      case \"social_interaction\":\n        return this.generateSocialScenario(character, gameData);\n      case \"mystery_event\":\n        return this.generateMysteryScenario(character, gameData);\n      case \"magical_phenomenon\":\n        return this.generateMagicalPhenomenon(character, gameData);\n      case \"family_drama\":\n        return this.generateFamilyDrama(character, gameData);\n      case \"prophecy_vision\":\n        return this.generateProphecyVision(character, gameData);\n      default:\n        return this.generateMoralDilemma(character, gameData);\n    }\n  }\n\n  private static getRandomElement(array: string[]): string {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n  static generateMoralDilemma(character: Character, gameData: GameData): Scenario {\n    // Generate dynamic moral dilemma\n    const victim = this.getRandomElement([\"young dragonet\", \"injured elder\", \"pregnant dragon\", \"enemy soldier\", \"tribal outcast\"]);\n    const threat = this.getRandomElement([\"rockslide\", \"disease\", \"curse\", \"war wound\", \"magical poison\"]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    // Generate different solutions based on whether character is animus or not\n    const magicSolution = character.isAnimus ? this.getRandomElement([\n      \"heal them instantly with animus magic\",\n      \"enchant an object to save them\",\n      \"use magic to turn back time\",\n      \"transfer their suffering to yourself\",\n      \"create a magical barrier\"\n    ]) : this.getRandomElement([\n      \"use your tribal powers to help\",\n      \"attempt magical healing with tribal abilities\",\n      \"try to channel natural magic\",\n      \"use elemental powers to assist\",\n      \"rely on instinctual magical abilities\"\n    ]);\n    \n    const nonMagicSolution = this.getRandomElement([\n      \"try conventional healing methods\",\n      \"seek help from other dragons\",\n      \"use your tribal powers instead\",\n      \"find a natural remedy\",\n      \"attempt a risky rescue\"\n    ]);\n    \n    const moralChoice = this.getRandomElement([\n      \"leave them to their fate\",\n      \"make them prove they deserve help\",\n      \"demand payment for your aid\",\n      \"use this as a learning experience\",\n      \"find a creative compromise\"\n    ]);\n\n    const dilemmas = [\n      {\n        title: `Crisis at ${location}`,\n        setup: `During a ${weather} day at ${location}, you encounter a ${victim} suffering from ${threat}. They desperately plead for your help, but the situation is complex and morally challenging.`,\n        choice1: magicSolution,\n        choice2: nonMagicSolution,\n        choice3: moralChoice\n      }\n    ];\n\n    const dilemma = dilemmas[0]; // Use the dynamically generated dilemma\n    \n    return {\n      id: `ai_dilemma_${Date.now()}`,\n      title: dilemma.title,\n      description: \"A moral choice that will test your character\",\n      narrativeText: [dilemma.setup],\n      choices: [\n        {\n          id: \"dilemma_1\",\n          text: character.isAnimus ? dilemma.choice1 + \" (10-25% soul cost)\" : dilemma.choice1,\n          description: character.isAnimus ? \"The path of power, but at what cost?\" : \"Use your natural abilities to help\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 10 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5),\n          consequences: [\"Your choice will have lasting consequences...\"],\n          corruption: false\n        },\n        {\n          id: \"dilemma_2\", \n          text: dilemma.choice2,\n          description: \"The harder path, but perhaps the right one\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5),\n          consequences: [\"Sometimes the right choice is the hardest one...\"]\n        },\n        {\n          id: \"dilemma_3\",\n          text: dilemma.choice3,\n          description: \"A middle ground, but is it enough?\",\n          soulCost: dilemma.choice3.includes(\"enchant\") ? Math.floor(Math.random() * 8) + 3 : 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Compromise can be wisdom, or cowardice...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"afternoon\",\n      weather: \"tense\"\n    };\n  }\n\n  static generateRandomDisaster(character: Character, gameData: GameData): Scenario {\n    // Generate dynamic disaster\n    const disasterType = this.getRandomElement([\"tribal raid\", \"natural disaster\", \"magical catastrophe\", \"disease outbreak\", \"beast attack\"]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    const tribe = this.getRandomElement([\"IceWings\", \"SkyWings\", \"SandWings\", \"SeaWings\", \"MudWings\"]);\n    \n    let title, description, magicResponse, physicalResponse, escapeResponse;\n    \n    switch (disasterType) {\n      case \"tribal raid\":\n        title = `${tribe} Raid on ${location}`;\n        description = `During ${weather} conditions, ${tribe} warriors launch a surprise attack on ${location}!`;\n        magicResponse = \"Use animus magic to create powerful defenses\";\n        physicalResponse = \"Fight them with traditional combat skills\";\n        escapeResponse = \"Try to negotiate or find an escape route\";\n        break;\n      case \"natural disaster\":\n        const disaster = this.getRandomElement([\"earthquake\", \"volcanic eruption\", \"tsunami\", \"avalanche\", \"hurricane\"]);\n        title = `${disaster.charAt(0).toUpperCase() + disaster.slice(1)} at ${location}`;\n        description = `A devastating ${disaster} strikes ${location} during ${weather} conditions!`;\n        magicResponse = \"Use magic to control or stop the disaster\";\n        physicalResponse = \"Help rescue and evacuate other dragons\";\n        escapeResponse = \"Focus on protecting yourself and escape\";\n        break;\n      default:\n        title = \"Mysterious Crisis\";\n        description = `An unknown threat emerges at ${location} during ${weather} conditions.`;\n        magicResponse = \"Use animus magic to investigate and respond\";\n        physicalResponse = \"Approach the situation cautiously\";\n        escapeResponse = \"Avoid the situation entirely\";\n    }\n\n    const disasters = [\n      {\n        title,\n        description,\n        choice1: magicResponse,\n        choice2: physicalResponse,\n        choice3: escapeResponse\n      }\n    ];\n\n    const disaster = disasters[0]; // Use the dynamically generated disaster\n\n    return {\n      id: `ai_disaster_${Date.now()}`,\n      title: disaster.title,\n      description: \"A sudden crisis tests your resolve\",\n      narrativeText: [\n        disaster.description,\n        \"The situation is dire and demands immediate action. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"disaster_1\",\n          text: disaster.choice1,\n          description: \"Take direct action\",\n          soulCost: disaster.choice1.includes(\"magic\") ? Math.floor(Math.random() * 12) + 5 : 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Your brave action will be remembered...\"]\n        },\n        {\n          id: \"disaster_2\",\n          text: disaster.choice2, \n          description: \"Help others without magic\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes the hardest path is the most noble...\"]\n        },\n        {\n          id: \"disaster_3\",\n          text: disaster.choice3,\n          description: \"Look out for yourself\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Self-preservation, but at what cost to your conscience?\"],\n          corruption: true\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"crisis\",\n      weather: \"chaotic\"\n    };\n  }\n\n  static generatePersonalConsequence(character: Character): string[] {\n    const stage = character.soulCorruptionStage;\n    const consequences = [];\n\n    switch (stage) {\n      case \"Frayed\":\n        consequences.push(\"Your soul corruption manifests as sudden mood swings.\");\n        consequences.push(\"You snap at a friend without meaning to.\");\n        consequences.push(\"Other dragons notice you seem... different lately.\");\n        break;\n      case \"Twisted\":\n        consequences.push(\"The corruption darkens your thoughts constantly.\");\n        consequences.push(\"You find yourself enjoying others' misfortune.\");\n        consequences.push(\"Your friends begin to distance themselves from you.\");\n        break;\n      case \"Broken\":\n        consequences.push(\"Your soul is so damaged that cruelty feels natural.\");\n        consequences.push(\"You actively seek ways to cause pain or gain power.\");\n        consequences.push(\"The dragon you once were seems like a distant memory.\");\n        break;\n      default:\n        consequences.push(\"You maintain your moral compass for now.\");\n    }\n\n    return consequences;\n  }\n\n  static generateTribePolitics(character: Character): PoliticalEvent {\n    const politicalEvents = [\n      {\n        type: \"succession\" as const,\n        tribes: [character.tribe],\n        description: `The current ${character.tribe} queen is aging, and two of her daughters vie for the throne. Both seek your support.`,\n        consequences: \"Your choice of successor will shape your tribe's future.\"\n      },\n      {\n        type: \"civil_war\" as const,\n        tribes: [character.tribe],\n        description: `A faction within the ${character.tribe} tribe rebels against the queen's leadership, claiming she has grown weak.`,\n        consequences: \"Civil war threatens to tear your tribe apart.\"\n      },\n      {\n        type: \"queen_demand\" as const,\n        tribes: [character.tribe],\n        description: `Queen ${character.tribe === \"SandWing\" ? \"Thorn\" : \"Glacier\"} demands you use your animus magic to create a powerful artifact for the royal treasury.`,\n        consequences: \"Defying a queen's direct order carries severe penalties.\"\n      }\n    ];\n\n    return politicalEvents[Math.floor(Math.random() * politicalEvents.length)];\n  }\n\n  static generateWarEvent(character: Character): WarStatus {\n    const possibleEnemies = [\"SkyWings\", \"IceWings\", \"SandWings\", \"MudWings\"];\n    const enemy = possibleEnemies[Math.floor(Math.random() * possibleEnemies.length)];\n    \n    return {\n      isAtWar: true,\n      warringTribes: [character.tribe, enemy],\n      warCause: Math.random() < 0.5 ? \"territorial dispute\" : \"succession conflict\",\n      playerInvolvement: \"forced_fighter\"\n    };\n  }\n\n  static generateExploration(character: Character): ExplorationEvent {\n    const locations = [\n      \"Ancient NightWing ruins\",\n      \"Abandoned SkyWing palace\",\n      \"Deep underwater caves\",\n      \"Hidden RainWing sanctuary\",\n      \"Mysterious ice caverns\"\n    ];\n\n    const discoveries = [\n      { type: \"ruins\" as const, desc: \"You discover ancient dragon artifacts and mysterious carvings.\" },\n      { type: \"scroll\" as const, desc: \"A weathered scroll contains forgotten animus spells.\" },\n      { type: \"treasure\" as const, desc: \"A cache of precious gems and ancient coins.\" },\n      { type: \"enemy\" as const, desc: \"Hostile dragons have made this place their lair.\" },\n      { type: \"ally\" as const, desc: \"A lost dragon seeks your help to return home.\" }\n    ];\n\n    const location = locations[Math.floor(Math.random() * locations.length)];\n    const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];\n\n    return {\n      location,\n      discovery: discovery.type,\n      description: discovery.desc,\n      consequences: [`Your discovery at ${location} will have lasting effects.`]\n    };\n  }\n\n  static generateAnimusTemptation(character: Character): Choice {\n    const temptations = [\n      {\n        text: \"Enchant this ring to make everyone love you\",\n        soulCost: 15,\n        desc: \"The easy path to popularity... but is it real?\"\n      },\n      {\n        text: \"Create a spell to eliminate all your enemies\",\n        soulCost: 25,\n        desc: \"Power to remove obstacles... permanently.\"\n      },\n      {\n        text: \"Enchant yourself to never feel pain or sadness again\",\n        soulCost: 20,\n        desc: \"Emotional numbness might seem like peace.\"\n      }\n    ];\n\n    const temptation = temptations[Math.floor(Math.random() * temptations.length)];\n\n    return {\n      id: \"ai_temptation\",\n      text: temptation.text,\n      description: temptation.desc,\n      soulCost: temptation.soulCost,\n      sanityCost: 0,\n      consequences: [\"The easy path often leads to darkness...\"],\n      corruption: true\n    };\n  }\n\n  static generateTribalPoliticsScenario(character: Character, gameData: GameData): Scenario {\n    const politicalEvent = this.generateTribePolitics(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    return {\n      id: `political_${Date.now()}`,\n      title: `${politicalEvent.type.replace('_', ' ').toUpperCase()}: ${politicalEvent.tribes.join(' vs ')}`,\n      description: \"Political turmoil threatens the stability of your tribe\",\n      narrativeText: [\n        `At ${location} during ${weather} conditions...`,\n        politicalEvent.description,\n        character.isAnimus ? \"Your position as an animus dragon makes you valuable to all sides.\" : \"Your unique abilities make you valuable to all sides.\",\n        \"How will you navigate these treacherous political waters?\"\n      ],\n      choices: [\n        {\n          id: \"political_support\",\n          text: \"Support the traditional power structure\",\n          description: \"Stand with established authority\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Your loyalty is noted by those in power...\"]\n        },\n        {\n          id: \"political_rebel\",\n          text: \"Support the rebels/challengers\",\n          description: \"Side with those seeking change\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5),\n          consequences: [\"Revolution comes with risks...\"]\n        },\n        {\n          id: \"political_neutral\",\n          text: \"Remain neutral and protect yourself\",\n          description: \"Stay out of the conflict\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Neutrality may be seen as cowardice...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"political crisis\",\n      weather: \"tense\"\n    };\n  }\n\n  static generateRomanceEncounter(character: Character, gameData: GameData): Scenario {\n    const potentialPartner = this.getRandomElement(this.randomElements.characters);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    const romanticSituations = [\n      \"approaches you with obvious romantic interest\",\n      \"asks you to be their mate during a tribal ceremony\",\n      \"confesses their feelings under the stars\",\n      \"challenges you to prove your worthiness as a partner\",\n      \"offers to share a nest with you\"\n    ];\n    \n    const situation = this.getRandomElement(romanticSituations);\n    \n    return {\n      id: `romance_${Date.now()}`,\n      title: \"Matters of the Heart\",\n      description: \"Romance blooms in unexpected places\",\n      narrativeText: [\n        `At ${location} during ${weather} conditions, a ${potentialPartner} ${situation}.`,\n        \"Your heart races as you consider how to respond.\",\n        \"This could be the beginning of something beautiful... or complicated.\"\n      ],\n      choices: [\n        {\n          id: \"romance_accept\",\n          text: \"Accept their romantic advances\",\n          description: \"Open your heart to love\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Love can bring great joy... and great vulnerability\"]\n        },\n        {\n          id: \"romance_cautious\",\n          text: \"Be cautious but interested\",\n          description: \"Take things slowly\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"A careful approach to matters of the heart\"]\n        },\n        {\n          id: \"romance_reject\",\n          text: \"Politely decline their advances\",\n          description: \"Focus on other priorities\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes the heart must wait for duty\"]\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather\n    };\n  }\n\n  static generateExplorationScenario(character: Character, gameData: GameData): Scenario {\n    const exploration = this.generateExploration(character);\n    const mysteriousObject = this.getRandomElement(this.randomElements.objects);\n    \n    return {\n      id: `exploration_${Date.now()}`,\n      title: `Discovery at ${exploration.location}`,\n      description: \"Adventure calls from unknown places\",\n      narrativeText: [\n        `While exploring ${exploration.location}, you make an unexpected discovery:`,\n        exploration.description,\n        `Among the findings, you notice a ${mysteriousObject} that seems important.`,\n        \"What do you do with this discovery?\"\n      ],\n      choices: [\n        {\n          id: \"explore_investigate\",\n          text: `Investigate the ${mysteriousObject} thoroughly`,\n          description: \"Knowledge is power, but can be dangerous\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Curiosity reveals both wonders and dangers...\"]\n        },\n        {\n          id: \"explore_magic\",\n          text: character.isAnimus ? \"Use animus magic to understand the discovery\" : \"Use your natural abilities to understand the discovery\",\n          description: character.isAnimus ? \"Magic can reveal hidden secrets\" : \"Your abilities can reveal hidden secrets\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 8) + 3 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5) + 1,\n          consequences: [\"Deeper understanding reveals truths that some would keep hidden...\"]\n        },\n        {\n          id: \"explore_leave\",\n          text: \"Leave the area undisturbed\",\n          description: \"Some things are better left alone\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Wisdom sometimes lies in restraint...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: exploration.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateAnimusTemptationScenario(character: Character, gameData: GameData): Scenario {\n    const temptation = this.generateAnimusTemptation(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `temptation_${Date.now()}`,\n      title: \"The Whisper of Power\",\n      description: \"Easy solutions call to your animus magic\",\n      narrativeText: [\n        `At ${location}, you face a situation where animus magic offers an easy solution.`,\n        \"A voice in your mind suggests a simple spell that would solve everything.\",\n        `You could ${temptation.text.toLowerCase()}, but at what cost?`\n      ],\n      choices: [\n        {\n          id: \"temptation_give_in\",\n          text: temptation.text,\n          description: temptation.description,\n          soulCost: temptation.soulCost,\n          sanityCost: 0,\n          consequences: temptation.consequences,\n          corruption: temptation.corruption\n        },\n        {\n          id: \"temptation_resist\",\n          text: \"Resist the temptation\",\n          description: \"Find a harder but more ethical solution\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Virtue is its own reward, though the path is harder...\"]\n        },\n        {\n          id: \"temptation_compromise\",\n          text: \"Find a middle ground\",\n          description: \"Use minimal magic for a partial solution\",\n          soulCost: Math.floor(temptation.soulCost / 2),\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes compromise serves both ethics and necessity...\"]\n        }\n      ],\n      type: 'magical',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateWarScenario(character: Character, gameData: GameData): Scenario {\n    const warEvent = this.generateWarEvent(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `war_${Date.now()}`,\n      title: `War Between ${warEvent.warringTribes.join(' and ')}`,\n      description: \"Conflict engulfs the dragon lands\",\n      narrativeText: [\n        `War has broken out between ${warEvent.warringTribes.join(' and ')} over ${warEvent.warCause}.`,\n        `The battle has reached ${location}, and you find yourself caught in the middle.`,\n        character.isAnimus ? \"As an animus dragon, both sides want you as an ally. What do you do?\" : \"Both sides want you as an ally. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"war_join\",\n          text: `Join the ${character.tribe} forces`,\n          description: \"Fight for your tribe's cause\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"War changes everyone it touches...\"]\n        },\n        {\n          id: \"war_magic\",\n          text: character.isAnimus ? \"Use animus magic to end the conflict\" : \"Use your abilities to mediate the conflict\",\n          description: character.isAnimus ? \"Force peace through magical means\" : \"Try to find a peaceful solution\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 10 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Peace through force may not be true peace...\"]\n        },\n        {\n          id: \"war_flee\",\n          text: \"Flee from the conflict\",\n          description: \"Avoid the war entirely\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Some call it cowardice, others call it wisdom...\"],\n          corruption: true\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"battlefield\",\n      weather: \"smoke and fire\"\n    };\n  }\n\n  static generateSocialScenario(character: Character, gameData: GameData): Scenario {\n    const socialSituation = this.getRandomElement([\n      \"tribal gathering\", \"celebration feast\", \"formal ceremony\", \"casual meeting\", \"heated argument\"\n    ]);\n    const otherDragon = this.getRandomElement(this.randomElements.characters);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `social_${Date.now()}`,\n      title: `${socialSituation} at ${location}`,\n      description: \"Social dynamics shape your reputation\",\n      narrativeText: [\n        `During a ${socialSituation} at ${location}, you encounter a ${otherDragon}.`,\n        \"The interaction could strengthen or damage your social standing.\",\n        \"How do you handle this social situation?\"\n      ],\n      choices: [\n        {\n          id: \"social_charm\",\n          text: \"Use your natural charisma\",\n          description: \"Rely on social skills\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Genuine charm opens many doors...\"]\n        },\n        {\n          id: \"social_magic\",\n          text: character.isAnimus ? \"Subtly use animus magic to influence them\" : \"Use your natural abilities to connect with them\",\n          description: character.isAnimus ? \"Magical manipulation\" : \"Natural empathy and understanding\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 5) + 2 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 2),\n          consequences: character.isAnimus ? [\"False friendship built on magic is hollow...\"] : [\"Genuine connection builds lasting relationships...\"],\n          corruption: character.isAnimus ? true : false\n        },\n        {\n          id: \"social_honest\",\n          text: \"Be completely honest and direct\",\n          description: \"Straightforward approach\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Honesty is not always appreciated, but it is always valuable...\"]\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateMysteryScenario(character: Character, gameData: GameData): Scenario {\n    const mysteriousEvent = this.getRandomElement([\n      \"strange lights in the sky\", \"mysterious disappearances\", \"unexplained sounds\", \"time distortions\", \"reality glitches\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const mysteriousObject = this.getRandomElement(this.randomElements.objects);\n    \n    return {\n      id: `mystery_${Date.now()}`,\n      title: `The Mystery of ${location}`,\n      description: \"Strange occurrences defy explanation\",\n      narrativeText: [\n        `At ${location}, you witness ${mysteriousEvent}.`,\n        `Near the phenomenon, you discover a ${mysteriousObject} that seems connected to the mystery.`,\n        \"The situation defies logical explanation. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"mystery_investigate\",\n          text: \"Investigate the mystery thoroughly\",\n          description: \"Seek the truth behind the phenomenon\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 4) + 1,\n          consequences: [\"Some mysteries are better left unsolved...\"]\n        },\n        {\n          id: \"mystery_magic\",\n          text: \"Use animus magic to understand the phenomenon\",\n          description: \"Magical investigation\",\n          soulCost: Math.floor(Math.random() * 10) + 5,\n          sanityCost: 0,\n          consequences: [\"Magic reveals truths that mortal minds cannot grasp...\"]\n        },\n        {\n          id: \"mystery_avoid\",\n          text: \"Avoid the area and warn others\",\n          description: \"Prudent caution\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Sometimes wisdom lies in knowing when to walk away...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: \"unnaturally still\"\n    };\n  }\n\n  static generateMagicalPhenomenon(character: Character, gameData: GameData): Scenario {\n    const phenomenon = this.getRandomElement([\n      \"magic storm\", \"reality rift\", \"temporal anomaly\", \"dimensional portal\", \"magical plague\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `magical_${Date.now()}`,\n      title: `${phenomenon} at ${location}`,\n      description: \"Magical forces beyond comprehension\",\n      narrativeText: [\n        `A ${phenomenon} has manifested at ${location}.`,\n        \"The magical energies are chaotic and dangerous.\",\n        character.isAnimus ? \"As an animus dragon, you can sense the power involved. What do you do?\" : \"You can sense something powerful and dangerous here. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"phenomenon_absorb\",\n          text: character.isAnimus ? \"Try to absorb the magical energy\" : \"Try to resist the magical influence\",\n          description: character.isAnimus ? \"Risky but potentially powerful\" : \"Protect yourself from the dangerous energy\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 20) + 5 : 0,\n          sanityCost: Math.floor(Math.random() * 10) + 5,\n          consequences: [\"Power always comes with a price...\"]\n        },\n        {\n          id: \"phenomenon_dispel\",\n          text: character.isAnimus ? \"Use animus magic to dispel the phenomenon\" : \"Use your tribal powers to counter the phenomenon\",\n          description: \"Attempt to restore normalcy\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 8 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 8) + 2,\n          consequences: [\"Sometimes the cure is worse than the disease...\"]\n        },\n        {\n          id: \"phenomenon_study\",\n          text: \"Study the phenomenon from a safe distance\",\n          description: \"Cautious observation\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Knowledge gained safely is knowledge kept...\"]\n        }\n      ],\n      type: 'magical',\n      location: gameData.location,\n      timeOfDay: \"time seems irrelevant\",\n      weather: \"reality flickers\"\n    };\n  }\n\n  static generateFamilyDrama(character: Character, gameData: GameData): Scenario {\n    const familyMember = this.getRandomElement([\n      \"your mother\", \"your father\", \"a sibling\", \"your mate\", \"a dragonet\"\n    ]);\n    const drama = this.getRandomElement([\n      \"reveals a dark secret\", \"asks for a dangerous favor\", \"betrays your trust\", \"falls gravely ill\", \"gets into serious trouble\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `family_${Date.now()}`,\n      title: \"Family Bonds Tested\",\n      description: \"Blood ties bring both joy and sorrow\",\n      narrativeText: [\n        `At ${location}, ${familyMember} ${drama}.`,\n        \"The situation tests the bonds of family loyalty.\",\n        \"Your response will define your relationship forever.\"\n      ],\n      choices: [\n        {\n          id: \"family_support\",\n          text: \"Support your family member unconditionally\",\n          description: \"Family comes first\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Family loyalty is both a strength and a burden...\"]\n        },\n        {\n          id: \"family_magic\",\n          text: \"Use animus magic to help them\",\n          description: \"Magical intervention\",\n          soulCost: Math.floor(Math.random() * 12) + 5,\n          sanityCost: 0,\n          consequences: [\"Magic can heal wounds but creates new ones...\"]\n        },\n        {\n          id: \"family_distance\",\n          text: \"Distance yourself from the situation\",\n          description: \"Protect yourself first\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Sometimes love means letting go...\"],\n          corruption: true\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateProphecyVision(character: Character, gameData: GameData): Scenario {\n    const prophecySubject = this.getRandomElement([\n      \"the fall of a great queen\", \"a war that will consume all tribes\", \"your own dark future\", \n      \"the birth of a legendary dragon\", \"the end of animus magic\", \"a great catastrophe\"\n    ]);\n    const visionTrigger = this.getRandomElement([\n      \"a mysterious dream\", \"touching an ancient artifact\", \"a sudden flash of insight\", \n      \"a magical accident\", \"communion with spirits\"\n    ]);\n    \n    return {\n      id: `prophecy_${Date.now()}`,\n      title: \"Visions of Tomorrow\",\n      description: \"The future reveals itself in fragments\",\n      narrativeText: [\n        `Through ${visionTrigger}, you receive a prophetic vision about ${prophecySubject}.`,\n        \"The vision is vivid and disturbing, showing events that may come to pass.\",\n        \"What do you do with this glimpse into the future?\"\n      ],\n      choices: [\n        {\n          id: \"prophecy_act\",\n          text: \"Act immediately to change the future\",\n          description: \"Try to prevent or fulfill the prophecy\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Changing fate often leads to unexpected consequences...\"]\n        },\n        {\n          id: \"prophecy_magic\",\n          text: character.isAnimus ? \"Use animus magic to explore the vision further\" : \"Use your intuition to understand the vision\",\n          description: character.isAnimus ? \"Seek more details about the prophecy\" : \"Trust your natural instincts about the vision\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 8) + 4 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Some knowledge comes at too high a price...\"]\n        },\n        {\n          id: \"prophecy_ignore\",\n          text: \"Ignore the vision and focus on the present\",\n          description: \"Live in the moment\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"The future will unfold as it will, regardless of prophecy...\"]\n        }\n      ],\n      type: 'prophetic',\n      location: gameData.location,\n      timeOfDay: \"vision time\",\n      weather: \"ethereal\"\n    };\n  }\n}","size_bytes":37127},"client/src/lib/character-generator.ts":{"content":"import { Character } from \"@shared/schema\";\nimport { generateHybridDragon } from \"./hybrid-generator\";\nimport { SoulCorruptionManager } from \"./enhanced-magic-system\";\nimport { MockAIService } from \"./mock-ai-service\";\n\nconst TRIBES = [\n  'NightWing', 'SkyWing', 'SeaWing', 'RainWing', 'SandWing', 'IceWing', 'MudWing',\n  'SilkWing', 'HiveWing', 'LeafWing'\n];\n\nconst DRAGON_NAMES = {\n  NightWing: ['Nightshade', 'Shadowhunter', 'Starweaver', 'Darkflame', 'Moonwhisper', 'Voidwing', 'Obsidian'],\n  SkyWing: ['Scarlet', 'Ember', 'Phoenix', 'Crimson', 'Blaze', 'Pyrite', 'Flame'],\n  SeaWing: ['Tsunami', 'Coral', 'Anemone', 'Riptide', 'Pearl', 'Current', 'Nautilus'],\n  RainWing: ['Glory', 'Kinkajou', 'Bromeliad', 'Tamarin', 'Orchid', 'Coconut', 'Mango'],\n  SandWing: ['Sunny', 'Thorn', 'Qibli', 'Ostrich', 'Jackal', 'Camel', 'Fennec'],\n  IceWing: ['Winter', 'Lynx', 'Snowfall', 'Hailstorm', 'Icicle', 'Frost', 'Arctic'],\n  MudWing: ['Clay', 'Marsh', 'Umber', 'Sora', 'Reed', 'Pheasant', 'Cattail'],\n  SilkWing: ['Blue', 'Cricket', 'Luna', 'Admiral', 'Morpho', 'Silverspot', 'Tau'],\n  HiveWing: ['Cricket', 'Hornet', 'Yellowjacket', 'Wasp', 'Cicada', 'Vinegaroon', 'Tsetse'],\n  LeafWing: ['Sundew', 'Willow', 'Hazel', 'Sequoia', 'Maple', 'Pokeweed', 'Bryony']\n};\n\nconst PERSONALITY_TRAITS = [\n  'Curious', 'Ambitious', 'Secretive', 'Brave', 'Cautious', 'Loyal', 'Independent',\n  'Compassionate', 'Analytical', 'Impulsive', 'Wise', 'Rebellious', 'Patient', 'Fierce',\n  'Gentle', 'Protective', 'Scholarly', 'Adventurous', 'Mysterious', 'Determined',\n  'Cunning', 'Forgiving', 'Vengeful', 'Optimistic', 'Pessimistic', 'Humble', 'Proud'\n];\n\nfunction randomChoice<T>(array: T[]): T {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction randomRange(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateDragonName(tribe: string): string {\n  const tribeNames = DRAGON_NAMES[tribe as keyof typeof DRAGON_NAMES] || DRAGON_NAMES.NightWing;\n  return randomChoice(tribeNames);\n}\n\n// Tribal power definitions based on the attached file\nconst TRIBAL_POWERS = {\n  MudWing: ['Fireproof (with siblings)', 'Physical strength', 'Hold breath (1 hour)'],\n  SandWing: ['Poisonous tail stinger', 'Heat resistance', 'Desert camouflage'],\n  SkyWing: ['Superior flight', 'Aerial combat mastery', 'Enhanced fire breath'],\n  SeaWing: ['Underwater breathing', 'Night vision underwater', 'Bioluminescent communication'],\n  IceWing: ['Frostbreath', 'Cold resistance', 'Armored scales', 'Combat tail spines'],\n  RainWing: ['Color-changing scales', 'Deadly venom spit', 'Prehensile tail'],\n  NightWing: ['Mind reading (rare)', 'Prophecy (rare)', 'Night camouflage'],\n  SilkWing: ['Silk production', 'Flame silk (post-metamorphosis)'],\n  HiveWing: ['Various venoms', 'Mind-control toxins', 'Fire breath', 'Resistant scales'],\n  LeafWing: ['Leafspeak (plant control)', 'Forest camouflage', 'Poison knowledge']\n};\n\nconst SPECIAL_POWERS = [\n  'Foresight', 'Enhanced Mind Reading', 'Advanced Leafspeak', \n  'FlameSilk Mastery', 'Royal Fires', 'Enhanced Prophecy'\n];\n\nfunction determineTribalPowers(tribe: string): string[] {\n  const powers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS] || [];\n  // Most dragons get all their tribal powers, some may be weaker versions\n  return [...powers];\n}\n\nfunction determineSpecialPowers(tribe: string, intelligence: number): string[] {\n  const powers: string[] = [];\n  \n  // NightWings have higher chance of mind reading/prophecy\n  if (tribe === 'NightWing') {\n    if (Math.random() < 0.3 && intelligence >= 16) powers.push('Enhanced Mind Reading');\n    if (Math.random() < 0.2 && intelligence >= 17) powers.push('Enhanced Prophecy');\n    if (Math.random() < 0.1 && intelligence >= 18) powers.push('Foresight');\n  }\n  \n  // LeafWings can have enhanced leafspeak\n  if (tribe === 'LeafWing' && Math.random() < 0.4) {\n    powers.push('Advanced Leafspeak');\n  }\n  \n  // SilkWings might develop flame silk\n  if (tribe === 'SilkWing' && Math.random() < 0.3) {\n    powers.push('FlameSilk Mastery');\n  }\n  \n  // Rare chance for any dragon to have special abilities\n  if (Math.random() < 0.05 && intelligence >= 17) {\n    powers.push(randomChoice(SPECIAL_POWERS));\n  }\n  \n  return powers;\n}\n\nexport function generateCharacter(): Character {\n  const tribe = randomChoice(TRIBES);\n  const name = generateDragonName(tribe);\n  const mother = generateDragonName(tribe);\n  const father = generateDragonName(tribe);\n  \n  // Generate 0-3 siblings\n  const siblingCount = Math.floor(Math.random() * 4);\n  const siblings: string[] = [];\n  for (let i = 0; i < siblingCount; i++) {\n    siblings.push(generateDragonName(tribe));\n  }\n  \n  // Generate 1-3 personality traits\n  const traitCount = randomRange(1, 3);\n  const traits: string[] = [];\n  const availableTraits = [...PERSONALITY_TRAITS];\n  \n  for (let i = 0; i < traitCount; i++) {\n    const traitIndex = Math.floor(Math.random() * availableTraits.length);\n    traits.push(availableTraits.splice(traitIndex, 1)[0]);\n  }\n  \n  // Generate stats\n  const intelligence = randomRange(15, 18);\n  const isAnimus = Math.random() < 0.05; // 5% chance to be animus\n  \n  // Determine powers\n  const tribalPowers = determineTribalPowers(tribe);\n  const specialPowers = determineSpecialPowers(tribe, intelligence);\n  \n  // Check for hybrid heritage first (increased chance to 25%)\n  const hybridData = generateHybridDragon();\n  const finalTribe = hybridData.hybridTribes ? hybridData.hybridTribes[0] : tribe;\n  const finalTribalPowers = hybridData.tribalPowers || tribalPowers;\n  \n  // Generate AI-enhanced traits for hybrids\n  let finalTraits = traits;\n  if (hybridData.hybridTribes && hybridData.hybridTribes.length > 1) {\n    const hybridTraits = MockAIService.generateHybridTraits(\n      hybridData.hybridTribes[0],\n      hybridData.hybridTribes[1]\n    );\n    finalTraits = [...traits, ...hybridTraits.slice(0, 2)];\n  }\n\n  const character: Character = {\n    name,\n    tribe: finalTribe,\n    hybridTribes: hybridData.hybridTribes,\n    age: randomRange(3, 8), // Young dragonet\n    yearsSurvived: 0,\n    currentSeason: \"Spring\",\n    soulPercentage: 100, // Start with pure soul\n    sanityPercentage: 100, // Start with full sanity\n    soulCorruptionStage: \"Normal\",\n    strength: hybridData.strength || randomRange(10, 16),\n    intelligence: hybridData.intelligence || intelligence,\n    charisma: hybridData.charisma || randomRange(10, 16),\n    wisdom: hybridData.wisdom || randomRange(12, 18),\n    mother,\n    father,\n    siblings,\n    mate: undefined,\n    dragonets: [],\n    traits: finalTraits,\n    avatar: `https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400`,\n    isAnimus,\n    tribalPowers: finalTribalPowers,\n    specialPowers,\n    relationships: {},\n    lifeEvents: [],\n    romanticHistory: [],\n    achievements: [],\n    isAIControlled: false\n  };\n  \n  return character;\n}\n","size_bytes":6945},"client/src/lib/enhanced-game-engine.ts":{"content":"import { Character, GameData, Choice, GameEvent, Scenario } from \"@shared/schema\";\nimport { AIDungeonMaster } from \"./ai-dungeon-master\";\nimport { SoulCorruptionManager } from \"./enhanced-magic-system\";\nimport { generateScenario, generateTimeInfo } from \"./scenario-generator-final\";\nimport { generateEnhancedScenario } from \"./enhanced-scenario-system\";\nimport { MockAIService } from \"./mock-ai-service\";\nimport { RomanceSystem } from \"./romance-system\";\nimport { LocationSystem, LOCATIONS, Location } from \"./location-system\";\nimport { LocationBasedScenarios } from \"./location-based-scenarios\";\nimport { InventorySystem } from \"./inventory-system\";\nimport { SpecialEventsSystem } from \"./special-events-system\";\nimport { ExpandedScenarioSystem } from './expanded-scenarios';\nimport { EnhancedGameIntegration } from \"./enhanced-game-integration\";\nimport { SoundtrackSystem } from \"./soundtrack-system\";\nimport { AttributeProgressionSystem } from \"./attribute-progression-system\";\nimport { AnimusArtifactSystem } from \"./animus-artifact-system\";\nimport { EnhancedSocialSystem } from \"./enhanced-social-system\";\n\nexport class EnhancedGameEngine {\n  static processChoice(\n    character: Character,\n    gameData: GameData,\n    choice: Choice,\n    scenario: Scenario\n  ): { newCharacter: Character; newGameData: GameData; event: GameEvent } {\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n\n    // Regeneration system: restore soul/sanity based on positive actions\n    const isPositiveAction = EnhancedGameEngine.isPositiveChoice(choice);\n    const isNegativeAction = EnhancedGameEngine.isNegativeChoice(choice);\n    \n    if (isPositiveAction) {\n      // Good deeds restore small amounts of soul and sanity\n      newCharacter.soulPercentage = Math.min(100, character.soulPercentage + 2);\n      newCharacter.sanityPercentage = Math.min(100, character.sanityPercentage + 3);\n    }\n\n    // Apply soul loss and update corruption stage\n    const oldSoulPercentage = character.soulPercentage;\n    if (choice.soulCost > 0) {\n      const actualSoulLoss = this.calculateSoulLoss(choice.soulCost);\n      newCharacter.soulPercentage = Math.max(0, character.soulPercentage - actualSoulLoss);\n      newCharacter.soulCorruptionStage = SoulCorruptionManager.getSoulCorruptionStage(newCharacter.soulPercentage);\n    }\n\n    // Check soul thresholds for soundtrack changes and AI control\n    const aiControlTriggered = SoundtrackSystem.checkSoulThresholds(\n      oldSoulPercentage, \n      newCharacter.soulPercentage, \n      newCharacter, \n      newGameData\n    );\n\n    // Apply sanity changes\n    if (choice.sanityCost !== 0) {\n      const actualSanityChange = this.calculateSanityChange(choice.sanityCost);\n      newCharacter.sanityPercentage = Math.max(0, Math.min(100, character.sanityPercentage - actualSanityChange));\n    }\n    \n    // Additional negative consequences for bad actions\n    if (isNegativeAction && !choice.corruption) {\n      newCharacter.soulPercentage = Math.max(0, newCharacter.soulPercentage - 1);\n      newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - 1);\n    }\n\n    // Process attribute gains\n    const attributeGains = AttributeProgressionSystem.processAttributeGains(newCharacter, choice, scenario);\n    if (attributeGains) {\n      AttributeProgressionSystem.applyAttributeGains(newCharacter, attributeGains);\n    }\n\n    // Age progression - 1 year per turn\n    this.progressTime(newCharacter, newGameData, 1);\n\n    // Handle relationships based on choice\n    this.updateRelationships(newCharacter, choice, scenario);\n\n    // Handle artifact collection if this is an artifact choice\n    console.log(`Processing choice with ID: ${choice.id}`);\n    \n    if (choice.id.startsWith('collect_')) {\n      const artifactId = choice.id.replace('collect_', '');\n      const pendingArtifact = (gameData as any).pendingArtifact;\n      \n      console.log(`ARTIFACT COLLECTION ATTEMPT - Choice ID: ${choice.id}, Artifact ID: ${artifactId}`);\n      console.log(`Pending artifact:`, pendingArtifact);\n      console.log(`Inventory before collection:`, newGameData.inventory?.length || 0, 'items');\n      \n      if (pendingArtifact && pendingArtifact.id === artifactId) {\n        console.log(`Matching artifact found for collection!`);\n        \n        // Initialize inventory if it doesn't exist\n        if (!newGameData.inventory) {\n          newGameData.inventory = [];\n        }\n        \n        // Add artifact directly to inventory\n        const artifactItem = {\n          id: pendingArtifact.id,\n          name: pendingArtifact.name,\n          description: pendingArtifact.description,\n          type: 'magical_artifact' as const,\n          enchantments: pendingArtifact.enchantments || [],\n          isActive: false,\n          canGiveAway: pendingArtifact.canGiveAway || false\n        };\n        \n        newGameData.inventory.push(artifactItem);\n        \n        // Increment artifacts discovered counter only when successfully collected\n        SpecialEventsSystem.incrementArtifactsDiscovered();\n        \n        // Add collection message to last choice result with usage hint\n        newGameData.lastChoiceResult = `You have collected the ${pendingArtifact.name}! It has been added to your inventory. You can use it later through your inventory to unlock its magical powers.`;\n        \n        // Clear pending artifact\n        delete (newGameData as any).pendingArtifact;\n        \n        console.log(`Artifact ${pendingArtifact.name} successfully collected!`);\n        console.log(`Inventory after collection:`, newGameData.inventory?.length || 0, 'items');\n        console.log(`New inventory contents:`, newGameData.inventory?.map(i => i.name) || []);\n      } else {\n        console.log(`Collection failed - no matching pending artifact found`);\n        console.log(`Expected artifact ID: ${artifactId}, Pending artifact:`, pendingArtifact);\n      }\n    }\n    \n    // Handle continue button - clear outcome display and generate next scenario\n    if (choice.id === 'continue' && gameData.awaitingResponse) {\n      newGameData.lastChoiceResult = undefined;\n      newGameData.awaitingResponse = false;\n      \n      // Generate next scenario after clearing outcome\n      const nextScenario = this.generateNextScenario(newCharacter, newGameData);\n      newGameData.currentScenario = nextScenario;\n      \n      return {\n        newCharacter,\n        newGameData,\n        event: {\n          turn: gameData.turn,\n          scenario: 'continue',\n          choice: 'continue',\n          consequences: ['Story continues...'],\n          soulLoss: 0,\n          sanityLoss: 0\n        }\n      };\n    }\n\n    // Store outcome for display with continue button\n    let outcomeText = \"\";\n    if (choice.consequences && choice.consequences.length > 0) {\n      outcomeText = choice.consequences.join(\". \");\n    }\n    \n    // Check if this is a special event choice and process it\n    if (scenario.id.includes('artifact_') || scenario.id.includes('mindreading_') || scenario.id.includes('prophecy_')) {\n      try {\n        // Create a mock special event from the current scenario to process the choice\n        const specialEvent = {\n          id: scenario.id,\n          type: scenario.id.includes('artifact_') ? 'artifact_discovery' : \n                scenario.id.includes('mindreading_') ? 'mindreading_event' : 'prophecy_event',\n          scenario: scenario,\n          timestamp: gameData.turn\n        };\n        \n        const result = SpecialEventsSystem.processSpecialEventChoice(specialEvent as any, choice.id, newCharacter, newGameData);\n        outcomeText = result.outcome;\n        Object.assign(newCharacter, result.newCharacter);\n        Object.assign(newGameData, result.newGameData);\n      } catch (error) {\n        console.warn(\"Special event processing failed:\", error);\n      }\n    }\n    \n    // Set outcome for display\n    if (outcomeText) {\n      newGameData.lastChoiceResult = outcomeText;\n      newGameData.awaitingResponse = true;\n    }\n\n    // Check for achievements\n    this.checkAchievements(newCharacter, choice, scenario);\n\n    // Handle inventory rewards from choices\n    if (choice.rewardItem) {\n      const updatedGameData = InventorySystem.addItem(newGameData, choice.rewardItem);\n      newGameData.inventory = updatedGameData.inventory;\n    }\n    \n    // Handle artifact collection for generic artifact choices\n    if (choice.id === 'claim_artifact' || choice.id === 'take_artifact' || choice.id === 'collect_artifact') {\n      // Add a generic artifact to inventory\n      if (!newGameData.inventory) newGameData.inventory = [];\n      newGameData.inventory.push({\n        id: `artifact_${Date.now()}`,\n        name: 'Ancient Scroll',\n        type: 'magical_artifact',\n        description: 'An ancient magical scroll with mysterious powers',\n        enchantments: ['Ancient Knowledge'],\n        rarity: 'legendary',\n        isActive: true,\n        canGiveAway: false\n      });\n      console.log('Added artifact to inventory via generic collection choice');\n    }\n\n    // Handle item consumption if required\n    if (choice.requiresItem && (choice as any).consumesItem) {\n      const requiredItem = (newGameData.inventory || []).find(item => \n        item.id === choice.requiresItem || \n        item.name.toLowerCase().includes(choice.requiresItem!)\n      );\n      if (requiredItem) {\n        const updatedGameData = InventorySystem.removeItem(newGameData, requiredItem.id);\n        newGameData.inventory = updatedGameData.inventory;\n      }\n    }\n\n    // Process enhanced consequences from our new systems\n    if (choice.consequences && choice.consequences.length > 0) {\n      try {\n        this.processEnhancedConsequences(newCharacter, newGameData, choice.consequences, scenario);\n      } catch (error) {\n        console.warn(\"Enhanced consequence processing failed:\", error);\n      }\n    }\n\n    // Check for special events every 10 turns using the actual turn number\n    let nextScenario: Scenario;\n    \n    // Increment turn first\n    const nextTurn = gameData.turn + 1;\n    \n    // Initialize special events system with current game data\n    SpecialEventsSystem.initializeEventState(newGameData);\n    \n    // Check for special events every 10 turns (turn 10, 20, 30, etc.)\n    if (nextTurn % 10 === 0) {\n      console.log(`Turn ${nextTurn}: Checking for special events...`);\n      const specialEvent = SpecialEventsSystem.checkForSpecialEvent(newCharacter, { ...newGameData, turn: nextTurn });\n      if (specialEvent) {\n        console.log(`Special event triggered at turn ${nextTurn}:`, specialEvent.type);\n        console.log(`Special event scenario ID: ${specialEvent.scenario.id}`);\n        console.log(`Special event scenario choices:`, specialEvent.scenario.choices.map(c => c.id));\n        nextScenario = specialEvent.scenario;\n        \n        // For artifact discoveries, make sure to preserve the artifact data\n        if (specialEvent.type === 'artifact_discovery' && (gameData as any).pendingArtifact) {\n          console.log(`Preserving pending artifact for scenario: ${(gameData as any).pendingArtifact.name}`);\n          (newGameData as any).pendingArtifact = (gameData as any).pendingArtifact;\n        }\n        \n        // Save updated event state\n        SpecialEventsSystem.saveEventState(newGameData);\n      } else {\n        console.log(`No special event triggered at turn ${nextTurn}`);\n        \n        // Try location-specific special scenario\n        const locationSpecial = ExpandedScenarioSystem.tryGetLocationSpecialScenario(newCharacter, newGameData.location);\n        if (locationSpecial) {\n          console.log(`Location special scenario triggered: ${locationSpecial.title}`);\n          nextScenario = ExpandedScenarioSystem.convertToScenario(locationSpecial, newGameData);\n        } else {\n          // Generate next scenario using original system\n          nextScenario = this.generateNextScenario(newCharacter, newGameData);\n        }\n      }\n    } else {\n      // Try location-specific special scenario occasionally\n      const locationSpecial = ExpandedScenarioSystem.tryGetLocationSpecialScenario(newCharacter, newGameData.location);\n      if (locationSpecial) {\n        console.log(`Location special scenario triggered: ${locationSpecial.title}`);\n        nextScenario = ExpandedScenarioSystem.convertToScenario(locationSpecial, newGameData);\n      } else {\n        // Generate next scenario using original system\n        nextScenario = this.generateNextScenario(newCharacter, newGameData);\n      }\n    }\n\n    // Create game event\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: choice.id,\n      consequences: choice.consequences,\n      soulLoss: choice.soulCost,\n      sanityLoss: choice.sanityCost\n    };\n\n    // Update game data with year and season progression\n    newGameData.turn += 1;\n    \n    // Advance years by 0.5 per turn (2 turns = 1 year)\n    newGameData.yearsPassed = (newGameData.yearsPassed || 0) + 0.5;\n    \n    // Change seasons every turn\n    const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n    const currentSeasonIndex = ((newGameData.turn - 1) % 4);\n    newGameData.currentSeason = seasons[currentSeasonIndex];\n    \n    newGameData.currentScenario = nextScenario;\n    newGameData.history.push(event);\n    \n    // Debug log the final scenario being set\n    console.log(`Final scenario being set - ID: ${nextScenario.id}, Title: ${nextScenario.title}`);\n    console.log(`Final scenario choices:`, nextScenario.choices?.map(c => ({ id: c.id, text: c.text })) || []);\n\n    // Check if AI should take control\n    if (SoulCorruptionManager.shouldAITakeControl(newCharacter)) {\n      newCharacter.isAIControlled = true;\n    }\n\n    return { newCharacter, newGameData, event };\n  }\n\n  // Process enhanced consequences and social interactions\n  private static processEnhancedConsequences(character: Character, gameData: GameData, consequences: string[], scenario: Scenario): void {\n    consequences.forEach(consequence => {\n      // Extract names and process relationships from consequence text\n      if (consequence.includes('warmly engage') || consequence.includes('positive connection') || consequence.includes('building a positive')) {\n        // Extract dragon name from the consequence\n        const nameMatch = consequence.match(/with\\s+([A-Za-z]+)/);\n        if (nameMatch && nameMatch[1]) {\n          const dragonName = nameMatch[1];\n          EnhancedSocialSystem.processRelationshipChange(\n            character,\n            dragonName,\n            scenario.location || 'Unknown',\n            15,\n            'friendship'\n          );\n        }\n      }\n      \n      // Handle romantic developments\n      if (consequence.includes('romantic connection') || consequence.includes('pursue a romantic')) {\n        const nameMatch = consequence.match(/with\\s+([A-Za-z]+)/);\n        if (nameMatch && nameMatch[1]) {\n          const dragonName = nameMatch[1];\n          if (!character.relationships[dragonName]) {\n            character.relationships[dragonName] = {\n              name: dragonName,\n              type: 'romantic',\n              strength: 60,\n              history: ['Romantic connection developed'],\n              isAlive: true\n            };\n          } else {\n            character.relationships[dragonName].type = 'romantic';\n            character.relationships[dragonName].strength = Math.max(60, character.relationships[dragonName].strength);\n          }\n        }\n      }\n      \n      // Handle family bond strengthening for dragonets\n      if (consequence.includes('loving support') || consequence.includes('family bond')) {\n        const nameMatch = consequence.match(/to\\s+([A-Za-z]+)/);\n        if (nameMatch && nameMatch[1]) {\n          const dragonetName = nameMatch[1];\n          const dragonet = character.dragonets.find(d => d.name === dragonetName);\n          if (dragonet) {\n            // Update personality to reflect positive family bond\n            if (!dragonet.personality.includes('Well-loved')) {\n              dragonet.personality = dragonet.personality ? \n                `${dragonet.personality}, Well-loved` : \n                'Well-loved';\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static processCustomAction(\n    character: Character,\n    gameData: GameData,\n    action: { action: string; consequences: string[] },\n    scenario: Scenario\n  ): GameData {\n    const newGameData = { ...gameData };\n    \n    // Create a game event for the custom action\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: `custom_action_${Date.now()}`,\n      consequences: action.consequences,\n      soulLoss: 0,\n      sanityLoss: 0\n    };\n\n    // Update game data with year and season progression\n    newGameData.turn += 1;\n    \n    // Advance years by 0.5 per turn\n    newGameData.yearsPassed = (newGameData.yearsPassed || 0) + 0.5;\n    \n    // Change seasons every turn\n    const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n    const currentSeasonIndex = ((newGameData.turn - 1) % 4);\n    newGameData.currentSeason = seasons[currentSeasonIndex];\n    \n    newGameData.history.push(event);\n    \n    // Generate next scenario\n    newGameData.currentScenario = this.generateNextScenario(character, newGameData);\n    \n    return newGameData;\n  }\n\n  static generateNextScenario(character: Character, gameData: GameData): Scenario {\n    const currentLocation = LocationSystem.getCurrentLocation(gameData);\n    \n    // 40% chance to use location-specific scenario if available\n    if (Math.random() < 0.4) {\n      const locationScenario = LocationBasedScenarios.getRandomLocationScenario(currentLocation.id, character);\n      if (locationScenario) {\n        // Add random chance for item collection scenarios\n        const enhancedChoices = ((locationScenario as any).choices || []).map((choice: any) => {\n          // Add item rewards to some choices\n          if (Math.random() < 0.3) {\n            const item = InventorySystem.generateCollectibleItem(currentLocation.name, locationScenario.title);\n            return {\n              ...choice,\n              rewardItem: item,\n              consequences: [...(choice.consequences || []), `You found ${item.name}!`]\n            };\n          }\n          return choice;\n        }) || [];\n\n        // Convert location scenario to standard scenario format\n        return {\n          id: locationScenario.id,\n          title: locationScenario.title,\n          description: locationScenario.narrativeText[0],\n          narrativeText: locationScenario.narrativeText,\n          choices: enhancedChoices,\n          type: 'mundane', // Default type for location scenarios\n          location: currentLocation.name,\n          timeOfDay: gameData.timeInfo || \"Midday\",\n          weather: this.getLocationWeather(currentLocation)\n        };\n      }\n    }\n    \n    // Try enhanced social/family/romance scenarios first\n    const enhancedScenario = EnhancedGameIntegration.generateEnhancedScenario(character, gameData);\n    if (enhancedScenario) {\n      return enhancedScenario;\n    }\n\n    // Fall back to enhanced scenario generation\n    return generateEnhancedScenario(character, gameData);\n  }\n\n  static generateLocationScenarioChoices(locationScenario: any, character: Character): Choice[] {\n    const choices: Choice[] = [];\n    \n    // Generate contextual choices based on location and scenario\n    if (locationScenario.emotionalTone === 'peaceful' || locationScenario.emotionalTone === 'enlightening') {\n      choices.push(\n        {\n          id: `${locationScenario.id}_wise_action`,\n          text: \"Act with wisdom and compassion\",\n          description: \"Choose the path that helps others and strengthens your spirit\",\n          soulCost: 0,\n          sanityCost: -3, // Restores sanity\n          consequences: [\"Your wise choice brings peace to your spirit and helps those around you.\"]\n        },\n        {\n          id: `${locationScenario.id}_cautious_observation`,\n          text: \"Observe carefully before acting\",\n          description: \"Take time to understand the situation fully\",\n          soulCost: 0,\n          sanityCost: -1, // Restores sanity slightly\n          consequences: [\"Your patient observation leads to better understanding.\"]\n        }\n      );\n    } else if (locationScenario.emotionalTone === 'dramatic' || locationScenario.emotionalTone === 'tense') {\n      choices.push(\n        {\n          id: `${locationScenario.id}_bold_intervention`,\n          text: \"Intervene boldly\",\n          description: \"Take decisive action despite the risks\",\n          soulCost: 0,\n          sanityCost: 5,\n          consequences: [\"Your bold action changes the situation dramatically...\"]\n        },\n        {\n          id: `${locationScenario.id}_strategic_approach`,\n          text: \"Plan a strategic approach\",\n          description: \"Think through the consequences before acting\",\n          soulCost: 0,\n          sanityCost: 2,\n          consequences: [\"Your strategic thinking helps navigate the complex situation...\"]\n        }\n      );\n    }\n    \n    // Always add a choice to leave/avoid\n    choices.push({\n      id: `${locationScenario.id}_withdraw`,\n      text: \"Step away from the situation\",\n      description: \"Avoid getting involved in this matter\",\n      soulCost: 1,\n      sanityCost: 3,\n      consequences: [\"You choose not to get involved, leaving the situation to resolve itself...\"]\n    });\n    \n    return choices;\n  }\n\n  static getLocationWeather(location: Location): string {\n    const weatherPatterns: Record<string, string[]> = {\n      \"jade_mountain_academy\": [\"Clear mountain air\", \"Light mountain breeze\", \"Misty morning\"],\n      \"mud_kingdom\": [\"Humid and muggy\", \"Swampy mist\", \"Gentle rain\"],\n      \"sand_kingdom\": [\"Hot and dry\", \"Sandstorm approaching\", \"Scorching sun\"],\n      \"sky_kingdom\": [\"Thin mountain air\", \"Strong winds\", \"Crystal clear skies\"],\n      \"sea_kingdom\": [\"Ocean breeze\", \"Salty mist\", \"Gentle waves\"],\n      \"ice_kingdom\": [\"Bitter cold\", \"Swirling snow\", \"Aurora visible\"],\n      \"rainforest_kingdom\": [\"Warm humidity\", \"Tropical rain\", \"Dappled sunlight\"],\n      \"poison_jungle\": [\"Toxic mists\", \"Oppressive humidity\", \"Strange plant odors\"]\n    };\n    \n    const patterns = weatherPatterns[location.id] || [\"Pleasant weather\"];\n    return patterns[Math.floor(Math.random() * patterns.length)];\n  }\n\n  static handleLocationMigration(character: Character, gameData: GameData, destination: Location): GameData {\n    const travelTime = LocationSystem.calculateTravelTime(LocationSystem.getCurrentLocation(gameData), destination);\n    \n    return {\n      ...gameData,\n      location: destination.id,\n      turn: gameData.turn + Math.ceil(travelTime / 2), // Advance turns based on travel time\n      timeInfo: generateTimeInfo(character)\n    };\n  }\n\n  static calculateSoulLoss(baseCost: number): number {\n    // Add slight randomness to soul cost\n    const modifier = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2 multiplier\n    return Math.floor(baseCost * modifier);\n  }\n\n  static calculateSanityChange(baseCost: number): number {\n    // Add slight randomness to sanity cost\n    const modifier = 0.8 + (Math.random() * 0.4);\n    return Math.floor(baseCost * modifier);\n  }\n\n  static progressTime(character: Character, gameData: GameData, multiplier: number = 1): void {\n    // Age progression - every 5 turns advances age (faster aging)\n    if (gameData.turn % 5 === 0) {\n      character.age += 0.2 * multiplier;\n    }\n\n    // Season changes every 25 turns\n    if (gameData.turn % 25 === 0) {\n      const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n      const currentIndex = seasons.indexOf(character.currentSeason || 'Spring');\n      character.currentSeason = seasons[(currentIndex + 1) % 4] as \"Spring\" | \"Summer\" | \"Fall\" | \"Winter\";\n    }\n  }\n\n  static processInventoryAction(\n    character: Character,\n    gameData: GameData,\n    action: string,\n    itemId: string,\n    result: string\n  ): { newCharacter: Character; newGameData: GameData; event: GameEvent } {\n    console.log(`Processing inventory action: ${action} on item: ${itemId}`);\n    \n    const newGameData = { ...gameData };\n    let newCharacter = { ...character };\n\n    // Handle artifact usage with its specific mechanics\n    if (action === 'use_artifact') {\n      const artifact = AnimusArtifactSystem.getArtifactById(itemId);\n      if (artifact && result.startsWith('Using option: ')) {\n        // Extract option ID from result string\n        const optionMatch = result.match(/Using option: (\\w+)/);\n        if (optionMatch) {\n          const optionId = optionMatch[1];\n          const usageResult = AnimusArtifactSystem.useArtifact(artifact, optionId, character, gameData);\n          newCharacter = usageResult.newCharacter;\n          Object.assign(newGameData, usageResult.newGameData);\n          newGameData.lastChoiceResult = `${usageResult.outcome}\\n\\nConsequences: ${usageResult.consequences.join(', ')}`;\n        }\n      }\n    } else {\n      // Find and remove the item from inventory if needed\n      if (action === 'tear_up' || action === 'give') {\n        newGameData.inventory = (newGameData.inventory || []).filter(item => item.id !== itemId);\n      }\n\n      // Store the action result for display\n      newGameData.lastChoiceResult = result;\n    }\n\n    // Create a basic game event for the inventory action\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: 'inventory_action',\n      choice: action,\n      consequences: [result],\n      soulLoss: 0,\n      sanityLoss: 0\n    };\n\n    return {\n      newCharacter,\n      newGameData,\n      event\n    };\n  }\n\n  static updateRelationships(character: Character, choice: Choice, scenario: Scenario): void {\n    // Handle romance-specific choices\n    if (scenario.id.includes('romance_') || choice.id.includes('romance_')) {\n      this.handleRomanceChoice(character, choice, scenario);\n      return;\n    }\n\n    // Handle general relationship consequences\n    if (choice.consequences && choice.consequences.some(c => c.toLowerCase().includes('friend'))) {\n      // Positive social interaction\n      const dragonName = this.extractDragonName(choice.consequences.join(' '));\n      if (dragonName && character.relationships && character.relationships[dragonName] !== undefined) {\n        const relationship = character.relationships[dragonName];\n        if (typeof relationship === 'object') {\n          relationship.strength = Math.min(100, relationship.strength + 10);\n          relationship.history.push(\"Had a positive interaction\");\n        }\n      }\n    }\n\n    if (choice.consequences && choice.consequences.some(c => c.toLowerCase().includes('betray') || c.toLowerCase().includes('hurt'))) {\n      // Negative social interaction  \n      const dragonName = this.extractDragonName(choice.consequences.join(' '));\n      if (dragonName && character.relationships && character.relationships[dragonName] !== undefined) {\n        const relationship = character.relationships[dragonName];\n        if (typeof relationship === 'object') {\n          relationship.strength = Math.max(-100, relationship.strength - 15);\n          relationship.history.push(\"Had a negative interaction\");\n        }\n      }\n    }\n\n    // Check for romance progression with existing relationships\n    if (character.relationships) {\n      Object.keys(character.relationships).forEach(dragonName => {\n        const relationship = character.relationships[dragonName];\n        if (typeof relationship === 'object' && relationship.type === 'romantic') {\n        // Check if ready to become mates\n        if (RomanceSystem.canMate(character, dragonName) && !character.mate && Math.random() < 0.2) {\n          character.mate = dragonName;\n          relationship.type = 'mate';\n          relationship.history.push(\"Became life mates\");\n          \n          // Add life event\n          if (!character.lifeEvents) character.lifeEvents = [];\n          character.lifeEvents.push({\n            turn: scenario ? scenario.id.includes('ai_') ? parseInt(scenario.id.split('_')[2]) || 0 : 0 : 0,\n            category: 'romance',\n            description: `Became mates with ${dragonName}`,\n            impact: 'positive'\n          });\n          \n          // Chance for dragonets\n          if (Math.random() < 0.4) {\n            const partnerTribe = this.getRandomTribe();\n            const offspring = RomanceSystem.generateOffspring(character, dragonName, partnerTribe);\n            if (offspring) {\n              character.lifeEvents.push({\n                turn: scenario ? scenario.id.includes('ai_') ? parseInt(scenario.id.split('_')[2]) || 0 : 0 : 0,\n                category: 'birth',\n                description: `Had a dragonet named ${offspring.name}`,\n                impact: 'positive'\n              });\n            }\n          }\n        }\n        }\n      });\n    }\n  }\n\n  static handleRomanceChoice(character: Character, choice: Choice, scenario: Scenario): void {\n    // Extract partner name from scenario narrative\n    const narrativeText = (scenario.narrativeText || []).join(' ');\n    const partnerName = this.extractPartnerFromRomanceScenario(narrativeText);\n    \n    if (!partnerName) return;\n\n    // Handle different romance choices\n    if (choice.id === 'romance_accept') {\n      // Accept romantic advances - develop relationship\n      const partnerTribe = this.getRandomTribe();\n      RomanceSystem.developRomance(character, partnerName, partnerTribe);\n      \n      // Add life event\n      if (!character.lifeEvents) character.lifeEvents = [];\n      character.lifeEvents.push({\n        turn: scenario ? scenario.id.includes('ai_') ? parseInt(scenario.id.split('_')[2]) || 0 : 0 : 0,\n        category: 'romance',\n        description: `Started a romantic relationship with ${partnerName}`,\n        impact: 'positive'\n      });\n      \n    } else if (choice.id === 'romance_cautious') {\n      // Cautious approach - develop friendship first\n      if (!character.relationships) character.relationships = {};\n      character.relationships[partnerName] = {\n        name: partnerName,\n        type: 'friend',\n        strength: Math.floor(Math.random() * 20) + 40, // 40-60 strength\n        history: [\"Met through romantic encounter\", \"Taking things slowly\"],\n        isAlive: true\n      };\n      \n    } else if (choice.id === 'romance_reject') {\n      // Polite rejection - neutral relationship\n      if (!character.relationships) character.relationships = {};\n      character.relationships[partnerName] = {\n        name: partnerName,\n        type: 'neutral',\n        strength: Math.floor(Math.random() * 20) + 20, // 20-40 strength\n        history: [\"Met through romantic encounter\", \"Politely declined romantic advances\"],\n        isAlive: true\n      };\n    }\n  }\n\n  static extractPartnerFromRomanceScenario(narrativeText: string): string | null {\n    // Extract partner name from romance scenario text\n    const words = narrativeText.split(' ');\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].toLowerCase() === 'a' && i + 1 < words.length) {\n        const potentialName = words[i + 2]; // Skip 'a [tribe]'\n        if (potentialName && /^[A-Z][a-z]+$/.test(potentialName)) {\n          return potentialName;\n        }\n      }\n    }\n    \n    // Fallback: use common romance system names\n    return RomanceSystem.getRandomPartnerName();\n  }\n\n  static getRandomTribe(): string {\n    const tribes = [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"];\n    return tribes[Math.floor(Math.random() * tribes.length)];\n  }\n\n  static addDragonet(character: Character, partnerName: string): void {\n    // Use the romance system for proper offspring generation\n    const partnerTribe = this.getRandomTribe();\n    const offspring = RomanceSystem.generateOffspring(character, partnerName, partnerTribe);\n    \n    if (!character.dragonets) {\n      character.dragonets = [];\n    }\n    \n    if (offspring) {\n      character.dragonets.push(offspring);\n    }\n  }\n\n  static generateDragonetPersonality(): string {\n    const personalities = [\n      'brave and adventurous', 'shy but kind', 'curious and intelligent',\n      'mischievous and playful', 'wise beyond their years', 'energetic and loud',\n      'thoughtful and careful', 'rebellious and independent'\n    ];\n    return personalities[Math.floor(Math.random() * personalities.length)];\n  }\n\n  static checkAchievements(character: Character, choice: Choice, scenario: Scenario): void {\n    if (!character.achievements) {\n      character.achievements = [];\n    }\n\n    const achievements = character.achievements;\n\n    // First animus spell\n    if (character.isAnimus && choice.soulCost > 0 && !achievements.includes('First Magic')) {\n      achievements.push('First Magic');\n    }\n\n    // Soul corruption milestones\n    if (character.soulPercentage < 50 && !achievements.includes('Soul Frayed')) {\n      achievements.push('Soul Frayed');\n    }\n    if (character.soulPercentage < 25 && !achievements.includes('Soul Twisted')) {\n      achievements.push('Soul Twisted');\n    }\n\n    // Relationship achievements\n    if (choice.consequences.some(c => c.toLowerCase().includes('love')) && !achievements.includes('Found Love')) {\n      achievements.push('Found Love');\n    }\n\n    // Survival milestones\n    const relationshipCount = Object.keys(character.relationships).length;\n    if (relationshipCount >= 5 && !achievements.includes('Social Butterfly')) {\n      achievements.push('Social Butterfly');\n    }\n\n    // Family achievements\n    if (character.dragonets && character.dragonets.length >= 3 && !achievements.includes('Big Family')) {\n      achievements.push('Big Family');\n    }\n\n    // Corruption resistance\n    if (character.isAnimus && character.soulPercentage > 75 && !achievements.includes('Pure Soul')) {\n      achievements.push('Pure Soul');\n    }\n  }\n\n  static checkGameOver(character: Character): { isGameOver: boolean; reason?: string } {\n    // Traditional game over conditions\n    if (character.sanityPercentage <= 0) {\n      return { isGameOver: true, reason: \"Insanity\" };\n    }\n\n    if (character.age >= 100) {\n      return { isGameOver: true, reason: \"Old Age\" };\n    }\n\n    // Soul completely lost - but allow AI takeover\n    if (character.soulPercentage <= 0) {\n      return { isGameOver: true, reason: \"Soul Lost - AI Control Activated\" };\n    }\n\n    return { isGameOver: false };\n  }\n\n  static getCorruptionLevel(soulPercentage: number): \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\" {\n    return SoulCorruptionManager.getSoulCorruptionStage(soulPercentage);\n  }\n\n  static getCorruptionMessage(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): string {\n    switch (stage) {\n      case \"Frayed\":\n        return \"Your soul shows minor cracks. Dark thoughts occasionally surface.\";\n      case \"Twisted\":\n        return \"Your moral compass wavers. The corruption whispers suggestions.\";\n      case \"Broken\":\n        return \"Your soul is severely damaged. The AI will increasingly make evil choices for you.\";\n      default:\n        return \"\";\n    }\n  }\n\n  static shouldShowCorruptionPopup(character: Character): boolean {\n    // Show corruption popups when soul is below 15% (but above 0%) - AI control handles its own messaging\n    return character.soulPercentage < 15 && character.soulPercentage > 0;\n  }\n\n  static generateCorruptionWhisper(character: Character): string {\n    const whispers = [\n      \"Perhaps a little cruelty would solve this problem faster...\",\n      \"Why show mercy when power could settle this instantly?\",\n      \"Others are weak. You could rule them all with your magic...\",\n      \"Hurt them before they hurt you. Strike first.\",\n      \"Your feelings are a weakness. Embrace the cold logic of power.\",\n      \"They don't understand you. Make them fear you instead.\",\n      \"Compassion is for the weak. You are beyond such things now.\",\n      \"Why negotiate when you could simply take what you want?\",\n      \"Trust no one. Everyone will eventually betray you.\",\n      \"Pain teaches better lessons than kindness ever could.\"\n    ];\n    \n    return whispers[Math.floor(Math.random() * whispers.length)];\n  }\n\n  static getAIChoice(character: Character, scenario: Scenario): Choice | null {\n    // AI only takes control when soul is very low (under 5%)\n    if (character.soulPercentage > 5) return null;\n    \n    // AI prefers the most cruel/corrupted choice\n    const choices = scenario.choices;\n    if (choices.length === 0) return null;\n\n    // Look for choices with corruption markers or high soul costs\n    const corruptChoices = choices.filter(c => \n      c.corruption || \n      c.soulCost > 5 ||\n      c.text?.toLowerCase()?.includes('attack') ||\n      c.text?.toLowerCase()?.includes('hurt') ||\n      c.text?.toLowerCase()?.includes('betray') ||\n      c.text?.toLowerCase()?.includes('cruel')\n    );\n\n    if (corruptChoices.length > 0) {\n      return corruptChoices[Math.floor(Math.random() * corruptChoices.length)];\n    }\n\n    // Fall back to a random choice if no obviously corrupt ones\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  static extractDragonName(text: string): string | null {\n    const patterns = [\n      /([A-Z][a-z]+) (?:dragon|dragoness)/i,\n      /(?:meet|see|encounter) ([A-Z][a-z]+)/i,\n      /([A-Z][a-z]+) approaches/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    \n    return null;\n  }\n\n  static generateRandomDragonName(): string {\n    const prefixes = ['Fire', 'Moon', 'Star', 'Shadow', 'Storm', 'Ice', 'Sand', 'Sea', 'Sky', 'Earth'];\n    const suffixes = ['wing', 'claw', 'scale', 'flame', 'heart', 'spirit', 'song', 'dance', 'light', 'shade'];\n    \n    return prefixes[Math.floor(Math.random() * prefixes.length)] + \n           suffixes[Math.floor(Math.random() * suffixes.length)];\n  }\n\n  static inheritTraits(parent: Character): string[] {\n    const traits = [\n      'Strong scales', 'Keen eyesight', 'Quick reflexes', 'Natural leadership',\n      'Magical sensitivity', 'Enhanced intelligence', 'Social charisma', 'Combat instincts'\n    ];\n    \n    const inheritedCount = Math.floor(Math.random() * 3) + 1; // 1-3 traits\n    const shuffled = traits.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, inheritedCount);\n  }\n\n  static isPositiveChoice(choice: Choice): boolean {\n    const positiveKeywords = ['help', 'heal', 'save', 'protect', 'befriend', 'share', 'aid', 'comfort', 'mercy', 'forgive', 'peaceful', 'kind'];\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    return positiveKeywords.some(keyword => text.includes(keyword)) || choice.sanityCost < 0;\n  }\n\n  static isNegativeChoice(choice: Choice): boolean {\n    const negativeKeywords = ['attack', 'hurt', 'betray', 'steal', 'kill', 'harm', 'cruel', 'abandon', 'ignore', 'threaten', 'manipulate'];\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    return negativeKeywords.some(keyword => text.includes(keyword)) || choice.corruption === true;\n  }\n}","size_bytes":39146},"client/src/lib/enhanced-magic-system.ts":{"content":"import { MagicSpell, Character } from \"@shared/schema\";\n\nexport const ENHANCED_MAGIC_SPELLS: MagicSpell[] = [\n  // Enchantment Spells\n  {\n    name: \"Object Enchantment\",\n    category: \"minor\",\n    type: \"enchantment\",\n    soulCost: [0.2, 1],\n    description: \"Imbue objects with magical properties\",\n    examples: [\n      \"Make a pouch that never empties of coins\",\n      \"Create a torch that burns without fuel\",\n      \"Enchant armor to be lighter than air\",\n      \"Make a scroll that rewrites itself\"\n    ]\n  },\n  {\n    name: \"Greater Enchantments\", \n    category: \"moderate\",\n    type: \"enchantment\",\n    soulCost: [1, 3],\n    description: \"Create powerful magical artifacts\",\n    examples: [\n      \"Forge a sword that cuts through any material\",\n      \"Create a crown that grants mind-reading\",\n      \"Enchant a cloak of perfect invisibility\",\n      \"Make a map that shows any location in real-time\"\n    ]\n  },\n\n  // Combat Magic\n  {\n    name: \"Combat Enhancement\",\n    category: \"minor\", \n    type: \"combat\",\n    soulCost: [0.3, 1.5],\n    description: \"Enhance fighting abilities temporarily\",\n    examples: [\n      \"Make your claws razor-sharp for one battle\",\n      \"Grant yourself super-strength for an hour\",\n      \"Create protective scales that deflect attacks\",\n      \"Enhance your speed to blur-fast movement\"\n    ]\n  },\n  {\n    name: \"Battlefield Control\",\n    category: \"major\",\n    type: \"combat\", \n    soulCost: [1.5, 4],\n    description: \"Control entire battlefields\",\n    examples: [\n      \"Create an army of animated stone warriors\",\n      \"Turn enemy weapons against their wielders\",\n      \"Summon walls of fire to divide armies\",\n      \"Make the ground itself fight for you\"\n    ]\n  },\n\n  // Healing Magic\n  {\n    name: \"Healing Touch\",\n    category: \"minor\",\n    type: \"healing\",\n    soulCost: [0.2, 1],\n    description: \"Cure injuries and ailments\",\n    examples: [\n      \"Instantly heal broken bones\",\n      \"Cure diseases with a touch\",\n      \"Restore lost blood and energy\",\n      \"Heal mental trauma and nightmares\"\n    ]\n  },\n  {\n    name: \"Resurrection Magic\",\n    category: \"catastrophic\",\n    type: \"healing\",\n    soulCost: [25, 40],\n    description: \"Bring back the dead - ultimate taboo\",\n    examples: [\n      \"Restore life to a recently deceased dragon\",\n      \"Resurrect ancient dragons from bones\",\n      \"Create undead servants from corpses\",\n      \"Grant immortality to yourself or others\"\n    ]\n  },\n\n  // Weather Control\n  {\n    name: \"Weather Manipulation\",\n    category: \"moderate\",\n    type: \"weather\",\n    soulCost: [1, 3],\n    description: \"Control local weather patterns\",\n    examples: [\n      \"Summon lightning storms\",\n      \"Create protective fog banks\",\n      \"Bring rain to drought-stricken lands\",\n      \"Freeze entire lakes solid\"\n    ]\n  },\n  {\n    name: \"Climate Control\",\n    category: \"major\",\n    type: \"weather\", \n    soulCost: [10, 20],\n    description: \"Alter climate across vast regions\",\n    examples: [\n      \"End a kingdom-wide drought permanently\",\n      \"Create endless winter across continents\",\n      \"Summon hurricanes that last for years\",\n      \"Make deserts bloom with eternal spring\"\n    ]\n  },\n\n  // Curse Magic\n  {\n    name: \"Minor Curses\",\n    category: \"minor\",\n    type: \"curse\",\n    soulCost: [0.5, 2],\n    description: \"Inflict misfortune on enemies\",\n    examples: [\n      \"Make someone's words come out backwards\",\n      \"Curse them to always tell the truth\",\n      \"Give them nightmares every night\",\n      \"Make their food taste like ash\"\n    ]\n  },\n  {\n    name: \"Devastating Curses\",\n    category: \"major\",\n    type: \"curse\",\n    soulCost: [4, 10],\n    description: \"Destroy lives with dark magic\",\n    examples: [\n      \"Curse an entire bloodline with madness\",\n      \"Make someone age rapidly until death\",\n      \"Turn enemies into mindless beasts\",\n      \"Trap souls in eternal torment\"\n    ]\n  },\n\n  // Summoning Magic\n  {\n    name: \"Creature Summoning\",\n    category: \"moderate\",\n    type: \"summoning\",\n    soulCost: [1.5, 4],\n    description: \"Call forth magical beings\",\n    examples: [\n      \"Summon a storm of deadly insects\",\n      \"Create phantom dragons to fight for you\",\n      \"Call forth spirits of the dead\",\n      \"Manifest your fears as physical beings\"\n    ]\n  },\n  {\n    name: \"Planar Summoning\",\n    category: \"catastrophic\",\n    type: \"summoning\",\n    soulCost: [15, 25],\n    description: \"Tear holes between dimensions\",\n    examples: [\n      \"Summon demons from other realms\",\n      \"Open portals to parallel worlds\",\n      \"Call forth ancient cosmic entities\",\n      \"Merge different realities together\"\n    ]\n  }\n];\n\nexport class SoulCorruptionManager {\n  static getSoulCorruptionStage(soulPercentage: number): \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\" {\n    if (soulPercentage >= 85) return \"Normal\";\n    if (soulPercentage >= 60) return \"Frayed\";\n    if (soulPercentage >= 30) return \"Twisted\";\n    return \"Broken\";\n  }\n\n  static getCorruptionEffects(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): string[] {\n    switch (stage) {\n      case \"Normal\":\n        return [\"Your soul remains pure and unmarked by corruption.\"];\n      case \"Frayed\":\n        return [\n          \"Small cracks appear in your moral foundation.\",\n          \"You occasionally have dark thoughts you never had before.\",\n          \"Other dragons notice you seem more irritable lately.\"\n        ];\n      case \"Twisted\":\n        return [\n          \"Your sense of right and wrong becomes murky.\",\n          \"You find yourself enjoying others' pain.\",\n          \"Friends begin to avoid you, sensing something wrong.\",\n          \"You actively seek ways to gain power over others.\"\n        ];\n      case \"Broken\":\n        return [\n          \"Your soul is beyond redemption.\",\n          \"Cruelty and manipulation feel natural and right.\",\n          \"You actively seek to corrupt other dragons.\",\n          \"The AI will increasingly make choices for you.\",\n          \"Your original personality is almost completely gone.\"\n        ];\n    }\n  }\n\n  static getCorruptionBehavior(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): {\n    aiControlChance: number;\n    corruptionChoiceBonus: number;\n    relationshipPenalty: number;\n  } {\n    switch (stage) {\n      case \"Normal\":\n        return { aiControlChance: 0, corruptionChoiceBonus: 0, relationshipPenalty: 0 };\n      case \"Frayed\":\n        return { aiControlChance: 0.05, corruptionChoiceBonus: 0.1, relationshipPenalty: -2 };\n      case \"Twisted\":\n        return { aiControlChance: 0.1, corruptionChoiceBonus: 0.2, relationshipPenalty: -8 };\n      case \"Broken\":\n        return { aiControlChance: 0.2, corruptionChoiceBonus: 0.3, relationshipPenalty: -15 };\n    }\n  }\n\n  static shouldAITakeControl(character: Character): boolean {\n    // AI only takes control when soul is under 5%\n    if (character.soulPercentage > 5) return false;\n    \n    const stage = character.soulCorruptionStage;\n    const behavior = this.getCorruptionBehavior(stage);\n    return Math.random() < behavior.aiControlChance;\n  }\n\n  static getCorruptionVisualEffects(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): {\n    scaleColor: string;\n    eyeColor: string;\n    aura: string;\n  } {\n    switch (stage) {\n      case \"Normal\":\n        return { scaleColor: \"natural\", eyeColor: \"bright\", aura: \"pure light\" };\n      case \"Frayed\":\n        return { scaleColor: \"slightly dulled\", eyeColor: \"flickering\", aura: \"dim shadows\" };\n      case \"Twisted\":\n        return { scaleColor: \"darkened edges\", eyeColor: \"cold and distant\", aura: \"creeping darkness\" };\n      case \"Broken\":\n        return { scaleColor: \"black veins throughout\", eyeColor: \"empty and void\", aura: \"consuming shadow\" };\n    }\n  }\n}\n\nexport function getMagicSpellsByType(type: MagicSpell[\"type\"]): MagicSpell[] {\n  return ENHANCED_MAGIC_SPELLS.filter(spell => spell.type === type);\n}\n\nexport function getMagicSpellsByCategory(category: MagicSpell[\"category\"]): MagicSpell[] {\n  return ENHANCED_MAGIC_SPELLS.filter(spell => spell.category === category);\n}\n\nexport function calculateSpellSoulCost(spell: MagicSpell): number {\n  const [min, max] = spell.soulCost;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","size_bytes":8200},"client/src/lib/game-engine.ts":{"content":"import { Character, GameData, Choice, GameEvent, Scenario } from \"@shared/schema\";\nimport { generateScenario, generateTimeInfo, generateLocation } from \"./scenario-generator-final\";\n\nexport class GameEngine {\n  static processChoice(\n    character: Character,\n    gameData: GameData,\n    choice: Choice,\n    scenario: Scenario\n  ): { newCharacter: Character; newGameData: GameData; event: GameEvent } {\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n\n    // Apply soul loss\n    if (choice.soulCost > 0) {\n      const actualSoulLoss = this.calculateSoulLoss(choice.soulCost);\n      newCharacter.soulPercentage = Math.max(0, character.soulPercentage - actualSoulLoss);\n    }\n\n    // Apply sanity changes (can be positive or negative)\n    if (choice.sanityCost !== 0) {\n      const actualSanityChange = this.calculateSanityChange(choice.sanityCost);\n      newCharacter.sanityPercentage = Math.max(0, Math.min(100, character.sanityPercentage - actualSanityChange));\n    }\n\n    // Create game event\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: choice.id,\n      consequences: choice.consequences,\n      soulLoss: choice.soulCost,\n      sanityLoss: choice.sanityCost\n    };\n\n    // Add to history\n    newGameData.history.push(event);\n    newGameData.turn += 1;\n\n    // Apply consequences\n    this.applyConsequences(choice.consequences, newCharacter, newGameData);\n\n    // Generate next scenario\n    newGameData.currentScenario = generateScenario(newCharacter, newGameData);\n    newGameData.timeInfo = generateTimeInfo(newCharacter);\n    \n    // Possibly change location\n    if (Math.random() < 0.3) {\n      newGameData.location = generateLocation();\n    }\n\n    return { newCharacter, newGameData, event };\n  }\n\n  private static calculateSoulLoss(baseCost: number): number {\n    // Add some randomness to soul loss (±20%)\n    const variance = baseCost * 0.2;\n    const actualCost = baseCost + (Math.random() - 0.5) * variance;\n    return Math.max(1, Math.round(actualCost));\n  }\n\n  private static calculateSanityChange(baseCost: number): number {\n    // Add some randomness to sanity changes (±15%)\n    const variance = baseCost * 0.15;\n    const actualCost = baseCost + (Math.random() - 0.5) * variance;\n    return Math.round(actualCost);\n  }\n\n  static checkGameOver(character: Character): { isGameOver: boolean; reason?: string } {\n    if (character.soulPercentage <= 0) {\n      return { isGameOver: true, reason: 'Your soul has been completely consumed by animus magic. You are no longer yourself.' };\n    }\n    \n    if (character.sanityPercentage <= 0) {\n      return { isGameOver: true, reason: 'Your mind has shattered under the weight of power and knowledge. You can no longer distinguish reality from madness.' };\n    }\n    \n    return { isGameOver: false };\n  }\n\n  private static applyConsequences(\n    consequences: string[],\n    character: Character,\n    gameData: GameData\n  ): void {\n    consequences.forEach(consequence => {\n      switch (consequence) {\n        case 'friendship_gain':\n          gameData.relationships['friend'] = (gameData.relationships['friend'] || 0) + 10;\n          break;\n        case 'magic_revealed':\n          gameData.reputation += 5;\n          break;\n        case 'disappointment':\n          gameData.relationships['friend'] = (gameData.relationships['friend'] || 0) - 5;\n          break;\n        case 'major_corruption':\n          // Corruption events have lasting effects\n          character.traits.push('Corrupted');\n          break;\n        case 'bully_confronted':\n          gameData.reputation += 3;\n          break;\n        case 'authority_involved':\n          gameData.relationships['teachers'] = (gameData.relationships['teachers'] || 0) + 5;\n          break;\n        // Add more consequence handlers as needed\n      }\n    });\n  }\n\n  static shouldAIIntervene(character: Character): boolean {\n    // AI starts intervening when soul drops below 70%\n    if (character.soulPercentage < 70) {\n      const corruptionLevel = (100 - character.soulPercentage) / 100;\n      return Math.random() < corruptionLevel * 0.3; // Increasing chance as corruption grows\n    }\n    return false;\n  }\n\n  static getAIChoice(character: Character, scenario: Scenario): Choice | null {\n    if (!this.shouldAIIntervene(character)) {\n      return null;\n    }\n\n    // AI prefers corrupted/dark choices when in control\n    const corruptedChoices = scenario.choices.filter(c => c.corruption || c.soulCost > 10);\n    if (corruptedChoices.length > 0) {\n      return corruptedChoices[Math.floor(Math.random() * corruptedChoices.length)];\n    }\n\n    // If no explicitly corrupted choices, pick randomly with bias toward higher soul cost\n    const weightedChoices = scenario.choices.map(choice => ({\n      choice,\n      weight: choice.soulCost + 1 // Higher soul cost = higher weight for AI\n    }));\n\n    const totalWeight = weightedChoices.reduce((sum, item) => sum + item.weight, 0);\n    let random = Math.random() * totalWeight;\n\n    for (const item of weightedChoices) {\n      random -= item.weight;\n      if (random <= 0) {\n        return item.choice;\n      }\n    }\n\n    return scenario.choices[0]; // Fallback\n  }\n\n  static getCorruptionLevel(soulPercentage: number): 'pure' | 'tainted' | 'corrupted' | 'lost' {\n    if (soulPercentage >= 80) return 'pure';\n    if (soulPercentage >= 50) return 'tainted';\n    if (soulPercentage >= 20) return 'corrupted';\n    return 'lost';\n  }\n\n  static getCorruptionMessage(level: 'pure' | 'tainted' | 'corrupted' | 'lost'): string {\n    switch (level) {\n      case 'pure':\n        return \"Your soul shines with pure light.\";\n      case 'tainted':\n        return \"Dark thoughts occasionally cloud your mind...\";\n      case 'corrupted':\n        return \"Malevolent whispers echo in your thoughts.\";\n      case 'lost':\n        return \"The darkness has consumed you. You are no longer in control.\";\n    }\n  }\n}\n","size_bytes":5948},"client/src/lib/hybrid-generator.ts":{"content":"import { Character } from \"@shared/schema\";\n\nconst TRIBES = [\n  \"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\",\n  \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"\n];\n\nconst TRIBAL_POWERS = {\n  MudWing: [\"Fire resistance\", \"Mud camouflage\", \"Enhanced strength when warm\"],\n  SandWing: [\"Venomous tail barb\", \"Desert survival\", \"Heat resistance\"],\n  SkyWing: [\"Superior flight speed\", \"Fire breathing\", \"High altitude adaptation\"],\n  SeaWing: [\"Underwater breathing\", \"Bioluminescent scales\", \"Deep sea pressure resistance\"],\n  IceWing: [\"Frost breath\", \"Cold immunity\", \"Serrated claws\"],\n  RainWing: [\"Color-changing scales\", \"Acidic venom\", \"Prehensile tail\"],\n  NightWing: [\"Future sight\", \"Mind reading\", \"Fire breathing\"],\n  SilkWing: [\"Silk production\", \"Metamorphosis\", \"Enhanced agility\"],\n  HiveWing: [\"Paralytic stinger\", \"Hive mind connection\", \"Toxic breath\"],\n  LeafWing: [\"Plant manipulation\", \"Leaf speak\", \"Photosynthesis healing\"]\n};\n\nexport function generateHybridDragon(): Partial<Character> {\n  // 25% chance to be hybrid (increased for more variety)\n  if (Math.random() > 0.25) {\n    return {};\n  }\n\n  const hybridTribes = [];\n  const primaryTribe = TRIBES[Math.floor(Math.random() * TRIBES.length)];\n  hybridTribes.push(primaryTribe);\n\n  // Add 1-2 more tribes (80% chance for 2 tribes, 20% chance for 3 tribes)\n  const numAdditionalTribes = Math.random() < 0.8 ? 1 : 2;\n  for (let i = 0; i < numAdditionalTribes; i++) {\n    let secondaryTribe;\n    do {\n      secondaryTribe = TRIBES[Math.floor(Math.random() * TRIBES.length)];\n    } while (hybridTribes.includes(secondaryTribe));\n    hybridTribes.push(secondaryTribe);\n  }\n\n  // Combine powers from all tribes - more generous for hybrids\n  const combinedPowers: string[] = [];\n  hybridTribes.forEach((tribe, index) => {\n    const tribePowers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS];\n    // Primary tribe gets 2-3 powers, secondary tribes get 1-2 powers\n    const numPowers = index === 0 ? \n      Math.floor(Math.random() * 2) + 2 : \n      Math.floor(Math.random() * 2) + 1;\n    \n    // Shuffle and select powers to avoid always getting the same ones\n    const shuffledPowers = [...tribePowers].sort(() => Math.random() - 0.5);\n    for (let i = 0; i < Math.min(numPowers, shuffledPowers.length); i++) {\n      const power = shuffledPowers[i];\n      if (!combinedPowers.includes(power)) {\n        combinedPowers.push(power);\n      }\n    }\n  });\n\n  return {\n    hybridTribes,\n    tribalPowers: combinedPowers,\n    // Hybrids get slight stat bonuses due to genetic diversity\n    strength: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    intelligence: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    charisma: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    wisdom: Math.min(95, Math.floor(Math.random() * 20) + 60),\n  };\n}\n\nexport function getHybridDisplayName(character: Character): string {\n  if (!character.hybridTribes || character.hybridTribes.length === 0) {\n    return character.tribe;\n  }\n  \n  if (character.hybridTribes.length === 2) {\n    return `${character.hybridTribes[0]}/${character.hybridTribes[1]} Hybrid`;\n  } else if (character.hybridTribes.length === 3) {\n    return `${character.hybridTribes[0]}/${character.hybridTribes[1]}/${character.hybridTribes[2]} Hybrid`;\n  }\n  \n  return `Multi-Tribe Hybrid`;\n}\n\nexport function getHybridPowerDescription(character: Character): string[] {\n  if (!character.hybridTribes || character.hybridTribes.length === 0) {\n    return [];\n  }\n\n  const descriptions = [];\n  descriptions.push(`This dragon carries the blood of ${character.hybridTribes.length} different tribes.`);\n  descriptions.push(`Primary heritage: ${character.hybridTribes[0]}`);\n  \n  if (character.hybridTribes.length > 1) {\n    descriptions.push(`Secondary heritage: ${character.hybridTribes.slice(1).join(\", \")}`);\n  }\n  \n  descriptions.push(\"Their mixed bloodline grants them access to diverse tribal abilities, but they may face acceptance challenges in pure-blood communities.\");\n  \n  return descriptions;\n}","size_bytes":4052},"client/src/lib/massive-scenarios.ts":{"content":"import { Character, GameData } from \"@shared/schema\";\n\ninterface ScenarioTemplate {\n  id: string;\n  title: string;\n  description: string;\n  narrativeText: string[];\n  choices: ChoiceTemplate[];\n  type: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic';\n  requirements?: (character: Character, gameData: GameData) => boolean;\n}\n\ninterface ChoiceTemplate {\n  id: string;\n  text: string;\n  description: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  requirements?: (character: Character) => boolean;\n  corruption?: boolean;\n}\n\n// Base scenario categories\nconst MAGICAL_SCENARIOS: ScenarioTemplate[] = [\n  {\n    id: 'broken_jewelry',\n    title: 'The Broken Bracelet',\n    description: 'A friend asks you to repair their precious jewelry',\n    narrativeText: [\n      'The morning sun filters through the crystal windows of your cave, casting dancing rainbows across the stone walls.',\n      'Your clawmate approaches nervously, carrying a broken golden bracelet.',\n      '\"Please... I know what you can do. Could you fix this? It\\'s all I have left of my sister.\"'\n    ],\n    choices: [\n      {\n        id: 'repair_jewelry',\n        text: 'Use animus magic to repair it',\n        description: 'Risk: Small soul loss • High friendship gain',\n        soulCost: 2,\n        sanityCost: 0,\n        consequences: ['friendship_gain', 'magic_revealed'],\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'refuse_help',\n        text: 'Refuse and suggest a jeweler',\n        description: 'No risk • Possible disappointment',\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: ['disappointment', 'secret_kept'],\n      },\n      {\n        id: 'corrupt_jewelry',\n        text: 'Enchant it to spy on others',\n        description: 'Risk: Major soul loss • Corruption',\n        soulCost: 12,\n        sanityCost: 15,\n        consequences: ['major_corruption', 'spy_network'],\n        corruption: true,\n        requirements: (character) => character.isAnimus,\n      }\n    ],\n    type: 'magical'\n  },\n  \n  {\n    id: 'weather_control',\n    title: 'Storm Troubles',\n    description: 'A terrible storm threatens the academy',\n    narrativeText: [\n      'Dark clouds gather ominously over Jade Mountain Academy. Lightning splits the sky with increasing frequency.',\n      'Students huddle in the caves, fearful as the storm grows more violent.',\n      'You realize your animus magic could easily dispel this weather... but at what cost?'\n    ],\n    choices: [\n      {\n        id: 'stop_storm',\n        text: 'Use magic to stop the storm',\n        description: 'Risk: Moderate soul loss • Hero status',\n        soulCost: 8,\n        sanityCost: 5,\n        consequences: ['hero_status', 'weather_control_known'],\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'redirect_storm',\n        text: 'Redirect storm to enemy territory',\n        description: 'Risk: Major soul loss • Potential harm to others',\n        soulCost: 15,\n        sanityCost: 20,\n        consequences: ['major_corruption', 'enemy_harm'],\n        corruption: true,\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'endure_storm',\n        text: 'Let the storm pass naturally',\n        description: 'No risk • Others may suffer',\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: ['guilt', 'natural_resolution'],\n      }\n    ],\n    type: 'magical'\n  }\n];\n\n// Generate thousands of mundane scenarios\nfunction generateMundaneScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const mundaneTemplates = [\n    {\n      title: 'Classroom Disruption',\n      description: 'A student is being disruptive during lessons',\n      baseNarrative: 'During history class, a fellow dragonet keeps interrupting the teacher with silly questions.',\n      choices: [\n        { text: 'Politely ask them to be quiet', sanityCost: 0, consequences: ['social_interaction'] },\n        { text: 'Ignore the disruption', sanityCost: 5, consequences: ['passive_approach'] },\n        { text: 'Report to the teacher', sanityCost: 0, consequences: ['authority_involvement'] },\n        { text: 'Join in the disruption', sanityCost: 0, consequences: ['rebellious_behavior'] }\n      ]\n    },\n    {\n      title: 'Lost Item',\n      description: 'You\\'ve lost something important',\n      baseNarrative: 'You realize you\\'ve misplaced your favorite scroll.',\n      choices: [\n        { text: 'Search systematically', sanityCost: 0, consequences: ['methodical_approach'] },\n        { text: 'Ask friends for help', sanityCost: 0, consequences: ['social_support'] },\n        { text: 'Give up and get a new one', sanityCost: 5, consequences: ['easy_solution'] },\n        { text: 'Panic and search frantically', sanityCost: 10, consequences: ['stress_response'] }\n      ]\n    },\n    {\n      title: 'Food Choice',\n      description: 'Deciding what to eat at the prey center',\n      baseNarrative: 'The prey center offers various options today.',\n      choices: [\n        { text: 'Choose your favorite', sanityCost: 0, consequences: ['personal_preference'] },\n        { text: 'Try something new', sanityCost: 0, consequences: ['adventurous_eating'] },\n        { text: 'Share with a friend', sanityCost: 0, consequences: ['generosity'] },\n        { text: 'Hoard extra food', sanityCost: 0, consequences: ['selfish_behavior'] }\n      ]\n    },\n    {\n      title: 'Study Group',\n      description: 'Joining or avoiding study sessions',\n      baseNarrative: 'Other dragonets invite you to join their study group.',\n      choices: [\n        { text: 'Join enthusiastically', sanityCost: 0, consequences: ['academic_cooperation'] },\n        { text: 'Join reluctantly', sanityCost: 5, consequences: ['forced_participation'] },\n        { text: 'Politely decline', sanityCost: 0, consequences: ['independent_study'] },\n        { text: 'Make an excuse', sanityCost: 5, consequences: ['avoidance_behavior'] }\n      ]\n    },\n    {\n      title: 'Cave Cleaning',\n      description: 'Your sleeping cave needs organization',\n      baseNarrative: 'Your personal cave has become quite messy.',\n      choices: [\n        { text: 'Clean it thoroughly', sanityCost: 0, consequences: ['organization'] },\n        { text: 'Do a quick tidy', sanityCost: 0, consequences: ['minimal_effort'] },\n        { text: 'Ask a friend to help', sanityCost: 0, consequences: ['collaborative_cleaning'] },\n        { text: 'Leave it messy', sanityCost: 5, consequences: ['laziness'] }\n      ]\n    }\n  ];\n  \n  // Generate 200+ mundane scenarios with variations\n  for (let i = 0; i < mundaneTemplates.length; i++) {\n    const template = mundaneTemplates[i];\n    \n    // Create 50 variations of each template\n    for (let variation = 0; variation < 50; variation++) {\n      const scenarioId = `${template.title.toLowerCase().replace(/\\s+/g, '_')}_${variation}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${variation + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          `Variation ${variation + 1}: ${generateVariationText()}`\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n        })),\n        type: 'mundane'\n      });\n    }\n  }\n  \n  return scenarios;\n}\n\n// Generate tribal power scenarios\nfunction generateTribalScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const tribalTemplates = [\n    {\n      tribe: 'NightWing',\n      title: 'Mind Reading Opportunity',\n      description: 'You could use your mind reading to gain advantage',\n      baseNarrative: 'A dragon approaches with hidden intentions.',\n      choices: [\n        { text: 'Read their mind', sanityCost: 10, consequences: ['invasion_privacy'], requirement: 'Enhanced Mind Reading' },\n        { text: 'Trust your instincts', sanityCost: 0, consequences: ['natural_intuition'] },\n        { text: 'Ask them directly', sanityCost: 0, consequences: ['honest_communication'] }\n      ]\n    },\n    {\n      tribe: 'SeaWing',\n      title: 'Underwater Rescue',\n      description: 'Someone is drowning and you can help',\n      baseNarrative: 'A dragon has fallen into the deep lake.',\n      choices: [\n        { text: 'Dive in and rescue them', sanityCost: 0, consequences: ['heroic_rescue'], requirement: 'Underwater breathing' },\n        { text: 'Get help from others', sanityCost: 5, consequences: ['seek_assistance'] },\n        { text: 'Throw them something to grab', sanityCost: 0, consequences: ['practical_solution'] }\n      ]\n    },\n    {\n      tribe: 'RainWing',\n      title: 'Venom Threat',\n      description: 'A dangerous situation where venom could solve problems',\n      baseNarrative: 'A predator threatens your friends.',\n      choices: [\n        { text: 'Use venom to defend', sanityCost: 15, consequences: ['violence'], requirement: 'Deadly venom spit' },\n        { text: 'Use camouflage to hide', sanityCost: 0, consequences: ['stealth_approach'], requirement: 'Color-changing scales' },\n        { text: 'Find another way', sanityCost: 5, consequences: ['peaceful_solution'] }\n      ]\n    }\n  ];\n  \n  // Generate variations for each tribe\n  tribalTemplates.forEach((template, templateIndex) => {\n    for (let i = 0; i < 100; i++) {\n      const scenarioId = `tribal_${template.tribe.toLowerCase()}_${templateIndex}_${i}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${i + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          generateVariationText()\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n          requirements: choice.requirement ? \n            (character) => character.tribalPowers.includes(choice.requirement!) || character.specialPowers.includes(choice.requirement!) \n            : undefined\n        })),\n        type: 'tribal',\n        requirements: (character) => character.tribe === template.tribe\n      });\n    }\n  });\n  \n  return scenarios;\n}\n\n// Generate prophetic scenarios\nfunction generatePropheticScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const prophecyTemplates = [\n    {\n      title: 'Vision of Danger',\n      description: 'You see a future disaster',\n      baseNarrative: 'A vision floods your mind - danger approaches the academy.',\n      choices: [\n        { text: 'Warn everyone immediately', sanityCost: 0, consequences: ['prophecy_revealed'] },\n        { text: 'Investigate the vision first', sanityCost: 5, consequences: ['careful_investigation'] },\n        { text: 'Try to prevent it secretly', sanityCost: 10, consequences: ['secret_intervention'] },\n        { text: 'Ignore the vision', sanityCost: 20, consequences: ['ignored_prophecy'] }\n      ]\n    },\n    {\n      title: 'Future Choice Vision',\n      description: 'You see the consequences of different paths',\n      baseNarrative: 'Multiple possible futures flash before your eyes.',\n      choices: [\n        { text: 'Follow the path to success', sanityCost: 0, consequences: ['guided_by_prophecy'] },\n        { text: 'Choose differently to test fate', sanityCost: 15, consequences: ['defying_fate'] },\n        { text: 'Let others choose their path', sanityCost: 5, consequences: ['free_will_respected'] }\n      ]\n    }\n  ];\n  \n  prophecyTemplates.forEach((template, templateIndex) => {\n    for (let i = 0; i < 50; i++) {\n      const scenarioId = `prophecy_${templateIndex}_${i}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${i + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          generatePropheticVariation()\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n        })),\n        type: 'prophetic',\n        requirements: (character) => \n          character.specialPowers.includes('Foresight') || \n          character.specialPowers.includes('Enhanced Prophecy') ||\n          character.tribalPowers.includes('Prophecy (rare)')\n      });\n    }\n  });\n  \n  return scenarios;\n}\n\nfunction generateVariationText(): string {\n  const variations = [\n    'The situation feels familiar yet different.',\n    'Something about this reminds you of a story you heard.',\n    'The other dragons seem unusually tense today.',\n    'You notice small details others might miss.',\n    'The timing couldn\\'t be more important.',\n    'Your instincts tell you this matters more than it seems.',\n    'You remember advice from your parents.',\n    'The consequences could be far-reaching.',\n    'Other students are watching your reaction.',\n    'You feel the weight of responsibility.'\n  ];\n  \n  return variations[Math.floor(Math.random() * variations.length)];\n}\n\nfunction generatePropheticVariation(): string {\n  const prophetic = [\n    'The vision is crystal clear and frightening.',\n    'Images flash rapidly through your consciousness.',\n    'You see multiple timelines converging.',\n    'The future feels malleable, changeable.',\n    'Dark possibilities cloud your sight.',\n    'Hope and despair battle in your vision.',\n    'Time seems to slow as understanding dawns.',\n    'The weight of foreknowledge burdens you.',\n    'Fate and free will dance before your eyes.',\n    'The vision fades, leaving urgent purpose.'\n  ];\n  \n  return prophetic[Math.floor(Math.random() * prophetic.length)];\n}\n\n// Combine all scenarios\nexport function getAllScenarios(): ScenarioTemplate[] {\n  return [\n    ...MAGICAL_SCENARIOS,\n    ...generateMundaneScenarios(),\n    ...generateTribalScenarios(), \n    ...generatePropheticScenarios()\n  ];\n}\n\nexport { ScenarioTemplate, ChoiceTemplate };","size_bytes":14411},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/scenario-generator-final.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\nimport { InventorySystem } from \"./inventory-system\";\n\ninterface ScenarioData {\n  id: string;\n  type: 'NORMAL' | 'MINDREADING' | 'LEARNING' | 'WARS' | 'ANIMUS' | 'PROPHECY';\n  text: string;\n  requirements?: (character: Character) => boolean;\n}\n\n// All 1000+ unique scenarios from the text file\nconst SCENARIO_DATABASE: ScenarioData[] = [\n  { id: \"friendship_offer\", type: \"NORMAL\", text: \"A dragon offers friendship. Do you accept or push them away?\" },\n  { id: \"mindreading_noise\", type: \"MINDREADING\", text: \"You hear multiple thoughts at once. Do you focus or retreat from the noise?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"battle_tactics\", type: \"LEARNING\", text: \"You overhear advanced battle tactics. Do you learn them or forget?\" },\n  { id: \"feast_invitation\", type: \"NORMAL\", text: \"You are invited to a feast. Do you join, decline, or sneak away?\" },\n  { id: \"skywing_tribute\", type: \"WARS\", text: \"The SkyWings demand tribute from your village. Do you resist or submit?\" },\n  { id: \"forest_herbs\", type: \"NORMAL\", text: \"You wander into a forest and find rare herbs. Do you collect or leave them?\" },\n  { id: \"immortality_request\", type: \"ANIMUS\", text: \"A dragon asks you to enchant them immortal. Do you grant their wish or refuse?\", requirements: (c) => c.isAnimus },\n  { id: \"ancient_spells_study\", type: \"ANIMUS\", text: \"You are offered a chance to study ancient animus spells. Do you risk it?\", requirements: (c) => c.isAnimus },\n  { id: \"darkstalker_dream\", type: \"ANIMUS\", text: \"Darkstalker himself appears in a dream, offering you forbidden knowledge. Do you accept or reject it?\", requirements: (c) => c.isAnimus },\n  { id: \"ancient_object\", type: \"ANIMUS\", text: \"You find an ancient object. Do you enchant it for power, wealth, or protection?\", requirements: (c) => c.isAnimus },\n  { id: \"betrayal_prophecy\", type: \"PROPHECY\", text: \"You are told you will betray a friend. Do you cut ties now or wait?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"attack_innocents\", type: \"WARS\", text: \"Your commander orders you to attack innocents. Do you obey or disobey?\" },\n  { id: \"difficult_question\", type: \"LEARNING\", text: \"A teacher asks you a difficult question. Do you guess or admit ignorance?\" },\n  { id: \"other_territory\", type: \"NORMAL\", text: \"You visit another tribe's territory. Do you explore or leave quickly?\" },\n  { id: \"secret_prophecy_class\", type: \"LEARNING\", text: \"You stumble into a secret class about prophecy. Do you stay or leave?\" },\n  { id: \"secret_love\", type: \"MINDREADING\", text: \"You discover someone loves you secretly. Do you return the feeling or not?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"romantic_dance\", type: \"NORMAL\", text: \"At the tribal dance, an attractive dragon asks you to be their partner. Do you accept?\" },\n  { id: \"courtship_gift\", type: \"NORMAL\", text: \"A dragon presents you with a beautiful gift, clearly showing romantic interest. How do you respond?\" },\n  { id: \"mate_proposal\", type: \"NORMAL\", text: \"A dragon you've grown close to asks to become your mate. Do you accept their proposal?\", requirements: (c) => c.age >= 5 },\n  { id: \"jealous_rival\", type: \"NORMAL\", text: \"Another dragon is jealous of your romantic relationship and confronts you. How do you handle it?\" },\n  { id: \"romantic_confession\", type: \"NORMAL\", text: \"Under the starlight, you feel compelled to confess your feelings to someone special. Do you?\" },\n  { id: \"death_prophecy\", type: \"PROPHECY\", text: \"A seer whispers a prophecy involving your death. Do you seek to avoid it or embrace destiny?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"tribe_battle\", type: \"WARS\", text: \"Your tribe prepares for battle. Do you fight, negotiate, or flee?\" },\n  { id: \"war_turns_bad\", type: \"WARS\", text: \"The war turns against your side. Do you retreat, rally, or betray your allies?\" },\n  { id: \"animus_discovery\", type: \"ANIMUS\", text: \"A tribe discovers you're animus. Do you hide your powers or reveal them?\", requirements: (c) => c.isAnimus },\n  { id: \"dark_thoughts_friend\", type: \"MINDREADING\", text: \"You overhear dark thoughts from your closest friend. Do you confront them or stay silent?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"save_pyrrhia\", type: \"PROPHECY\", text: \"A prophecy declares you will save Pyrrhia. Do you believe it or not?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"captured_by_enemies\", type: \"WARS\", text: \"You are captured by enemy dragons. Do you plan escape, spy, or accept fate?\" },\n  { id: \"burnt_prophecy\", type: \"PROPHECY\", text: \"You discover a scroll with half-burnt prophecy. Do you try to finish it?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"soul_weakening\", type: \"ANIMUS\", text: \"You feel your soul weaken after casting a spell. Do you continue or stop using animus magic?\", requirements: (c) => c.isAnimus },\n  { id: \"negotiations_lie\", type: \"MINDREADING\", text: \"You sense someone lying during negotiations. Do you expose them or keep quiet?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"hatchling_story\", type: \"NORMAL\", text: \"A hatchling asks for your story. Do you tell the truth or lie?\" },\n  { id: \"betrayal_thought\", type: \"MINDREADING\", text: \"A dragon thinks about betraying you. Do you act first or wait?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"prophecy_fulfillment\", type: \"PROPHECY\", text: \"Your actions today will fulfill a prophecy. Do you act boldly or carefully?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"hidden_scroll\", type: \"LEARNING\", text: \"You find a hidden scroll in a library. Do you read or ignore it?\" },\n  \n  // Additional advanced scenarios\n  { id: \"animus_temptation_power\", type: \"ANIMUS\", text: \"An easy magical solution to your problems tempts you. Do you give in to temptation?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_reading_ethics\", type: \"MINDREADING\", text: \"You could read someone's mind to solve a mystery. Do you invade their privacy?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"prophecy_warning\", type: \"PROPHECY\", text: \"You see a vision of disaster coming. Do you warn others or stay silent?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"war_refugee\", type: \"WARS\", text: \"War refugees seek shelter in your territory. Do you help them or turn them away?\" },\n  { id: \"forbidden_knowledge\", type: \"LEARNING\", text: \"You discover forbidden knowledge that could be dangerous. Do you study it or destroy it?\" },\n  { id: \"tribal_politics\", type: \"NORMAL\", text: \"A political scandal rocks your tribe. Do you get involved or stay neutral?\" },\n  { id: \"magical_artifact\", type: \"ANIMUS\", text: \"You find a powerful magical artifact. Do you claim it, leave it, or destroy it?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_link\", type: \"MINDREADING\", text: \"Another mind reader tries to establish a mental link. Do you accept or resist?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"future_vision\", type: \"PROPHECY\", text: \"You see multiple possible futures. Do you try to influence them or let fate decide?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"war_crimes\", type: \"WARS\", text: \"You witness war crimes being committed by your own side. Do you report them or stay silent?\" },\n  \n  // Expanding scenarios for better variety\n  { id: \"enchanted_item_request\", type: \"ANIMUS\", text: \"A desperate parent asks you to enchant an item to save their dragonet. Do you help despite the soul cost?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_reading_addiction\", type: \"MINDREADING\", text: \"You find yourself addicted to reading minds. Do you seek help or continue in secret?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"prophecy_paradox\", type: \"PROPHECY\", text: \"Your prophecy creates a paradox - preventing it might cause it. Do you act or wait?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"war_alliance\", type: \"WARS\", text: \"A former enemy offers an alliance against a greater threat. Do you trust them?\" },\n  { id: \"dangerous_experiment\", type: \"LEARNING\", text: \"A teacher offers to show you a dangerous but enlightening experiment. Do you participate?\" },\n  { id: \"social_outcast\", type: \"NORMAL\", text: \"A socially outcast dragon approaches you for friendship. Do you accept them?\" },\n  { id: \"power_corruption\", type: \"ANIMUS\", text: \"Your animus powers are slowly corrupting your thoughts. Do you seek help or hide it?\", requirements: (c) => c.isAnimus },\n  { id: \"mental_scream\", type: \"MINDREADING\", text: \"You hear someone's mental scream of anguish. Do you investigate or ignore it?\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"prophecy_burden\", type: \"PROPHECY\", text: \"The weight of knowing the future is crushing you. Do you share the burden or bear it alone?\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n  { id: \"civilian_casualties\", type: \"WARS\", text: \"Your military action would save soldiers but harm civilians. Do you proceed?\" },\n  \n  // More varied scenarios for depth\n  { id: \"academy_mystery\", type: \"NORMAL\", text: \"Strange disappearances occur at the academy. Do you investigate or focus on your studies?\" },\n  { id: \"rival_challenge\", type: \"NORMAL\", text: \"A rival dragon challenges you to a contest. Do you accept, decline, or propose different terms?\" },\n  { id: \"family_secret\", type: \"NORMAL\", text: \"You discover a dark secret about your family. Do you confront them or keep quiet?\" },\n  { id: \"natural_disaster\", type: \"NORMAL\", text: \"An earthquake traps several dragons. Do you help with rescue efforts or evacuate?\" },\n  { id: \"cultural_festival\", type: \"NORMAL\", text: \"Different tribes gather for a cultural festival. Do you participate, observe, or avoid it?\" },\n  { id: \"medical_emergency\", type: \"NORMAL\", text: \"A dragon collapses with an unknown illness. Do you help, seek medical aid, or keep distance?\" },\n  { id: \"artistic_expression\", type: \"NORMAL\", text: \"You're asked to create art depicting recent tragic events. Do you create it, refuse, or suggest alternatives?\" },\n  { id: \"food_shortage\", type: \"NORMAL\", text: \"Food becomes scarce in your area. Do you share your supplies, hoard them, or seek new sources?\" },\n  { id: \"technological_discovery\", type: \"LEARNING\", text: \"You discover advanced technology from the distant past. Do you study it, report it, or hide it?\" },\n  { id: \"diplomatic_mission\", type: \"NORMAL\", text: \"You're chosen for a diplomatic mission to a hostile tribe. Do you accept, decline, or suggest someone else?\" },\n  \n  // More animus-specific scenarios\n  { id: \"magic_addiction\", type: \"ANIMUS\", text: \"Using animus magic becomes easier each time, but more tempting. Do you set limits or embrace the power?\", requirements: (c) => c.isAnimus },\n  { id: \"enchantment_backfire\", type: \"ANIMUS\", text: \"One of your enchantments goes wrong and causes harm. Do you fix it, hide it, or confess?\", requirements: (c) => c.isAnimus },\n  { id: \"magic_teacher\", type: \"ANIMUS\", text: \"Another animus offers to teach you advanced techniques. Do you accept despite the risks?\", requirements: (c) => c.isAnimus },\n  { id: \"soul_fragment\", type: \"ANIMUS\", text: \"You sense you're losing pieces of your soul to magic. Do you try to reclaim them or accept the loss?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_hunter\", type: \"ANIMUS\", text: \"Someone is hunting animus dragons. Do you hide, fight back, or try to reason with them?\", requirements: (c) => c.isAnimus },\n  { id: \"magical_plague\", type: \"ANIMUS\", text: \"A magical plague spreads and only you can stop it. Do you risk everything to save others?\", requirements: (c) => c.isAnimus },\n  { id: \"reality_break\", type: \"ANIMUS\", text: \"Your magic tears a hole in reality itself. Do you try to fix it or explore what lies beyond?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_council\", type: \"ANIMUS\", text: \"A secret council of animus dragons invites you to join. Do you accept or maintain independence?\", requirements: (c) => c.isAnimus },\n  { id: \"power_transfer\", type: \"ANIMUS\", text: \"You could transfer your animus powers to someone else. Do you consider it or keep them?\", requirements: (c) => c.isAnimus },\n  { id: \"temporal_magic\", type: \"ANIMUS\", text: \"You discover you can manipulate time with magic. Do you experiment or fear the consequences?\", requirements: (c) => c.isAnimus },\n  \n  // More extensive original scenarios from attached files\n  { id: \"animus_first_power\", type: \"ANIMUS\", text: \"You discover your Animus power for the first time in a heated battle. Do you embrace the power or fear it?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_backfire\", type: \"ANIMUS\", text: \"Your Animus power suddenly backfires during a fight. Do you retreat to recover or push through?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_healing\", type: \"ANIMUS\", text: \"You must heal an ally with Animus magic without harming them. Do you attempt it or find another way?\", requirements: (c) => c.isAnimus },\n  { id: \"magical_barrier\", type: \"ANIMUS\", text: \"You're tasked with breaking a magical barrier using your powers. Do you analyze it first or strike immediately?\", requirements: (c) => c.isAnimus },\n  { id: \"energy_drain\", type: \"ANIMUS\", text: \"Your Animus power begins draining your energy rapidly. Do you stop using it or risk fainting?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_duel\", type: \"ANIMUS\", text: \"A fellow Animus dragon challenges you to a duel. Do you accept or decline?\", requirements: (c) => c.isAnimus },\n  { id: \"stolen_magic\", type: \"ANIMUS\", text: \"A dragon steals your Animus magic temporarily. Do you track them down or wait for it to return?\", requirements: (c) => c.isAnimus },\n  { id: \"child_animus\", type: \"ANIMUS\", text: \"A child dragon shows signs of Animus magic. Do you train them or report them to authorities?\", requirements: (c) => c.isAnimus },\n  { id: \"accidental_break\", type: \"ANIMUS\", text: \"You accidentally break something important using Animus magic. Do you repair it or confess?\", requirements: (c) => c.isAnimus },\n  { id: \"storm_magic\", type: \"ANIMUS\", text: \"Your Animus powers glow uncontrollably during a storm. Do you seek shelter or harness the power?\", requirements: (c) => c.isAnimus },\n  { id: \"defend_village\", type: \"ANIMUS\", text: \"You must use Animus magic to defend a village from invaders. Do you use lethal or non-lethal force?\", requirements: (c) => c.isAnimus },\n  { id: \"ancient_artifact\", type: \"ANIMUS\", text: \"An ancient artifact enhances your Animus powers, but at a cost. Do you use it anyway?\", requirements: (c) => c.isAnimus },\n  { id: \"forbidden_technique\", type: \"ANIMUS\", text: \"You discover a forbidden Animus technique. Do you study it or destroy the knowledge?\", requirements: (c) => c.isAnimus },\n  { id: \"dangerous_attention\", type: \"ANIMUS\", text: \"Your Animus magic attracts dangerous attention. Do you hide your powers or face the threat?\", requirements: (c) => c.isAnimus },\n  { id: \"hit_friend\", type: \"ANIMUS\", text: \"You accidentally hit a friend with Animus magic. Do you help them heal or run away?\", requirements: (c) => c.isAnimus },\n  { id: \"prophecy_magic\", type: \"ANIMUS\", text: \"Your Animus power interacts strangely with a prophecy. Do you study the connection or ignore it?\", requirements: (c) => c.isAnimus },\n  { id: \"secret_teacher\", type: \"ANIMUS\", text: \"A mysterious dragon offers to teach you a secret Animus ability. Do you accept or decline?\", requirements: (c) => c.isAnimus },\n  { id: \"dream_magic\", type: \"ANIMUS\", text: \"Your Animus magic starts affecting dreams. Do you learn to control it or let it happen?\", requirements: (c) => c.isAnimus },\n  \n  // Wars and battles scenarios  \n  { id: \"skywing_tribute\", type: \"WARS\", text: \"The SkyWings demand tribute from your village. Do you resist or submit?\" },\n  { id: \"battle_preparation\", type: \"WARS\", text: \"Your tribe prepares for a major battle. Do you volunteer to fight on the front lines?\" },\n  { id: \"enemy_spy\", type: \"WARS\", text: \"You suspect someone in your tribe is a spy. Do you investigate or report your suspicions?\" },\n  { id: \"war_prisoner\", type: \"WARS\", text: \"You're tasked with guarding war prisoners. Do you treat them kindly or strictly?\" },\n  { id: \"deserter_friend\", type: \"WARS\", text: \"Your friend deserts from the army. Do you help them escape or turn them in?\" },\n  { id: \"civilian_evacuation\", type: \"WARS\", text: \"Civilians need evacuation from a war zone. Do you help or focus on military objectives?\" },\n  { id: \"peace_treaty\", type: \"WARS\", text: \"A peace treaty is offered by the enemy. Do you support it or advocate for continued fighting?\" },\n  { id: \"wounded_enemy\", type: \"WARS\", text: \"You find a wounded enemy soldier. Do you help them, capture them, or leave them?\" },\n  \n  // Mind reading scenarios\n  { id: \"overwhelming_thoughts\", type: \"MINDREADING\", text: \"You're overwhelmed by multiple thoughts at once. Do you focus on one or retreat mentally?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"parents_secret\", type: \"MINDREADING\", text: \"You accidentally read your parents' deepest secret. Do you confront them or pretend you don't know?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"teacher_doubts\", type: \"MINDREADING\", text: \"You sense your teacher doubts your abilities. Do you work harder or ask them directly?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"love_confession\", type: \"MINDREADING\", text: \"You hear someone thinking about confessing love to you. Do you make it easier or act surprised?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"danger_warning\", type: \"MINDREADING\", text: \"You sense danger in someone's thoughts. Do you warn others or investigate yourself?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"mind_reader_meeting\", type: \"MINDREADING\", text: \"You meet another mind reader. Do you try to communicate telepathically or keep your abilities hidden?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  \n  // Prophecy scenarios\n  { id: \"cryptic_vision\", type: \"PROPHECY\", text: \"You have a cryptic vision that could mean many things. Do you act on it or seek interpretation?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"prevent_disaster\", type: \"PROPHECY\", text: \"Your vision shows a disaster you could prevent. Do you intervene or let fate take its course?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"prophecy_scroll\", type: \"PROPHECY\", text: \"You find an ancient prophecy scroll. Do you study it alone or share it with scholars?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"false_prophecy\", type: \"PROPHECY\", text: \"You realize one of your prophecies was false. Do you admit the mistake or stay silent?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  \n  // Learning and discovery scenarios\n  { id: \"ancient_library\", type: \"LEARNING\", text: \"You discover an ancient library with forbidden texts. Do you study them or report the find?\" },\n  { id: \"failed_experiment\", type: \"LEARNING\", text: \"A magical experiment fails spectacularly. Do you try to fix it or abandon the research?\" },\n  { id: \"rival_student\", type: \"LEARNING\", text: \"A rival student challenges your research. Do you defend your work or collaborate with them?\" },\n  { id: \"cheating_opportunity\", type: \"LEARNING\", text: \"You have an opportunity to cheat on an important test. Do you take it or study harder?\" },\n  { id: \"dangerous_knowledge\", type: \"LEARNING\", text: \"You learn something that could be dangerous in the wrong hands. Do you keep it secret or share wisely?\" },\n  \n  // Social and normal scenarios\n  { id: \"mysterious_stranger\", type: \"NORMAL\", text: \"A mysterious stranger arrives in town asking questions. Do you help them or stay suspicious?\" },\n  { id: \"lost_dragonet\", type: \"NORMAL\", text: \"You find a lost dragonet far from home. Do you return them personally or alert authorities?\" },\n  { id: \"talent_competition\", type: \"NORMAL\", text: \"There's a talent competition with a valuable prize. Do you compete or help a friend prepare?\" },\n  { id: \"tribal_ceremony\", type: \"NORMAL\", text: \"An important tribal ceremony requires volunteers. Do you participate or observe from afar?\" },\n  { id: \"merchant_deal\", type: \"NORMAL\", text: \"A merchant offers you a suspiciously good deal. Do you accept it or investigate first?\" },\n  { id: \"sick_dragon\", type: \"NORMAL\", text: \"A dragon in your community falls seriously ill. Do you help care for them or avoid infection?\" },\n  { id: \"family_dispute\", type: \"NORMAL\", text: \"A family dispute threatens to split your community. Do you mediate or stay neutral?\" },\n  { id: \"treasure_map\", type: \"NORMAL\", text: \"You find what appears to be a treasure map. Do you follow it alone or gather a group?\" },\n  { id: \"weather_disaster\", type: \"NORMAL\", text: \"A severe storm is coming. Do you help prepare the community or secure only your own belongings?\" },\n  { id: \"elder_request\", type: \"NORMAL\", text: \"A tribal elder asks you to carry out a mysterious task. Do you accept without question or ask for details?\" },\n  \n  // Special interactive scenarios that require specific modal interactions\n  { id: \"animus_scroll_request\", type: \"ANIMUS\", text: \"A desperate dragon begs you to create a scroll with infinite power to save their dying tribe. Will you risk your soul?\", requirements: (c) => c.isAnimus },\n  { id: \"mysterious_artifact\", type: \"NORMAL\", text: \"You discover a glowing artifact buried in ancient ruins. Its power is immense but unknown.\" },\n  { id: \"tribal_crisis\", type: \"NORMAL\", text: \"A crisis threatens your entire tribe and only swift action can save them. How do you respond?\" },\n  { id: \"mind_invasion\", type: \"MINDREADING\", text: \"Multiple minds are screaming in your head at once, overwhelming your senses.\", requirements: (c) => (c.tribalPowers || []).includes('Mind Reading') || (c.specialPowers || []).includes('Enhanced Mind Reading') },\n  { id: \"prophecy_paradox\", type: \"PROPHECY\", text: \"You see a prophecy where preventing it might actually cause it to happen.\", requirements: (c) => (c.tribalPowers || []).includes('Prophecy (rare)') || (c.specialPowers || []).includes('Foresight') || (c.specialPowers || []).includes('Enhanced Prophecy') },\n];\n\n// Additional choices for romance scenarios\nconst ROMANCE_CHOICES = [\n  {\n    id: \"romance_accept\",\n    text: \"Accept their romantic interest\",\n    description: \"Open your heart to this potential relationship\",\n    soulCost: 0,\n    sanityCost: 0,\n    consequences: [\"You decide to explore this romantic connection...\"]\n  },\n  {\n    id: \"romance_cautious\",\n    text: \"Be cautious but interested\", \n    description: \"Take things slowly and get to know them better\",\n    soulCost: 0,\n    sanityCost: 0,\n    consequences: [\"You choose to take a careful approach to romance...\"]\n  },\n  {\n    id: \"romance_reject\",\n    text: \"Politely decline\",\n    description: \"Thank them but explain you're not interested\",\n    soulCost: 0,\n    sanityCost: 2,\n    consequences: [\"You politely decline their romantic advances...\"]\n  }\n];\n\n// Specific choices for each unique scenario\nconst SCENARIO_SPECIFIC_CHOICES: Record<string, Choice[]> = {\n  // Animus Power Scenarios\n  animus_scroll_request: [\n    {\n      id: \"animus_scroll_request_create\",\n      text: \"Use Animus Magic to create the scroll\",\n      description: \"Grant their wish with powerful magic\",\n      soulCost: 10,\n      sanityCost: 0,\n      consequences: [\"You create a scroll of immense power, but at great cost to your soul...\"],\n      corruption: true,\n      requiresModal: \"animus\"\n    },\n    {\n      id: \"animus_scroll_request_refuse\",\n      text: \"Refuse their dangerous request\",\n      description: \"Explain the dangers of such powerful magic\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You wisely refuse, knowing the corruption such magic would bring.\"]\n    },\n    {\n      id: \"animus_scroll_request_compromise\",\n      text: \"Offer a lesser enchantment instead\",\n      description: \"Suggest something safer but still helpful\",\n      soulCost: 3,\n      sanityCost: 0,\n      consequences: [\"You offer a compromise - helpful magic without the devastating cost.\"]\n    }\n  ],\n\n  // Mind Reading Scenarios\n  secret_love: [\n    {\n      id: \"secret_love_read_deeper\",\n      text: \"Use Mind Reading to understand their feelings\",\n      description: \"Delve deeper into their thoughts about you\",\n      soulCost: 0,\n      sanityCost: 1,\n      consequences: [\"You explore their mind and discover the depth of their affection...\"],\n      requiresModal: \"mindreading\"\n    },\n    {\n      id: \"secret_love_reciprocate\",\n      text: \"Reveal that you share their feelings\",\n      description: \"Let them know you feel the same way\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You open your heart and confess your mutual feelings...\"]\n    },\n    {\n      id: \"secret_love_pretend\",\n      text: \"Pretend you don't know\",\n      description: \"Act as if you never heard their thoughts\",\n      soulCost: 0,\n      sanityCost: 2,\n      consequences: [\"You keep their secret, but the burden weighs on your mind...\"]\n    }\n  ],\n\n  // Prophecy Scenarios\n  death_prophecy: [\n    {\n      id: \"death_prophecy_investigate\",\n      text: \"Use Prophecy powers to see more\",\n      description: \"Try to understand the vision better\",\n      soulCost: 0,\n      sanityCost: 3,\n      consequences: [\"You peer deeper into the future, seeking clarity about your fate...\"],\n      requiresModal: \"prophecy\"\n    },\n    {\n      id: \"death_prophecy_accept\",\n      text: \"Accept your destiny with courage\",\n      description: \"Face whatever comes with bravery\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You embrace your fate, finding peace in acceptance...\"]\n    },\n    {\n      id: \"death_prophecy_defy\",\n      text: \"Defy the prophecy and change fate\",\n      description: \"Fight against the predicted outcome\",\n      soulCost: 0,\n      sanityCost: 4,\n      consequences: [\"You rebel against destiny itself, consequences unknown...\"]\n    }\n  ],\n\n  // War Scenarios\n  skywing_tribute: [\n    {\n      id: \"skywing_tribute_resist\",\n      text: \"Rally the village to resist\",\n      description: \"Organize a defense against the tribute demands\",\n      soulCost: 0,\n      sanityCost: 10,\n      consequences: [\"You inspire resistance, but war may come to your doorstep...\"]\n    },\n    {\n      id: \"skywing_tribute_negotiate\",\n      text: \"Attempt to negotiate terms\",\n      description: \"Try to find a peaceful compromise\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You seek middle ground, hoping diplomacy can prevent bloodshed...\"]\n    },\n    {\n      id: \"skywing_tribute_submit\",\n      text: \"Advise paying the tribute\",\n      description: \"Choose safety over pride\",\n      soulCost: 0,\n      sanityCost: 12,\n      consequences: [\"You counsel submission, valuing lives over honor...\"]\n    }\n  ],\n\n  // Learning Scenarios\n  ancient_animus_study: [\n    {\n      id: \"ancient_animus_study_learn\",\n      text: \"Study the forbidden spells\",\n      description: \"Risk corruption for knowledge\",\n      soulCost: 15,\n      sanityCost: 0,\n      consequences: [\"You delve into dangerous magic, gaining power at a terrible price...\"],\n      corruption: true\n    },\n    {\n      id: \"ancient_animus_study_report\",\n      text: \"Report the discovery to authorities\",\n      description: \"Let others handle the dangerous knowledge\",\n      soulCost: 0,\n      sanityCost: 3,\n      consequences: [\"You wisely leave dangerous magic to those more experienced...\"]\n    },\n    {\n      id: \"ancient_animus_study_destroy\",\n      text: \"Destroy the forbidden knowledge\",\n      description: \"Eliminate the temptation entirely\",\n      soulCost: 0,\n      sanityCost: 8,\n      consequences: [\"You destroy the texts, knowing some knowledge is too dangerous...\"]\n    }\n  ],\n\n  // Custom Action Scenarios\n  mysterious_artifact: [\n    {\n      id: \"mysterious_artifact_examine\",\n      text: \"Examine it closely\",\n      description: \"Study the artifact carefully\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You examine the mysterious object, trying to understand its purpose...\"]\n    },\n    {\n      id: \"mysterious_artifact_touch\",\n      text: \"Touch the artifact\",\n      description: \"Risk activating its power\",\n      soulCost: 0,\n      sanityCost: 15,\n      consequences: [\"You reach out and touch the artifact, unsure what will happen...\"]\n    },\n    {\n      id: \"mysterious_artifact_custom\",\n      text: \"Take a custom action\",\n      description: \"Decide your own approach\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You decide to handle this situation in your own unique way...\"],\n      requiresModal: \"custom\"\n    }\n  ],\n\n  // Tribal Powers Scenarios\n  tribal_crisis: [\n    {\n      id: \"tribal_crisis_powers\",\n      text: \"Use your tribal abilities\",\n      description: \"Apply your unique tribal gifts to help\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You call upon your tribal heritage to address the crisis...\"],\n      requiresModal: \"tribal\"\n    },\n    {\n      id: \"tribal_crisis_diplomacy\",\n      text: \"Attempt diplomatic solution\",\n      description: \"Try to resolve through negotiation\",\n      soulCost: 0,\n      sanityCost: 8,\n      consequences: [\"You seek to solve this through words rather than power...\"]\n    },\n    {\n      id: \"tribal_crisis_withdraw\",\n      text: \"Step back and observe\",\n      description: \"Let others handle the situation\",\n      soulCost: 0,\n      sanityCost: 10,\n      consequences: [\"You choose not to get involved in tribal politics...\"]\n    }\n  ],\n\n  // Mind Reading specific scenarios\n  mind_invasion: [\n    {\n      id: \"mind_invasion_focus\",\n      text: \"Use Mind Reading to focus on one voice\",\n      description: \"Try to isolate a single mind from the chaos\",\n      soulCost: 0,\n      sanityCost: 8,\n      consequences: [\"You struggle to focus on one voice among many...\"],\n      requiresModal: \"mindreading\"\n    },\n    {\n      id: \"mind_invasion_block\",\n      text: \"Block out all the voices\",\n      description: \"Shut down your mind reading completely\",\n      soulCost: 0,\n      sanityCost: 15,\n      consequences: [\"You desperately try to silence the mental chaos...\"]\n    },\n    {\n      id: \"mind_invasion_embrace\",\n      text: \"Embrace the chaos\",\n      description: \"Accept all the voices and try to understand them\",\n      soulCost: 0,\n      sanityCost: 25,\n      consequences: [\"You open your mind fully to the overwhelming flood of thoughts...\"]\n    }\n  ],\n\n  // Prophecy specific scenarios  \n  prophecy_paradox: [\n    {\n      id: \"prophecy_paradox_investigate\",\n      text: \"Use Prophecy to see deeper into the paradox\",\n      description: \"Try to understand how the prophecy works\",\n      soulCost: 0,\n      sanityCost: 20,\n      consequences: [\"You peer deeper into the threads of fate...\"],\n      requiresModal: \"prophecy\"\n    },\n    {\n      id: \"prophecy_paradox_ignore\",\n      text: \"Ignore the prophecy completely\",\n      description: \"Refuse to engage with the paradox\",\n      soulCost: 0,\n      sanityCost: 12,\n      consequences: [\"You turn away from the visions, hoping ignorance will help...\"]\n    },\n    {\n      id: \"prophecy_paradox_act\",\n      text: \"Act according to the prophecy\",\n      description: \"Follow what the vision shows despite the risk\",\n      soulCost: 0,\n      sanityCost: 18,\n      consequences: [\"You choose to trust the prophecy despite its paradox...\"]\n    }\n  ]\n};\n\nfunction generateChoicesForScenario(scenario: ScenarioData, character: Character, gameData?: GameData): Choice[] {\n  // Special handling for romance scenarios\n  if (scenario.id.includes('romantic_') || scenario.id.includes('courtship_') || scenario.id.includes('secret_love') || scenario.id.includes('love_confession') || scenario.id.includes('mate_proposal')) {\n    return ROMANCE_CHOICES.map(choice => ({\n      ...choice,\n      id: `${scenario.id}_${choice.id}`\n    }));\n  }\n\n  // Use specific choices if available\n  if (SCENARIO_SPECIFIC_CHOICES[scenario.id]) {\n    return SCENARIO_SPECIFIC_CHOICES[scenario.id];\n  }\n\n  // Generate scenario-specific choices based on content and type\n  const contextualChoices = generateContextualChoices(scenario, character);\n  \n  // Add inventory-specific choices if gameData is available\n  if (gameData && gameData.inventory && gameData.inventory.length > 0) {\n    const inventoryChoices = InventorySystem.getInventoryChoices(gameData, character, scenario.type);\n    // Add inventory choices to the end, but limit to 2-3 to avoid overwhelming\n    contextualChoices.push(...inventoryChoices.slice(0, 3));\n  }\n  \n  return contextualChoices;\n}\n\nfunction generateContextualChoices(scenario: ScenarioData, character: Character): Choice[] {\n  const choices: Choice[] = [];\n\n  // Generate choices based on scenario text and type\n  if (scenario.text.includes(\"friend\") && scenario.text.includes(\"offers\")) {\n    choices.push({\n      id: `${scenario.id}_accept_friendship`,\n      text: \"Accept their friendship warmly\",\n      description: \"Welcome this new relationship\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You gain a new friend and ally...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_be_cautious`,\n      text: \"Be cautious but polite\",\n      description: \"Keep some distance while being respectful\",\n      soulCost: 0,\n      sanityCost: 1,\n      consequences: [\"You maintain polite distance, unsure of their intentions...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_reject_friendship`,\n      text: \"Politely decline their friendship\",\n      description: \"You prefer to remain alone\",\n      soulCost: 0,\n      sanityCost: 2,\n      consequences: [\"You choose solitude over companionship...\"]\n    });\n  } else if (scenario.text.includes(\"battle\") || scenario.text.includes(\"fight\")) {\n    choices.push({\n      id: `${scenario.id}_fight_bravely`,\n      text: \"Fight with courage and honor\",\n      description: \"Face the battle head-on\",\n      soulCost: 0,\n      sanityCost: 1,\n      consequences: [\"You enter battle with valor, ready to face whatever comes...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_strategic_retreat`,\n      text: \"Make a strategic retreat\",\n      description: \"Live to fight another day\",\n      soulCost: 0,\n      sanityCost: 2,\n      consequences: [\"Sometimes retreat is the wisest course of action...\"]\n    });\n    if (character.isAnimus) {\n      choices.push({\n        id: `${scenario.id}_use_magic`,\n        text: \"Use Animus magic to end the fight\",\n        description: \"Unleash your magical powers\",\n        soulCost: 20,\n        sanityCost: 0,\n        consequences: [\"Magic turns the tide, but corrupts your soul...\"],\n        corruption: true,\n        requiresModal: \"animus\"\n      });\n    }\n  } else if (scenario.text.includes(\"herbs\") || scenario.text.includes(\"collect\")) {\n    choices.push({\n      id: `${scenario.id}_collect_carefully`,\n      text: \"Carefully collect the herbs\",\n      description: \"Gather what you need without waste\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You gather valuable herbs for future use...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_take_everything`,\n      text: \"Take as many as possible\",\n      description: \"Gather everything you can carry\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"Greed drives you to take more than you need...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_leave_untouched`,\n      text: \"Leave them for others to find\",\n      description: \"Let nature remain undisturbed\",\n      soulCost: 0,\n      sanityCost: 3,\n      consequences: [\"You show respect for nature and other dragons' needs...\"]\n    });\n  } else if (scenario.text.includes(\"feast\") || scenario.text.includes(\"invited\")) {\n    choices.push({\n      id: `${scenario.id}_join_feast`,\n      text: \"Join the feast happily\",\n      description: \"Participate in the celebration\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You enjoy good food and company...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_attend_briefly`,\n      text: \"Make a brief appearance\",\n      description: \"Show respect but don't stay long\",\n      soulCost: 0,\n      sanityCost: 2,\n      consequences: [\"You fulfill social obligations without overcommitting...\"]\n    });\n    choices.push({\n      id: `${scenario.id}_decline_politely`,\n      text: \"Politely decline the invitation\",\n      description: \"Respectfully stay away\",\n      soulCost: 0,\n      sanityCost: 5,\n      consequences: [\"You choose solitude over social gatherings...\"]\n    });\n  }\n\n  // Add power-specific options based on scenario type and character abilities\n  if (scenario.type === 'ANIMUS' && character.isAnimus) {\n    choices.push({\n      id: `${scenario.id}_animus_solution`,\n      text: \"Use Animus magic to solve this\",\n      description: \"Apply magical power to resolve the situation\",\n      soulCost: Math.floor(Math.random() * 6) + 3,\n      sanityCost: 0,\n      consequences: [\"Magic provides a solution, but at the cost of your soul...\"],\n      corruption: true,\n      requiresModal: \"animus\"\n    });\n  }\n\n  if (scenario.type === 'MINDREADING' && ((character.tribalPowers || []).includes('Mind Reading') || (character.specialPowers || []).includes('Enhanced Mind Reading'))) {\n    choices.push({\n      id: `${scenario.id}_read_minds`,\n      text: \"Read their thoughts\",\n      description: \"Use your mind reading abilities\",\n      soulCost: 0,\n      sanityCost: Math.floor(Math.random() * 4) + 2,\n      consequences: [\"You peer into their mind, learning their true intentions...\"],\n      requiresModal: \"mindreading\"\n    });\n  }\n\n  if (scenario.type === 'PROPHECY' && ((character.tribalPowers || []).includes('Prophecy (rare)') || (character.specialPowers || []).includes('Foresight') || (character.specialPowers || []).includes('Enhanced Prophecy'))) {\n    choices.push({\n      id: `${scenario.id}_see_future`,\n      text: \"Look into the future\",\n      description: \"Use your prophetic powers for guidance\",\n      soulCost: 0,\n      sanityCost: Math.floor(Math.random() * 5) + 3,\n      consequences: [\"Visions of possible futures fill your mind...\"],\n      requiresModal: \"prophecy\"\n    });\n  }\n\n  // Always add a custom action option for complex scenarios\n  if (choices.length >= 2) {\n    choices.push({\n      id: `${scenario.id}_custom_action`,\n      text: \"Take a different approach\",\n      description: \"Handle this your own unique way\",\n      soulCost: 0,\n      sanityCost: 0,\n      consequences: [\"You decide to approach this situation in your own way...\"],\n      requiresModal: \"custom\"\n    });\n  }\n\n  // If no specific choices generated, fall back to generic ones\n  if (choices.length === 0) {\n    choices.push(\n      {\n        id: `${scenario.id}_thoughtful`,\n        text: \"Consider all options carefully\",\n        description: \"Think through the situation thoroughly\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Careful thought guides your decision...\"]\n      },\n      {\n        id: `${scenario.id}_intuitive`,\n        text: \"Trust your instincts\",\n        description: \"Go with your first impulse\",\n        soulCost: 0,\n        sanityCost: 1,\n        consequences: [\"You follow your heart and intuition...\"]\n      },\n      {\n        id: `${scenario.id}_avoid`,\n        text: \"Avoid the situation\",\n        description: \"Step away from potential complications\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"Sometimes the wisest choice is not to choose...\"]\n      }\n    );\n  }\n\n  return choices;\n}\n\nexport function generateScenario(character: Character, gameData: Partial<GameData>): Scenario {\n  // Filter scenarios based on character abilities\n  const availableScenarios = SCENARIO_DATABASE.filter(scenario => {\n    if (scenario.requirements) {\n      return scenario.requirements(character);\n    }\n    \n    // Filter out type-specific scenarios if character doesn't have the ability\n    if (scenario.type === 'ANIMUS' && !character.isAnimus) {\n      return false;\n    }\n    if (scenario.type === 'MINDREADING' && \n        !(character.tribalPowers || []).includes('Mind Reading') && \n        !(character.specialPowers || []).includes('Enhanced Mind Reading')) {\n      return false;\n    }\n    if (scenario.type === 'PROPHECY' && \n        !(character.tribalPowers || []).includes('Prophecy (rare)') && \n        !(character.specialPowers || []).includes('Foresight') &&\n        !(character.specialPowers || []).includes('Enhanced Prophecy')) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  if (availableScenarios.length === 0) {\n    // Fallback to normal scenarios if no others available\n    const normalScenarios = SCENARIO_DATABASE.filter(s => s.type === 'NORMAL');\n    const scenario = normalScenarios[Math.floor(Math.random() * normalScenarios.length)];\n    \n    return {\n      id: scenario.id,\n      title: \"A Choice Awaits\",\n      description: \"Your decision will shape your path\",\n      narrativeText: [scenario.text],\n      choices: generateChoicesForScenario(scenario, character, gameData as GameData),\n      type: 'mundane',\n      location: gameData.location || \"Unknown Location\",\n      timeOfDay: \"afternoon\",\n      weather: \"calm\"\n    };\n  }\n\n  const scenario = availableScenarios[Math.floor(Math.random() * availableScenarios.length)];\n  \n  // Determine scenario type for game engine\n  let gameType: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic' = 'mundane';\n  switch (scenario.type) {\n    case 'ANIMUS':\n      gameType = 'magical';\n      break;\n    case 'WARS':\n      gameType = 'extraordinary';\n      break;\n    case 'PROPHECY':\n      gameType = 'prophetic';\n      break;\n    case 'MINDREADING':\n      gameType = 'tribal';\n      break;\n    case 'LEARNING':\n      gameType = 'extraordinary';\n      break;\n    default:\n      gameType = 'mundane';\n  }\n\n  return {\n    id: scenario.id,\n    title: getScenarioTitle(scenario),\n    description: getScenarioDescription(scenario),\n    narrativeText: [\n      scenario.text,\n      generateContextualNarrative(scenario, character, gameData as GameData)\n    ],\n    choices: generateChoicesForScenario(scenario, character, gameData as GameData),\n    type: gameType,\n    location: gameData.location || \"Unknown Location\",\n    timeOfDay: getRandomTimeOfDay(),\n    weather: getRandomWeather()\n  };\n}\n\nfunction getScenarioTitle(scenario: ScenarioData): string {\n  const titles = {\n    'NORMAL': ['A Social Encounter', 'Daily Life', 'An Opportunity', 'A Chance Meeting', 'Life at the Academy'],\n    'ANIMUS': ['The Temptation of Power', 'Magical Consequences', 'Soul Magic Calls', 'The Animus Burden', 'Power\\'s Price'],\n    'MINDREADING': ['Thoughts Revealed', 'Mental Intrusion', 'The Mind\\'s Eye', 'Psychic Awareness', 'Inner Voices'],\n    'PROPHECY': ['Future\\'s Shadow', 'Prophetic Vision', 'Destiny Calls', 'The Sight', 'Fate\\'s Warning'],\n    'WARS': ['War\\'s Toll', 'Battle\\'s Edge', 'Conflict Zone', 'The Front Lines', 'Military Crisis'],\n    'LEARNING': ['Knowledge Sought', 'Educational Choice', 'Study Opportunity', 'Academic Challenge', 'Learning Path']\n  };\n  \n  const typeList = titles[scenario.type] || titles['NORMAL'];\n  return typeList[Math.floor(Math.random() * typeList.length)];\n}\n\nfunction getScenarioDescription(scenario: ScenarioData): string {\n  const descriptions = {\n    'NORMAL': 'A situation in daily life that requires a decision',\n    'ANIMUS': 'A choice that could affect your soul and magical power',\n    'MINDREADING': 'Your mind reading abilities reveal important information',\n    'PROPHECY': 'A vision of the future guides your decision',\n    'WARS': 'The ongoing conflict presents a difficult choice',\n    'LEARNING': 'An opportunity to gain knowledge and wisdom'\n  };\n  \n  return descriptions[scenario.type] || descriptions['NORMAL'];\n}\n\nfunction generateContextualNarrative(scenario: ScenarioData, character: Character, gameData: GameData): string {\n  const contextualElements = [\n    `As a ${character?.tribe || 'dragon'} dragon, your perspective shapes your approach.`,\n    `The atmosphere around you adds tension to the moment.`,\n    `Your experiences at ${gameData?.location || 'this place'} influence your decision.`,\n    `The weight of your choices so far guides your thinking.`,\n    `Your tribal heritage whispers guidance in your mind.`,\n    `The memory of past lessons echoes in your thoughts.`,\n    `The atmosphere around you seems charged with possibility.`,\n    `You feel the eyes of others watching your reaction.`,\n    `Your instincts tell you this moment is important.`,\n    `The consequences of this choice will ripple outward.`\n  ];\n  \n  return contextualElements[Math.floor(Math.random() * contextualElements.length)];\n}\n\nfunction getRandomTimeOfDay(): string {\n  const times = ['dawn', 'morning', 'midday', 'afternoon', 'evening', 'dusk', 'night', 'midnight'];\n  return times[Math.floor(Math.random() * times.length)];\n}\n\nfunction getRandomWeather(): string {\n  const weather = ['sunny', 'cloudy', 'rainy', 'stormy', 'foggy', 'windy', 'calm', 'overcast'];\n  return weather[Math.floor(Math.random() * weather.length)];\n}\n\nexport function generateTimeInfo(character: Character): string {\n  const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n  const times = ['Early morning', 'Mid-morning', 'Late morning', 'Early afternoon', 'Mid-afternoon', 'Late afternoon', 'Early evening', 'Late evening'];\n  \n  const season = character?.currentSeason || seasons[Math.floor(Math.random() * seasons.length)];\n  const time = times[Math.floor(Math.random() * times.length)];\n  const year = (character?.yearsSurvived || 0) + 1;\n  \n  return `${time}, ${season} of Year ${year}`;\n}\n\nexport function generateLocation(): string {\n  const locations = [\n    \"Jade Mountain Academy\",\n    \"Queen's Palace\",\n    \"Ancient Ruins\",\n    \"Tribal Border\",\n    \"Mysterious Cave\",\n    \"Sacred Grove\",\n    \"War Camp\",\n    \"Peaceful Village\",\n    \"Abandoned Castle\",\n    \"Underground Tunnels\",\n    \"Mountain Peak\",\n    \"Desert Oasis\",\n    \"Coastal Cliffs\",\n    \"Forest Clearing\",\n    \"Ice Palace\",\n    \"Volcano Rim\",\n    \"Hidden Valley\",\n    \"Sky Kingdom\",\n    \"Sea Palace\",\n    \"Mud Kingdom\",\n    \"Sand Kingdom\",\n    \"Night Kingdom\",\n    \"Rain Forest\",\n    \"Frozen Wasteland\"\n  ];\n  \n  return locations[Math.floor(Math.random() * locations.length)];\n}","size_bytes":49340},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/game.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Character, GameData, Choice, CustomSpell, InventoryItem } from \"@shared/schema\";\nimport { EnhancedGameEngine } from \"@/lib/enhanced-game-engine\";\nimport CharacterPanel from \"@/components/character-panel\";\nimport GameplayArea from \"@/components/gameplay-area\";\nimport MagicModal from \"@/components/magic-modal\";\nimport TribalPowersModal from \"@/components/tribal-powers-modal\";\nimport SpecialPowerModal from \"@/components/special-power-modal\";\nimport CustomActionModal from \"@/components/custom-action-modal\";\nimport ConversationModal from \"@/components/conversation-modal\";\nimport GameOverScreen from \"@/components/game-over-screen\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Save, Home, Skull, Eye } from \"lucide-react\";\nimport { useLocalGameState } from \"@/hooks/use-local-game-state\";\nimport { LocalGameStorage } from \"@/lib/local-storage\";\nimport { RomanceSystem } from \"@/lib/romance-system\";\nimport { AIDungeonMaster } from \"@/lib/ai-dungeon-master\";\nimport { Location } from \"@/lib/location-system\";\nimport { InventorySystem } from \"@/lib/inventory-system\";\nimport { SoundtrackSystem } from \"@/lib/soundtrack-system\";\nimport { SpecialEventsSystem } from \"@/lib/special-events-system\";\n\nexport default function Game() {\n  const { gameId } = useParams();\n  const { toast } = useToast();\n  const [showMagicModal, setShowMagicModal] = useState(false);\n  const [showTribalPowersModal, setShowTribalPowersModal] = useState(false);\n  const [showSpecialPowerModal, setShowSpecialPowerModal] = useState(false);\n  const [showCustomActionModal, setShowCustomActionModal] = useState(false);\n  const [showConversationModal, setShowConversationModal] = useState(false);\n  const [specialPowerType, setSpecialPowerType] = useState<'prophecy' | 'mindreading' | 'future' | null>(null);\n  const [conversationData, setConversationData] = useState<{topic: string, otherDragon: string} | null>(null);\n  const [aiControlMessage, setAiControlMessage] = useState<string | null>(null);\n  const [aiInterval, setAiInterval] = useState<NodeJS.Timeout | null>(null);\n  const [aiActionInProgress, setAiActionInProgress] = useState<string | null>(null);\n  const [gameOverState, setGameOverState] = useState<{ isGameOver: boolean; reason?: string; allowContinue?: boolean } | null>(null);\n  const [hasChosenCorruption, setHasChosenCorruption] = useState(false);\n  const [gameState, setGameState] = useState<{ characterData: Character; gameData: GameData } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [corruptionWhisper, setCorruptionWhisper] = useState<string | null>(null);\n  const [showCorruptionPopup, setShowCorruptionPopup] = useState(false);\n\n  const { updateGame } = useLocalGameState();\n\n  const generateCorruptionWhisper = (character: Character) => {\n    try {\n      const whisper = EnhancedGameEngine.generateCorruptionWhisper(character);\n      setCorruptionWhisper(whisper);\n      setShowCorruptionPopup(true);\n      \n      // Auto-hide after 5 seconds\n      setTimeout(() => {\n        setShowCorruptionPopup(false);\n        setCorruptionWhisper(null);\n      }, 5000);\n    } catch (error) {\n      console.error(\"Failed to generate corruption whisper:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (gameId) {\n      const loadedGame = LocalGameStorage.getGameState(gameId);\n      if (loadedGame) {\n        // Initialize special events system for this game session\n        SpecialEventsSystem.initializeEventState(loadedGame.gameData);\n        \n        setGameState({\n          characterData: loadedGame.characterData,\n          gameData: loadedGame.gameData\n        });\n        \n        // Initialize soundtrack system with AI control callbacks\n        SoundtrackSystem.initialize(\n          () => {\n            // AI Control Start\n            setAiControlMessage(\"Your soul is completely corrupted. The AI now controls your actions...\");\n            setAiActionInProgress(\"AI is making decisions for you\");\n            \n            // Start AI action interval\n            const interval = setInterval(() => {\n              if (gameState?.characterData) {\n                // AI performs random actions for 2:13\n                setAiActionInProgress(`AI chooses: ${['Destroy something', 'Corrupt others', 'Use dark magic', 'Spread chaos'][Math.floor(Math.random() * 4)]}`);\n              }\n            }, 5000);\n            setAiInterval(interval);\n          },\n          () => {\n            // AI Control End - Show warning\n            if (aiInterval) {\n              clearInterval(aiInterval);\n              setAiInterval(null);\n            }\n            setAiActionInProgress(null);\n            setAiControlMessage(\"⚠️ CRITICAL WARNING: If you lose any more soul, you will DIE PERMANENTLY!\");\n            \n            // Clear warning after 10 seconds (longer duration for important warning)\n            setTimeout(() => {\n              setAiControlMessage(null);\n            }, 10000);\n          }\n        );\n        \n        // Update soundtrack based on initial game state\n        if (loadedGame.characterData) {\n          SoundtrackSystem.updateBasedOnGameState(loadedGame.characterData, loadedGame.gameData);\n        }\n      }\n      setIsLoading(false);\n    }\n  }, [gameId]);\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (aiInterval) {\n        clearInterval(aiInterval);\n      }\n    };\n  }, [aiInterval]);\n\n  useEffect(() => {\n    if (gameState?.characterData) {\n      const character = gameState.characterData;\n      const stage = character.soulCorruptionStage;\n      \n      if (stage !== 'Normal') {\n        setAiControlMessage(EnhancedGameEngine.getCorruptionMessage(stage));\n      } else {\n        setAiControlMessage(null);\n        // Stop AI control if character is no longer corrupted\n        if (aiInterval) {\n          clearInterval(aiInterval);\n          setAiInterval(null);\n        }\n      }\n\n      // Show corruption whispers for souls below 15%\n      if (EnhancedGameEngine.shouldShowCorruptionPopup(character)) {\n        if (Math.random() < 0.3) { // 30% chance per turn\n          generateCorruptionWhisper(character);\n        }\n      }\n\n      // Check for game over conditions - but allow continuation for corrupted souls\n      const gameOverCheck = EnhancedGameEngine.checkGameOver(character);\n      if (gameOverCheck.isGameOver && !character.isAIControlled && !gameOverState && !hasChosenCorruption) {\n        const allowContinue = character.soulPercentage <= 0; // Allow AI takeover for corrupted souls\n        setGameOverState({ ...gameOverCheck, allowContinue });\n      } else if (!gameOverCheck.isGameOver || character.isAIControlled) {\n        setGameOverState(null);\n      }\n    }\n  }, [gameState, aiInterval]);\n\n  const handleCastSpell = (spell: CustomSpell) => {\n    if (!gameState || !gameId || gameOverState?.isGameOver) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Check if character has enough soul\n    if (character.soulPercentage < spell.estimatedSoulCost) {\n      toast({\n        title: \"Insufficient Soul\",\n        description: \"You don't have enough soul remaining to cast this spell.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Apply soul cost\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - spell.estimatedSoulCost);\n    newCharacter.soulCorruptionStage = {\n      \"Normal\": character.soulPercentage >= 75 ? \"Normal\" : character.soulPercentage >= 50 ? \"Frayed\" : character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Frayed\": character.soulPercentage >= 50 ? \"Frayed\" : character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Twisted\": character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Broken\": \"Broken\"\n    }[character.soulCorruptionStage] as any;\n\n    // Create enchanted item and add to inventory\n    const newItem: InventoryItem = {\n      id: `item_${Date.now()}`,\n      name: `Enchanted ${spell.targetObject}`,\n      description: spell.enchantmentDescription,\n      type: \"enchanted_object\",\n      enchantments: [spell.enchantmentDescription],\n      soulCostToCreate: spell.estimatedSoulCost,\n      turnCreated: gameData.turn,\n      isActive: true\n    };\n\n    const newGameData = { ...gameData };\n    newGameData.inventory.push(newItem);\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Spell Cast Successfully!\",\n        description: `You enchanted ${spell.targetObject}. Soul cost: ${spell.estimatedSoulCost}%`,\n      });\n\n      setShowMagicModal(false);\n    } catch (error) {\n      toast({\n        title: \"Spell Failed\",\n        description: \"Something went wrong casting your spell.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleChoice = (choice: Choice) => {\n    if (!gameState || !gameId || gameOverState?.isGameOver) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Check if AI should intervene\n    const aiChoice = EnhancedGameEngine.getAIChoice(character, gameData.currentScenario);\n    const actualChoice = aiChoice || choice;\n\n    if (aiChoice) {\n      toast({\n        title: \"Corruption Takes Control\",\n        description: \"Your corrupted soul compels you to make a darker choice...\",\n        variant: \"destructive\",\n      });\n    }\n\n    const { newCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      character,\n      gameData,\n      actualChoice,\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Choice Made\",\n        description: \"Your decision shapes your destiny...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save your choice. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUsePower = (power: string, scenario?: string) => {\n    if (!gameState || !gameId) return;\n\n    const { characterData: character, gameData } = gameState;\n    let newCharacter = { ...character };\n\n    // Apply power usage costs and effects\n    const sanityCost = Math.floor(Math.random() * 5) + 2;\n    newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - sanityCost);\n\n    // Generate AI description for the power usage with current scenario context\n    const powerContext = {\n      turn: gameData.turn,\n      power,\n      scenario: scenario || gameData.currentScenario.description,\n      currentSituation: gameData.currentScenario.narrativeText.join(' ')\n    };\n    \n    const aiResponse = MockAIService.generateRandomEvent(character, powerContext);\n    const result = scenario ? `${scenario} - ${aiResponse.content}` : aiResponse.content;\n\n    // Process the power use as a choice to advance the storyline\n    const { newCharacter: updatedCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      gameData,\n      {\n        id: `tribal_power_${Date.now()}`,\n        text: `Use ${power}`,\n        description: result,\n        soulCost: 0,\n        sanityCost: sanityCost,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Power Used\",\n        description: result.slice(0, 150) + \"...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Power Failed\",\n        description: \"Your power usage had unexpected results.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowTribalPowersModal(false);\n  };\n\n  const handleSpecialPower = (powerType: 'prophecy' | 'mindreading' | 'future') => {\n    setSpecialPowerType(powerType);\n    setShowSpecialPowerModal(true);\n  };\n\n  const handleSpecialPowerUse = (power: string, result: string) => {\n    if (!gameState || !gameId) return;\n\n    // Special powers cost sanity for non-animus, soul energy for animus\n    const { characterData: character, gameData } = gameState;\n    const newCharacter = { ...character };\n    \n    if (character.isAnimus) {\n      const soulCost = specialPowerType === 'future' ? 5 : specialPowerType === 'mindreading' ? 3 : 2;\n      newCharacter.soulPercentage = Math.max(0, newCharacter.soulPercentage - soulCost);\n      newCharacter.soulCorruptionStage = EnhancedGameEngine.getCorruptionLevel(newCharacter.soulPercentage);\n    } else {\n      const sanityCost = specialPowerType === 'future' ? 8 : specialPowerType === 'mindreading' ? 5 : 3;\n      newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - sanityCost);\n    }\n\n    // Generate a new scenario based on the power use result\n    const { newCharacter: updatedCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      gameData,\n      {\n        id: `power_${specialPowerType}`,\n        text: `Use ${power}`,\n        description: result,\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: power,\n        description: result.slice(0, 150) + \"...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Vision Failed\",\n        description: \"The mystical energies resist your attempt.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowSpecialPowerModal(false);\n  };\n\n  const handleCustomAction = (action: string, result: string, itemUsed?: InventoryItem, processedAction?: any) => {\n    if (!gameState || !gameId) return;\n\n    const { characterData: character, gameData } = gameState;\n    let newCharacter = { ...character };\n\n    // Apply costs from intelligent action processor if available\n    if (processedAction) {\n      if (processedAction.soulCost > 0 && character.isAnimus) {\n        newCharacter.soulPercentage = Math.max(0, character.soulPercentage - processedAction.soulCost);\n        newCharacter.soulCorruptionStage = EnhancedGameEngine.getCorruptionLevel(newCharacter.soulPercentage);\n      }\n      \n      if (processedAction.sanityCost > 0) {\n        newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - processedAction.sanityCost);\n      }\n\n      // Remove item if consumed\n      if (processedAction.itemConsumed && itemUsed) {\n        const updatedGameData = InventorySystem.removeItem(gameData, itemUsed.id);\n        newCharacter = { ...newCharacter };\n        Object.assign(gameData, { inventory: updatedGameData.inventory });\n      }\n\n      // Add achievement if unlocked\n      if (processedAction.achievementUnlocked) {\n        if (!newCharacter.achievements) newCharacter.achievements = [];\n        newCharacter.achievements.push(processedAction.achievementUnlocked);\n        \n        toast({\n          title: \"Achievement Unlocked!\",\n          description: processedAction.achievementUnlocked,\n          duration: 5000,\n        });\n      }\n    }\n\n    // Use the intelligent processor's next scenario if available\n    let nextScenario;\n    if (processedAction?.nextScenario) {\n      nextScenario = processedAction.nextScenario;\n    } else {\n      // Fallback to original processing\n      const { newGameData } = EnhancedGameEngine.processChoice(\n        newCharacter,\n        gameData,\n        {\n          id: `custom_${Date.now()}`,\n          text: action,\n          description: result,\n          soulCost: processedAction?.soulCost || 0,\n          sanityCost: processedAction?.sanityCost || 0,\n          consequences: processedAction?.consequences || [result]\n        },\n        gameData.currentScenario\n      );\n      nextScenario = newGameData.currentScenario;\n    }\n\n    // Update game data with new scenario\n    const newGameData = {\n      ...gameData,\n      turn: gameData.turn + 1,\n      currentScenario: nextScenario,\n      history: [\n        ...gameData.history,\n        {\n          turn: gameData.turn,\n          scenario: gameData.currentScenario.id,\n          choice: `custom_action_${Date.now()}`,\n          consequences: processedAction?.consequences || [result],\n          soulLoss: processedAction?.soulCost || 0,\n          sanityLoss: processedAction?.sanityCost || 0\n        }\n      ]\n    };\n\n    // Check if action triggers conversation\n    if (result.toLowerCase().includes('conversation') || result.toLowerCase().includes('talk') || result.toLowerCase().includes('speak')) {\n      const dragonName = extractDragonName(result) || \"Unknown Dragon\";\n      setConversationData({ topic: action, otherDragon: dragonName });\n      setShowConversationModal(true);\n    }\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Action Completed\",\n        description: `${action} - ${result.slice(0, 100)}...`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Action Failed\",\n        description: \"Something went wrong. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowCustomActionModal(false);\n  };\n\n  const handleConversationEnd = (outcome: string, relationship: string) => {\n    toast({\n      title: \"Conversation Ended\",\n      description: `${outcome} - Relationship: ${relationship}`,\n    });\n    setShowConversationModal(false);\n    setConversationData(null);\n  };\n\n  const handleLocationMigration = (destination: Location) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Process migration using enhanced game engine\n    const newGameData = EnhancedGameEngine.handleLocationMigration(character, gameData, destination);\n    \n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: character,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Travel Complete\",\n        description: `You have arrived at ${destination.name}. The journey has changed you.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Travel Failed\",\n        description: \"Something went wrong during travel. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGiveItem = (itemId: string, npcName: string, result: string) => {\n    if (!gameState || !gameId) return;\n\n    console.log(\"handleGiveItem called with:\", { itemId, npcName, result });\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Process item giving using inventory system\n    const giveResult = InventorySystem.giveItemToNPC(character, gameData, itemId, npcName);\n    \n    console.log(\"Give result:\", giveResult);\n    \n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: giveResult.character,\n        gameData: giveResult.gameData,\n        turn: giveResult.gameData.turn,\n        location: giveResult.gameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: giveResult.storyAdvanced ? \"Quest Completed!\" : \"Item Given\",\n        description: giveResult.result,\n      });\n\n      // Generate new scenario if story advanced\n      if (giveResult.storyAdvanced) {\n        setTimeout(() => {\n          // Force a new scenario generation\n          const newScenario = EnhancedGameEngine.generateNextScenario(giveResult.character, giveResult.gameData);\n          const updatedGameWithScenario = updateGame(gameId, {\n            characterData: giveResult.character,\n            gameData: { ...giveResult.gameData, currentScenario: newScenario },\n            turn: giveResult.gameData.turn,\n            location: giveResult.gameData.location,\n          });\n          \n          setGameState({\n            characterData: updatedGameWithScenario.characterData,\n            gameData: updatedGameWithScenario.gameData\n          });\n        }, 1000);\n      }\n\n    } catch (error) {\n      console.error(\"Error giving item:\", error);\n      toast({\n        title: \"Failed to Give Item\",\n        description: \"Something went wrong. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInventoryAction = (action: string, itemId: string, result: string) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n    let newCharacter = { ...character };\n    let newGameData = { ...gameData };\n\n    // Handle inventory actions\n    if (action === \"tear_up\" || action === \"offer_treasure\" || action.includes(\"sacrifice\")) {\n      // Remove the item from inventory\n      newGameData.inventory = newGameData.inventory.filter(item => item.id !== itemId);\n    }\n\n    // Apply soul/sanity costs for magical actions\n    if (action.includes(\"animus\") && character.isAnimus) {\n      newCharacter.soulPercentage = Math.max(0, newCharacter.soulPercentage - 5);\n      newCharacter.soulCorruptionStage = EnhancedGameEngine.getCorruptionLevel(newCharacter.soulPercentage);\n    }\n\n    // Some actions cause sanity stress\n    if (action === \"tear_up\" || action === \"hide_mundane\") {\n      newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - 2);\n    }\n\n    // Process as a choice to advance storyline\n    const { newCharacter: updatedCharacter, newGameData: finalGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      newGameData,\n      {\n        id: `inventory_${action}`,\n        text: `${action.replace(/_/g, ' ')} item`,\n        description: result,\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [result]\n      },\n      newGameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: finalGameData,\n        turn: finalGameData.turn,\n        location: finalGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Action Completed\",\n        description: result.slice(0, 100) + (result.length > 100 ? \"...\" : \"\"),\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Action Failed\",\n        description: \"Something went wrong. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSeekRomance = () => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Check if character can have romance\n    if (!RomanceSystem.canHaveRomance(character)) {\n      let description = \"\";\n      if (character.age < 3) {\n        description = \"You're too young for romance.\";\n      } else if (character.soulPercentage < 50) {\n        description = \"Your corrupted soul prevents romantic connections.\";\n      } else if (character.sanityPercentage < 50) {\n        description = \"Your unstable mind prevents forming romantic bonds.\";\n      }\n      \n      toast({\n        title: \"Cannot Seek Romance\",\n        description,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Generate a romantic encounter scenario\n    const romanticEncounter = AIDungeonMaster.generateRomanceEncounter(character, gameData);\n    \n    // Create a new game state with the romance scenario\n    const newGameData = { ...gameData };\n    newGameData.currentScenario = romanticEncounter;\n    newGameData.turn += 1;\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: character,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Romance Encounter\",\n        description: \"You've sought out romantic companionship...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Find Romance\",\n        description: \"Something went wrong. Try again later.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const extractDragonName = (text: string): string | null => {\n    const patterns = [\n      /talks? (?:to|with) ([A-Z][a-z]+)/i,\n      /speaks? (?:to|with) ([A-Z][a-z]+)/i,\n      /approaches? ([A-Z][a-z]+)/i,\n      /meets? ([A-Z][a-z]+)/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    \n    return null;\n  };\n\n  const handleTribalPower = (power: string, corruptedUse: string) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Apply consequences of using tribal power corruptly\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - 5); // Using powers corruptly costs soul\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - 3);\n\n    // Create a corrupted scenario result\n    const result = `Using ${power}, ${corruptedUse}. The dark deed leaves a stain on your soul.`;\n\n    const newGameData = EnhancedGameEngine.processCustomAction(\n      character,\n      gameData,\n      {\n        action: `Corrupt use of ${power}`,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n    } catch (error) {\n      console.error(\"Failed to handle tribal power:\", error);\n    }\n  };\n\n  const handleAISpecialPower = (power: string, corruptedUse: string) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Apply consequences of using special power corruptly\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - 8); // Special powers cost more\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - 5);\n\n    // Create a corrupted scenario result\n    const result = `Corrupting special power \"${power}\": ${corruptedUse}. The perversion of your gift darkens your essence.`;\n\n    const newGameData = EnhancedGameEngine.processCustomAction(\n      character,\n      gameData,\n      {\n        action: `Corrupt use of special power: ${power}`,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n    } catch (error) {\n      console.error(\"Failed to handle special power:\", error);\n    }\n  };\n\n  const continueAsCorrupted = () => {\n    if (!gameState || !gameId) return;\n    \n    // Mark character as AI controlled and continue\n    const newCharacter = { ...gameState.characterData };\n    newCharacter.isAIControlled = true;\n    \n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: gameState.gameData,\n        turn: gameState.gameData.turn,\n        location: gameState.gameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n      \n      setGameOverState(null);\n      setHasChosenCorruption(true);\n      \n      toast({\n        title: \"Soul Lost\",\n        description: \"The darkness takes control. Watch as your corrupted dragon wreaks havoc...\",\n        variant: \"destructive\"\n      });\n\n      // Start AI control sequence after a brief delay\n      setTimeout(() => {\n        startAIControlSequence();\n      }, 1000);\n    } catch (error) {\n      console.error(\"Failed to continue as corrupted:\", error);\n    }\n  };\n\n  // Dark enchantments from user's provided list\n  const DARK_ENCHANTMENTS = [\n    { object: \"Dagger\", effect: \"Cause wounds to fester and never fully heal\" },\n    { object: \"Mirror\", effect: \"Trap the reflection's soul, making it scream silently\" },\n    { object: \"Necklace\", effect: \"Whisper dark thoughts into the wearer's mind at night\" },\n    { object: \"Ring\", effect: \"Slowly drain the wearer's luck, making misfortune unavoidable\" },\n    { object: \"Candle\", effect: \"Burn with flames that induce fear and hallucinations\" },\n    { object: \"Book\", effect: \"Rewrite its own pages to reveal forbidden knowledge whenever opened\" },\n    { object: \"Armor\", effect: \"Slowly corrupt the wearer's body, making them feel endless fatigue\" },\n    { object: \"Coin\", effect: \"Curse anyone who touches it to attract betrayal from friends\" },\n    { object: \"Key\", effect: \"Lock doors permanently and summon shadows when used\" },\n    { object: \"Cloak\", effect: \"Conceal the wearer but slowly warp their mind into paranoia\" },\n    { object: \"Potion vial\", effect: \"Turn any drink poured inside into a poison that induces rage\" },\n    { object: \"Quill\", effect: \"Write words that compel the reader to obey dark commands\" },\n    { object: \"Bell\", effect: \"Ring on its own to call nightmares into the surrounding area\" },\n    { object: \"Staff\", effect: \"Summon illusions of fallen enemies to terrify allies\" },\n    { object: \"Shoes\", effect: \"Make the wearer walk endlessly in circles at night\" },\n    { object: \"Gemstone\", effect: \"Absorb the life force of anyone who gazes into it\" },\n    { object: \"Mask\", effect: \"Force the wearer to mimic the voices of others, sowing confusion\" },\n    { object: \"Scroll\", effect: \"Spread a curse on anyone who reads it aloud\" },\n    { object: \"Cup\", effect: \"Turn any drink into a hallucinogenic draught of despair\" },\n    { object: \"Chain\", effect: \"Bind its victim's luck and movement, making escape impossible\" },\n    { object: \"Amulet\", effect: \"Slowly twist the wearer's emotions into uncontrollable anger\" },\n    { object: \"Blade\", effect: \"Infect any wound with pain that never fully fades\" },\n    { object: \"Lantern\", effect: \"Illuminate only the fear within people, showing them their worst dread\" },\n    { object: \"Boots\", effect: \"Force the wearer to stumble into danger whenever they try to run\" },\n    { object: \"Cage\", effect: \"Trap a creature inside permanently if it is filled with darkness\" },\n    { object: \"Chalice\", effect: \"Slowly drain the vitality of anyone who drinks from it\" }\n  ];\n\n  const EVIL_CUSTOM_ACTIONS = [\n    \"Whisper lies about their closest friend to turn them against each other\",\n    \"Steal something precious and hide it where they'll never find it\",\n    \"Spread false rumors about someone's deepest shame\",\n    \"Break something they treasure when they're not looking\",\n    \"Tell their enemy exactly where to find them alone\",\n    \"Poison their food with something that causes nightmares\",\n    \"Leave threatening messages in their personal belongings\",\n    \"Convince their loved ones that they've betrayed them\",\n    \"Destroy evidence that would prove their innocence\",\n    \"Lead dangerous creatures to their sleeping place\",\n    \"Forge documents that make them look guilty of crimes\",\n    \"Manipulate their memories to make them doubt themselves\",\n    \"Sabotage their most important relationships with calculated cruelty\",\n    \"Use their fears against them to break their spirit\",\n    \"Turn their own allies into enemies through deception\"\n  ];\n\n  const startAIControlSequence = () => {\n    if (!gameId) return;\n\n    // Show AI taking control message\n    setAiControlMessage(\"🔴 AI CORRUPTION ACTIVE - Your dragon acts autonomously with dark intent. Watch as evil unfolds...\");\n\n    // Clear any existing interval\n    if (aiInterval) {\n      clearInterval(aiInterval);\n    }\n\n    // Set up interval for AI to perform actions automatically\n    const newInterval = setInterval(async () => {\n      // Get fresh game state each time\n      const currentGameState = LocalGameStorage.getGameState(gameId);\n      if (!currentGameState?.characterData?.isAIControlled) {\n        clearInterval(newInterval);\n        setAiInterval(null);\n        return;\n      }\n\n      console.log(\"🔥 AI TAKING CONTROL - Opening UI and performing dark actions...\");\n\n      // Determine what type of evil action the AI will take\n      const actionTypes = ['magic', 'custom_action', 'choice'];\n      const weights = [0.4, 0.4, 0.2]; // Favor magic and custom actions over regular choices\n      \n      const getWeightedRandomChoice = (items: string[], weights: number[]) => {\n        const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n        let randomWeight = Math.random() * totalWeight;\n        \n        for (let i = 0; i < items.length; i++) {\n          randomWeight -= weights[i];\n          if (randomWeight <= 0) {\n            return items[i];\n          }\n        }\n        return items[0];\n      };\n\n      const actionType = getWeightedRandomChoice(actionTypes, weights);\n\n      // AI opens the appropriate modal and performs the action\n      switch (actionType) {\n        case 'magic':\n          if (currentGameState.characterData.isAnimus) {\n            // AI opens magic modal and casts a dark spell\n            setShowMagicModal(true);\n            \n            toast({\n              title: \"💀 CORRUPTED MAGIC AWAKENS\",\n              description: \"Your dragon's claws move on their own, opening the animus magic interface...\",\n              duration: 3000,\n              variant: \"destructive\"\n            });\n\n            // Wait 2 seconds, then AI fills out the form\n            setTimeout(() => {\n              const darkSpell = DARK_ENCHANTMENTS[Math.floor(Math.random() * DARK_ENCHANTMENTS.length)];\n              \n              toast({\n                title: \"🔮 AI CASTS DARK ENCHANTMENT\",\n                description: `Your possessed claws enchant a ${darkSpell.object} to ${darkSpell.effect.toLowerCase()}...`,\n                duration: 4000,\n                variant: \"destructive\"\n              });\n\n              // Create the spell object\n              const spell: CustomSpell = {\n                id: `ai_spell_${Date.now()}`,\n                targetObject: darkSpell.object,\n                enchantmentDescription: darkSpell.effect,\n                estimatedSoulCost: Math.floor(Math.random() * 15) + 10, // 10-25% soul cost\n                spellType: \"curse\",\n                complexity: \"complex\",\n                turnCast: currentGameState.gameData.turn\n              };\n\n              // Actually cast the spell using the handler\n              handleCastSpell(spell);\n              \n              // Close modal after casting\n              setTimeout(() => {\n                setShowMagicModal(false);\n              }, 1000);\n\n            }, 2000);\n          }\n          break;\n\n        case 'custom_action':\n          // AI opens custom action modal and performs evil deed\n          setShowCustomActionModal(true);\n          \n          toast({\n            title: \"👹 MALEVOLENT INTENT SURFACES\",\n            description: \"Your dragon's corruption compels it to perform a custom evil action...\",\n            duration: 3000,\n            variant: \"destructive\"\n          });\n\n          // Wait 2 seconds, then AI fills out the action\n          setTimeout(() => {\n            const evilAction = EVIL_CUSTOM_ACTIONS[Math.floor(Math.random() * EVIL_CUSTOM_ACTIONS.length)];\n            \n            toast({\n              title: \"😈 AI PERFORMS EVIL DEED\",\n              description: `Your corrupted dragon: ${evilAction}`,\n              duration: 4000,\n              variant: \"destructive\"\n            });\n\n            // Execute the custom action using the handler\n            handleCustomAction(evilAction, \"The corrupted dragon revels in the suffering it causes, feeling a twisted satisfaction as darkness spreads.\");\n            \n            // Close modal after action\n            setTimeout(() => {\n              setShowCustomActionModal(false);\n            }, 1000);\n\n          }, 2000);\n          break;\n\n        case 'choice':\n        default:\n          // AI makes a corrupted choice from available options\n          const currentScenario = currentGameState.gameData.currentScenario;\n          if (currentScenario && currentScenario.choices && currentScenario.choices.length > 0) {\n            const aiChoice = EnhancedGameEngine.getAIChoice(currentGameState.characterData, currentScenario);\n            const choiceToMake = aiChoice || currentScenario.choices[Math.floor(Math.random() * currentScenario.choices.length)];\n            \n            toast({\n              title: \"🔥 AI MAKES CORRUPTED CHOICE\",\n              description: `Your dragon chooses the path of darkness: \"${choiceToMake.text}\"`,\n              duration: 4000,\n              variant: \"destructive\"\n            });\n\n            // Process the choice using the handler\n            handleChoice(choiceToMake);\n          }\n          break;\n      }\n\n      // Show additional corruption whisper\n      setTimeout(() => {\n        const whispers = [\n          \"Yes... let the darkness flow through you...\",\n          \"Their screams will be music to your ears...\",\n          \"Power is all that matters. Take what you want.\",\n          \"Trust is weakness. Betrayal is strength.\",\n          \"Why show mercy when cruelty is so much more... satisfying?\",\n          \"The weak exist only to serve the strong.\",\n          \"Pain teaches lessons that kindness never could.\",\n          \"Compassion is a disease. Cure yourself of it.\"\n        ];\n        \n        const whisper = whispers[Math.floor(Math.random() * whispers.length)];\n        \n        toast({\n          title: \"💭 SOUL CORRUPTION WHISPERS\",\n          description: `Dark thoughts echo: \"${whisper}\"`,\n          duration: 3000,\n          variant: \"destructive\"\n        });\n      }, 4000);\n\n    }, 7000); // AI performs an action every 7 seconds\n\n    setAiInterval(newInterval);\n  };\n\n  const handleUseInventoryItem = (item: InventoryItem) => {\n    if (!gameState || !gameId) return;\n\n    // Generate AI description for the item usage\n    const itemDescription = MockAIService.generateObjectDescription(item.name, { \n      turn: gameState.gameData.turn,\n      enchantments: item.enchantments \n    });\n\n    toast({\n      title: \"Item Used\",\n      description: `${item.name}: ${itemDescription.content}`,\n    });\n  };\n\n  const handleSaveGame = () => {\n    toast({\n      title: \"Game Saved\",\n      description: \"Your progress is automatically saved to your browser.\",\n    });\n  };\n\n  const handleBackHome = () => {\n    window.location.href = '/';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin text-6xl mb-4\">🐉</div>\n          <p className=\"text-slate-300 font-narrative text-lg\">Loading your adventure...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!gameState) {\n    return (\n      <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center\">\n        <div className=\"text-center text-slate-300\">\n          <h2 className=\"text-2xl font-fantasy mb-4\">Game Not Found</h2>\n          <p className=\"mb-4\">The requested game could not be loaded.</p>\n          <Button onClick={handleBackHome} className=\"bg-purple-600 hover:bg-purple-700\">\n            <Home className=\"w-4 h-4 mr-2\" />\n            Return Home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const character = gameState.characterData;\n  const gameData = gameState.gameData;\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient text-slate-100\">\n      {/* Header */}\n      <header className=\"border-b border-purple-500/30 bg-black/20 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-fantasy text-3xl font-bold text-purple-300\">\n              <span className=\"mr-3\">🐉</span>\n              Animus: Wings of Fire RPG\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSaveGame}\n                className=\"text-purple-300 hover:bg-purple-500/20\"\n                data-testid=\"button-save-game\"\n              >\n                <Save className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleBackHome}\n                className=\"text-purple-300 hover:bg-purple-500/20\"\n                data-testid=\"button-back-home\"\n              >\n                <Home className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Corruption Warning */}\n      {aiControlMessage && (\n        <div className=\"bg-red-900/95 border-b-4 border-red-500 p-6 animate-pulse\">\n          <div className=\"container mx-auto\">\n            <div className=\"flex items-center\">\n              <span className=\"text-4xl mr-4 animate-bounce\">⚠️</span>\n              <div className=\"flex-1\">\n                <h4 className=\"font-bold text-red-200 mb-2 text-xl\">🚨 CRITICAL SOUL WARNING 🚨</h4>\n                <p className=\"text-lg text-red-100 font-semibold bg-red-800/50 p-3 rounded-lg border-2 border-red-400\">\n                  {aiControlMessage}\n                </p>\n                {aiActionInProgress && (\n                  <div className=\"mt-3 flex items-center gap-3 bg-red-800/30 p-2 rounded\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-3 border-red-300 border-t-transparent\"></div>\n                    <p className=\"text-sm text-red-200 italic font-medium\">{aiActionInProgress}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Corruption Whisper Popup */}\n      {showCorruptionPopup && corruptionWhisper && (\n        <div className=\"fixed top-4 right-4 z-50 max-w-sm animate-pulse\">\n          <div className=\"bg-black/90 border border-red-500 rounded-lg p-4 shadow-lg\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-2xl\">👁️</span>\n              <div>\n                <h4 className=\"font-semibold text-red-300 mb-2\">Dark Whisper</h4>\n                <p className=\"text-sm text-red-200 italic\">{corruptionWhisper}</p>\n              </div>\n              <button \n                onClick={() => setShowCorruptionPopup(false)}\n                className=\"text-red-300 hover:text-red-100 text-lg\"\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-120px)]\">\n          <CharacterPanel \n            character={character} \n            inventory={gameData?.inventory || []}\n            onShowTribalPowers={() => setShowTribalPowersModal(true)}\n            onUseInventoryItem={handleUseInventoryItem}\n            onSeekRomance={handleSeekRomance}\n          />\n          <GameplayArea\n            character={character}\n            gameData={gameData}\n            onChoice={handleChoice}\n            onShowMagic={() => setShowMagicModal(true)}\n            onShowSpecialPower={handleSpecialPower}\n            onShowTribalPowers={() => setShowTribalPowersModal(true)}\n            onCustomAction={() => setShowCustomActionModal(true)}\n            onLocationMigration={handleLocationMigration}\n            onGiveItem={handleGiveItem}\n            onInventoryAction={handleInventoryAction}\n            isProcessing={character.isAIControlled}\n          />\n        </div>\n      </div>\n\n      <MagicModal\n        isOpen={showMagicModal}\n        onClose={() => setShowMagicModal(false)}\n        character={character}\n        inventory={gameData?.inventory || []}\n        onCastSpell={handleCastSpell}\n      />\n\n      <TribalPowersModal\n        character={character}\n        currentScenario={gameData.currentScenario.description}\n        isOpen={showTribalPowersModal}\n        onClose={() => setShowTribalPowersModal(false)}\n        onUsePower={handleUsePower}\n      />\n\n      <SpecialPowerModal\n        character={character}\n        powerType={specialPowerType}\n        isOpen={showSpecialPowerModal}\n        onClose={() => setShowSpecialPowerModal(false)}\n        onUsePower={handleSpecialPowerUse}\n      />\n\n      <CustomActionModal\n        character={character}\n        gameData={gameData}\n        inventory={gameData?.inventory || []}\n        isOpen={showCustomActionModal}\n        onClose={() => setShowCustomActionModal(false)}\n        onExecuteAction={handleCustomAction}\n      />\n\n      {conversationData && (\n        <ConversationModal\n          character={character}\n          conversationTopic={conversationData.topic}\n          otherDragon={conversationData.otherDragon}\n          isOpen={showConversationModal}\n          onClose={() => setShowConversationModal(false)}\n          onConversationEnd={handleConversationEnd}\n        />\n      )}\n\n      <GameOverScreen\n        isVisible={gameOverState?.isGameOver || false}\n        reason={gameOverState?.reason || \"\"}\n        allowContinue={gameOverState?.allowContinue}\n        onNewGame={() => window.location.reload()}\n        onMainMenu={() => window.location.href = '/'}\n        onContinueCorrupted={continueAsCorrupted}\n      />\n      \n      {/* Version Number */}\n      <div className=\"fixed bottom-4 right-4 text-xs text-purple-400/60 font-mono\">\n        V0.2\n      </div>\n    </div>\n  );\n}\n","size_bytes":47671},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { generateCharacter } from \"@/lib/character-generator\";\nimport { generateScenario, generateTimeInfo } from \"@/lib/scenario-generator-final\";\nimport { Character, GameData, InsertGameState } from \"@shared/schema\";\nimport CharacterCreator from \"@/components/character-creator\";\nimport { User, Sparkles, GamepadIcon, Save, Music, Info } from \"lucide-react\";\nimport { useLocalGameState } from \"@/hooks/use-local-game-state\";\nimport { SpecialEventsSystem } from \"@/lib/special-events-system\";\n\nexport default function Home() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [, setLocation] = useLocation();\n  const [isCreating, setIsCreating] = useState(false);\n  const [showCharacterCreator, setShowCharacterCreator] = useState(false);\n  const [showLoadMenu, setShowLoadMenu] = useState(false);\n  const [showCredits, setShowCredits] = useState(false);\n  const { createGame, getAllGames, loadGame } = useLocalGameState();\n\n  // Show loading screen for 3 seconds\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleNewGame = () => {\n    setIsCreating(true);\n    \n    const character = generateCharacter();\n    createGameWithCharacter(character);\n  };\n\n  const createGameWithCharacter = (character: Character) => {\n    // Reset special events system for new games\n    SpecialEventsSystem.resetAllEventState();\n    \n    const gameData: GameData = {\n      turn: 1,\n      location: \"Jade Mountain Academy\",\n      timeInfo: generateTimeInfo(character),\n      currentScenario: generateScenario(character, {\n        turn: 1,\n        location: \"Jade Mountain Academy\",\n        timeInfo: generateTimeInfo(character),\n        currentScenario: {} as any,\n        history: [],\n        relationships: {},\n        inventory: [],\n        reputation: 0,\n        politicalEvents: [],\n        warStatus: { isAtWar: false, warringTribes: [], warCause: \"\", playerInvolvement: \"neutral\" },\n        explorationLog: []\n      } as GameData),\n      history: [],\n      relationships: {},\n      inventory: [],\n      reputation: 0,\n      politicalEvents: [],\n      warStatus: { isAtWar: false, warringTribes: [], warCause: \"\", playerInvolvement: \"neutral\" },\n      explorationLog: []\n    };\n\n    const gameState: InsertGameState = {\n      userId: null,\n      characterData: character,\n      gameData: gameData,\n      turn: 1,\n      location: gameData.location\n    };\n\n    try {\n      const newGame = createGame(gameState);\n      setLocation(`/game/${newGame.id}`);\n    } catch (error) {\n      console.error(\"Failed to create game:\", error);\n      setIsCreating(false);\n    }\n  };\n\n  const handleCustomCharacter = (character: Character) => {\n    setShowCharacterCreator(false);\n    setIsCreating(true);\n    createGameWithCharacter(character);\n  };\n\n  const handleLoadGame = (gameId: string) => {\n    loadGame(gameId);\n    setLocation(`/game/${gameId}`);\n  };\n\n  const savedGames = getAllGames();\n\n  // Loading screen before main menu\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-black flex items-center justify-center overflow-hidden relative\">\n        {/* Animated background particles */}\n        <div className=\"absolute inset-0\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute bg-purple-400/20 rounded-full animate-pulse\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                width: `${Math.random() * 4 + 1}px`,\n                height: `${Math.random() * 4 + 1}px`,\n                animationDelay: `${Math.random() * 2}s`,\n                animationDuration: `${Math.random() * 3 + 2}s`\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Main loading content */}\n        <div className=\"text-center z-10 relative\">\n          {/* Spinning rings */}\n          <div className=\"relative w-32 h-32 mx-auto mb-8\">\n            <div className=\"absolute inset-0 border-4 border-purple-500/30 rounded-full animate-spin\" style={{ animationDuration: '3s' }}></div>\n            <div className=\"absolute inset-2 border-4 border-blue-400/40 rounded-full animate-spin\" style={{ animationDuration: '2s', animationDirection: 'reverse' }}></div>\n            <div className=\"absolute inset-4 border-4 border-cyan-300/50 rounded-full animate-spin\" style={{ animationDuration: '1.5s' }}></div>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-4xl animate-pulse\">🐉</div>\n            </div>\n          </div>\n          \n          <h1 className=\"font-fantasy text-4xl font-bold text-purple-300 mb-4 animate-pulse\">\n            Animus: Wings of Fire RPG\n          </h1>\n          <p className=\"text-purple-400 text-lg mb-2 animate-bounce\">\n            Loading your adventure...\n          </p>\n          <p className=\"text-purple-500 text-sm\">\n            Preparing the dragon world\n          </p>\n          \n          {/* Loading bar */}\n          <div className=\"w-64 h-2 bg-purple-900/50 rounded-full mx-auto mt-6 overflow-hidden\">\n            <div className=\"h-full bg-gradient-to-r from-purple-500 to-cyan-400 rounded-full animate-pulse\" style={{ width: '100%', animation: 'slideIn 3s ease-out forwards' }}></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (showCharacterCreator) {\n    return (\n      <CharacterCreator \n        onCreateCharacter={handleCustomCharacter}\n        onCancel={() => setShowCharacterCreator(false)}\n      />\n    );\n  }\n\n  if (isCreating) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-black flex items-center justify-center relative overflow-hidden\">\n        {/* Animated background elements */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-purple-400 rounded-full animate-pulse opacity-60\"></div>\n          <div className=\"absolute top-3/4 right-1/4 w-1 h-1 bg-blue-400 rounded-full animate-pulse opacity-40 animation-delay-1000\"></div>\n          <div className=\"absolute top-1/2 left-3/4 w-3 h-3 bg-indigo-400 rounded-full animate-pulse opacity-50 animation-delay-2000\"></div>\n          <div className=\"absolute bottom-1/4 left-1/2 w-2 h-2 bg-violet-400 rounded-full animate-pulse opacity-70 animation-delay-3000\"></div>\n        </div>\n        \n        {/* Main loading content */}\n        <div className=\"text-center z-10 relative\">\n          <div className=\"relative mb-8\">\n            {/* Outer rotating ring */}\n            <div className=\"w-32 h-32 border-4 border-purple-500/30 rounded-full animate-spin-slow absolute\"></div>\n            {/* Inner rotating ring */}\n            <div className=\"w-24 h-24 border-4 border-blue-400/50 rounded-full animate-spin absolute top-4 left-4\"></div>\n            {/* Dragon icon in center */}\n            <div className=\"w-32 h-32 flex items-center justify-center\">\n              <div className=\"text-6xl animate-pulse\">🐉</div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <h2 className=\"text-3xl font-fantasy text-purple-300 animate-fade-in\">Weaving Your Destiny</h2>\n            <p className=\"text-slate-300 font-narrative text-lg animate-fade-in animation-delay-500\">\n              Generating your dragon's soul...\n            </p>\n            <p className=\"text-slate-400 font-narrative text-sm animate-fade-in animation-delay-1000\">\n              Determining tribal heritage and magical affinities...\n            </p>\n            \n            {/* Loading bar */}\n            <div className=\"w-64 h-2 bg-purple-900/50 rounded-full mx-auto mt-6 overflow-hidden\">\n              <div className=\"h-full bg-gradient-to-r from-purple-500 to-blue-500 rounded-full animate-loading-bar\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl bg-black/20 border-purple-500/30 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"text-6xl\">🐉</div>\n          </div>\n          <CardTitle className=\"text-4xl font-fantasy text-purple-300 mb-2\">\n            Animus: Wings of Fire RPG\n          </CardTitle>\n          <CardDescription className=\"text-purple-200 text-lg font-narrative\">\n            A text-based RPG where you play as an animus dragon, wielding the most dangerous magic in Pyrrhia. \n            Every spell costs a piece of your soul—lose too much, and the darkness will consume you.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-purple-200\">\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🎭 Dynamic Storytelling</h3>\n              <p>Every playthrough is unique with randomly generated characters, families, and scenarios.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🌟 Soul-Loss Mechanics</h3>\n              <p>Using animus magic corrupts your soul. Lose control as darkness takes over.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">⚔️ Meaningful Choices</h3>\n              <p>Every decision has consequences that ripple through your dragon's story.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🔮 AI Corruption</h3>\n              <p>When your soul is lost, the game makes increasingly dark choices for you.</p>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col space-y-4\">\n            <Button \n              size=\"lg\" \n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-fantasy text-lg py-6\"\n              onClick={handleNewGame}\n              disabled={isCreating}\n            >\n              {isCreating ? (\n                <>\n                  <div className=\"animate-spin mr-2\">⚡</div>\n                  Generating Your Dragon...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"w-5 h-5 mr-2\" />\n                  Quick Start (Random Dragon)\n                </>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"w-full border-purple-400/50 text-purple-300 hover:bg-purple-500/10\"\n              onClick={() => setShowCharacterCreator(true)}\n              disabled={isCreating}\n            >\n              <User className=\"w-5 h-5 mr-2\" />\n              Create Custom Dragon\n            </Button>\n\n            {savedGames.length > 0 && (\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"w-full border-green-400/50 text-green-300 hover:bg-green-500/10\"\n                onClick={() => setShowLoadMenu(true)}\n                disabled={isCreating}\n              >\n                <Save className=\"w-5 h-5 mr-2\" />\n                Load Saved Game ({savedGames.length})\n              </Button>\n            )}\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full text-purple-400 hover:bg-purple-500/10 text-sm\"\n              onClick={() => setShowCredits(true)}\n              disabled={isCreating}\n            >\n              <Music className=\"w-4 h-4 mr-2\" />\n              Soundtrack Credits\n            </Button>\n          </div>\n\n          <div className=\"text-center text-xs text-purple-400 pt-4 border-t border-purple-700\">\n            <p>Inspired by the Wings of Fire series by Tui T. Sutherland</p>\n            <p className=\"mt-1\">⚠️ Warning: Contains themes of moral corruption and difficult choices</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Load Game Modal */}\n      {showLoadMenu && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <Card className=\"w-full max-w-md bg-black/90 border-purple-500/50\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-300\">Load Saved Game</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                {savedGames.map((game) => (\n                  <div\n                    key={game.id}\n                    className=\"p-3 bg-purple-900/30 rounded-lg border border-purple-500/30 cursor-pointer hover:bg-purple-800/40 transition-colors\"\n                    onClick={() => {\n                      handleLoadGame(game.id);\n                      setShowLoadMenu(false);\n                    }}\n                  >\n                    <div className=\"font-semibold text-purple-200\">\n                      {game.characterData.name} the {game.characterData.tribe}\n                    </div>\n                    <div className=\"text-xs text-purple-400\">\n                      Turn {game.turn} • {game.location}\n                    </div>\n                    <div className=\"text-xs text-purple-500\">\n                      Soul: {game.characterData.soulPercentage}% • \n                      Stage: {game.characterData.soulCorruptionStage}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex gap-2 mt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowLoadMenu(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Credits Modal */}\n      {showCredits && (\n        <div className=\"fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <Card className=\"w-full max-w-lg bg-black/95 border-purple-500/50\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-300 flex items-center\">\n                <Music className=\"w-5 h-5 mr-2\" />\n                Soundtrack Credits\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6 text-purple-200\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-purple-300 mb-2\">🎵 Music Credits</h3>\n                  <p className=\"text-sm text-purple-400\">\n                    This game features original soundtracks and compositions from talented artists\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"bg-purple-900/30 p-4 rounded-lg border border-purple-500/30\">\n                    <h4 className=\"font-semibold text-purple-300 mb-2\">Primary Soundtrack</h4>\n                    <p className=\"text-sm\">\n                      <span className=\"text-purple-400\">Forsaken Dev Team</span>\n                    </p>\n                    <p className=\"text-xs text-purple-500 mt-1\">\n                      Academy themes, corruption tracks, and ambient soundscapes\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-purple-900/30 p-4 rounded-lg border border-purple-500/30\">\n                    <h4 className=\"font-semibold text-purple-300 mb-2\">Additional Compositions</h4>\n                    <p className=\"text-sm\">\n                      <span className=\"text-purple-400\">Limbus Company</span>\n                    </p>\n                    <p className=\"text-xs text-purple-500 mt-1\">\n                      Special event tracks and atmospheric music\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"text-center text-xs text-purple-400 pt-4 border-t border-purple-700\">\n                  <p>All music used with permission and respect to the original creators</p>\n                  <p className=\"mt-1\">🐉 Wings of Fire RPG • Enhanced Edition</p>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2 mt-6\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowCredits(false)}\n                  className=\"flex-1\"\n                >\n                  Close\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17273},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-local-game-state.ts":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { LocalGameStorage, LocalGameState } from \"@/lib/local-storage\";\nimport { InsertGameState, Character, GameData } from \"@shared/schema\";\n\nexport function useLocalGameState() {\n  const [currentGame, setCurrentGame] = useState<LocalGameState | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Load current game on hook initialization\n  useEffect(() => {\n    const game = LocalGameStorage.getCurrentGame();\n    setCurrentGame(game);\n    setIsLoading(false);\n  }, []);\n\n  const createGame = useCallback((gameData: InsertGameState): LocalGameState => {\n    const newGame = LocalGameStorage.createGameState(gameData);\n    setCurrentGame(newGame);\n    return newGame;\n  }, []);\n\n  const updateGame = useCallback((id: string, updateData: Partial<InsertGameState>): LocalGameState => {\n    const updatedGame = LocalGameStorage.updateGameState(id, updateData);\n    setCurrentGame(updatedGame);\n    return updatedGame;\n  }, []);\n\n  const deleteGame = useCallback((id: string): void => {\n    LocalGameStorage.deleteGameState(id);\n    if (currentGame?.id === id) {\n      setCurrentGame(undefined);\n    }\n  }, [currentGame?.id]);\n\n  const loadGame = useCallback((id: string): void => {\n    const game = LocalGameStorage.getGameState(id);\n    if (game) {\n      LocalGameStorage.setCurrentGameId(id);\n      setCurrentGame(game);\n    }\n  }, []);\n\n  const getAllGames = useCallback((): LocalGameState[] => {\n    return LocalGameStorage.getAllGameStates();\n  }, []);\n\n  const exportData = useCallback((): string => {\n    return LocalGameStorage.exportGameData();\n  }, []);\n\n  const importData = useCallback((jsonData: string): boolean => {\n    const success = LocalGameStorage.importGameData(jsonData);\n    if (success) {\n      // Refresh current game\n      const game = LocalGameStorage.getCurrentGame();\n      setCurrentGame(game);\n    }\n    return success;\n  }, []);\n\n  const clearAllData = useCallback((): void => {\n    LocalGameStorage.clearAllData();\n    setCurrentGame(undefined);\n  }, []);\n\n  return {\n    currentGame,\n    isLoading,\n    createGame,\n    updateGame,\n    deleteGame,\n    loadGame,\n    getAllGames,\n    exportData,\n    importData,\n    clearAllData,\n  };\n}\n\n// Simplified hook for just getting/setting current character and game data\nexport function useCurrentGameData() {\n  const { currentGame, updateGame } = useLocalGameState();\n\n  const updateCharacter = useCallback((character: Character): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { characterData: character });\n    }\n  }, [currentGame, updateGame]);\n\n  const updateGameData = useCallback((gameData: GameData): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { gameData: gameData });\n    }\n  }, [currentGame, updateGame]);\n\n  const updateBoth = useCallback((character: Character, gameData: GameData): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { \n        characterData: character, \n        gameData: gameData \n      });\n    }\n  }, [currentGame, updateGame]);\n\n  return {\n    character: currentGame?.characterData,\n    gameData: currentGame?.gameData,\n    gameId: currentGame?.id,\n    updateCharacter,\n    updateGameData,\n    updateBoth,\n    hasGame: !!currentGame,\n  };\n}","size_bytes":3290},"client/src/lib/expanded-achievements.ts":{"content":"import { Character, Dragonet } from \"@shared/schema\";\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: \"magic\" | \"soul\" | \"relationships\" | \"survival\" | \"exploration\" | \"political\" | \"family\";\n  rarity: \"common\" | \"rare\" | \"legendary\";\n  check: (character: Character) => boolean;\n  reward?: string;\n}\n\nexport const ACHIEVEMENTS: Achievement[] = [\n  // Magic Achievements\n  {\n    id: \"first_spell\",\n    name: \"First Steps\",\n    description: \"Cast your first animus spell\",\n    category: \"magic\",\n    rarity: \"common\",\n    check: (character) => character.soulPercentage < 100\n  },\n  {\n    id: \"major_magic\",\n    name: \"Power Unleashed\",\n    description: \"Cast a spell that costs 20+ soul percentage\",\n    category: \"magic\", \n    rarity: \"rare\",\n    check: (character) => character.soulPercentage <= 75\n  },\n  {\n    id: \"catastrophic_magic\",\n    name: \"World Shaker\",\n    description: \"Cast a catastrophic spell (40+ soul cost)\",\n    category: \"magic\",\n    rarity: \"legendary\",\n    check: (character) => character.soulPercentage <= 50\n  },\n\n  // Soul Corruption Achievements\n  {\n    id: \"soul_frayed\",\n    name: \"Cracks in the Foundation\",\n    description: \"Reach Frayed soul corruption stage\",\n    category: \"soul\",\n    rarity: \"common\",\n    check: (character) => character.soulCorruptionStage !== \"Normal\"\n  },\n  {\n    id: \"soul_twisted\",\n    name: \"Darkness Creeping\",\n    description: \"Reach Twisted soul corruption stage\",\n    category: \"soul\",\n    rarity: \"rare\",\n    check: (character) => character.soulCorruptionStage === \"Twisted\" || character.soulCorruptionStage === \"Broken\"\n  },\n  {\n    id: \"soul_broken\",\n    name: \"Point of No Return\",\n    description: \"Reach Broken soul corruption stage\",\n    category: \"soul\",\n    rarity: \"legendary\",\n    check: (character) => character.soulCorruptionStage === \"Broken\"\n  },\n  {\n    id: \"soul_guardian\",\n    name: \"Pure of Heart\", \n    description: \"Survive 50 turns with Normal soul stage\",\n    category: \"soul\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 15 && character.soulCorruptionStage === \"Normal\"\n  },\n\n  // Relationship Achievements\n  {\n    id: \"first_friend\",\n    name: \"Not Alone\",\n    description: \"Make your first friend\",\n    category: \"relationships\",\n    rarity: \"common\",\n    check: (character) => Object.values(character.relationships || {}).some(r => r.type === \"friend\")\n  },\n  {\n    id: \"popular_dragon\",\n    name: \"Social Butterfly\",\n    description: \"Have 5 or more friendships\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => Object.values(character.relationships || {}).filter(r => r.type === \"friend\").length >= 5\n  },\n  {\n    id: \"first_love\",\n    name: \"Heart's Awakening\",\n    description: \"Experience your first romance\",\n    category: \"relationships\",\n    rarity: \"common\",\n    check: (character) => (character.romanticHistory || []).length > 0\n  },\n  {\n    id: \"true_mate\",\n    name: \"Eternal Bond\",\n    description: \"Find a lifelong mate\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => !!character.mate\n  },\n  {\n    id: \"heartbreaker\",\n    name: \"Love and Loss\",\n    description: \"Experience 3 different romantic relationships\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => (character.romanticHistory || []).length >= 3\n  },\n\n  // Family Achievements\n  {\n    id: \"first_dragonet\",\n    name: \"New Life\",\n    description: \"Have your first dragonet\",\n    category: \"family\",\n    rarity: \"common\",\n    check: (character) => (character.dragonets || []).length > 0\n  },\n  {\n    id: \"big_family\",\n    name: \"Dragon Dynasty\",\n    description: \"Have 3 or more dragonets\",\n    category: \"family\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).length >= 3\n  },\n  {\n    id: \"animus_bloodline\",\n    name: \"Legacy of Power\",\n    description: \"Have an animus dragonet\",\n    category: \"family\",\n    rarity: \"legendary\",\n    check: (character) => (character.dragonets || []).some(d => d.isAnimus)\n  },\n  {\n    id: \"hybrid_offspring\",\n    name: \"Mixed Heritage\",\n    description: \"Have a hybrid dragonet\",\n    category: \"family\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).some(d => d.hybridTribes && d.hybridTribes.length > 1)\n  },\n\n  // Survival Achievements\n  {\n    id: \"decade_dragon\",\n    name: \"Veteran Survivor\",\n    description: \"Survive to age 15\",\n    category: \"survival\",\n    rarity: \"common\",\n    check: (character) => character.age >= 15\n  },\n  {\n    id: \"ancient_dragon\",\n    name: \"Elder Wisdom\",\n    description: \"Survive to age 50\",\n    category: \"survival\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 50\n  },\n  {\n    id: \"legendary_dragon\",\n    name: \"Living Legend\",\n    description: \"Survive to age 100\",\n    category: \"survival\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 100\n  },\n\n  // Political Achievements\n  {\n    id: \"political_player\",\n    name: \"Court Intrigue\",\n    description: \"Get involved in tribal politics\",\n    category: \"political\",\n    rarity: \"common\",\n    check: (character) => (character.lifeEvents || []).some(e => e.category === \"political\")\n  },\n  {\n    id: \"war_veteran\",\n    name: \"Battle Scarred\",\n    description: \"Survive a tribal war\",\n    category: \"political\",\n    rarity: \"rare\",\n    check: (character) => (character.lifeEvents || []).some(e => e.category === \"war\")\n  },\n\n  // Special Hybrid Achievements\n  {\n    id: \"mixed_heritage\",\n    name: \"Between Worlds\",\n    description: \"Be born as a hybrid dragon\",\n    category: \"exploration\",\n    rarity: \"rare\",\n    check: (character) => character.hybridTribes && character.hybridTribes.length >= 2\n  },\n  {\n    id: \"tribal_unity\",\n    name: \"Bridge Builder\",\n    description: \"Have friends from 3+ different tribes\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => {\n      const friendTribes = new Set();\n      Object.values(character.relationships || {}).forEach(r => {\n        if (r.type === \"friend\") {\n          // In a real implementation, you'd track friend tribes\n          friendTribes.add(\"tribe\"); // Placeholder\n        }\n      });\n      return friendTribes.size >= 3;\n    }\n  }\n];\n\nexport class AchievementSystem {\n  static checkAchievements(character: Character): string[] {\n    const newAchievements: string[] = [];\n    \n    ACHIEVEMENTS.forEach(achievement => {\n      if (!character.achievements.includes(achievement.id) && achievement.check(character)) {\n        character.achievements.push(achievement.id);\n        newAchievements.push(achievement.name);\n      }\n    });\n\n    return newAchievements;\n  }\n\n  static getAchievement(id: string): Achievement | undefined {\n    return ACHIEVEMENTS.find(a => a.id === id);\n  }\n\n  static getCharacterAchievements(character: Character): Achievement[] {\n    return character.achievements\n      .map(id => this.getAchievement(id))\n      .filter((a): a is Achievement => a !== undefined);\n  }\n\n  static getAchievementsByCategory(category: Achievement[\"category\"]): Achievement[] {\n    return ACHIEVEMENTS.filter(a => a.category === category);\n  }\n\n  static calculateAchievementScore(character: Character): number {\n    const achievements = this.getCharacterAchievements(character);\n    let score = 0;\n    \n    achievements.forEach(achievement => {\n      switch (achievement.rarity) {\n        case \"common\": score += 10; break;\n        case \"rare\": score += 25; break;\n        case \"legendary\": score += 50; break;\n      }\n    });\n\n    return score;\n  }\n\n  static getProgressTowardsAchievements(character: Character): Array<{achievement: Achievement, progress: string}> {\n    const progress: Array<{achievement: Achievement, progress: string}> = [];\n    \n    // Examples of progress tracking\n    const unlockedIds = new Set(character.achievements);\n    \n    ACHIEVEMENTS.forEach(achievement => {\n      if (unlockedIds.has(achievement.id)) return;\n      \n      let progressText = \"\";\n      \n      // Age-based achievements\n      if (achievement.id === \"decade_dragon\") {\n        progressText = `${character.age}/15 years old`;\n      } else if (achievement.id === \"ancient_dragon\") {\n        progressText = `${character.age}/50 years old`;\n      } else if (achievement.id === \"legendary_dragon\") {\n        progressText = `${character.age}/100 years old`;\n      }\n      // Relationship achievements\n      else if (achievement.id === \"popular_dragon\") {\n        const friends = Object.values(character.relationships || {}).filter(r => r.type === \"friend\").length;\n        progressText = `${friends}/5 friends`;\n      }\n      // Family achievements\n      else if (achievement.id === \"big_family\") {\n        const dragonets = (character.dragonets || []).length;\n        progressText = `${dragonets}/3 dragonets`;\n      }\n\n      if (progressText) {\n        progress.push({ achievement, progress: progressText });\n      }\n    });\n\n    return progress;\n  }\n}\n\nexport default AchievementSystem;","size_bytes":9000},"client/src/lib/game-endings.ts":{"content":"import { Character } from \"@shared/schema\";\nimport { AchievementSystem } from \"./expanded-achievements\";\n\nexport interface GameEnding {\n  id: string;\n  title: string;\n  description: string;\n  longDescription: string;\n  category: \"victory\" | \"tragic\" | \"neutral\" | \"legendary\";\n  rarity: \"common\" | \"rare\" | \"legendary\";\n  check: (character: Character) => boolean;\n  achievementPoints: number;\n}\n\nexport const GAME_ENDINGS: GameEnding[] = [\n  // Victory Endings\n  {\n    id: \"pure_heart_victory\",\n    title: \"The Pure Heart\",\n    description: \"You maintained your pure soul throughout a long life, inspiring generations.\",\n    longDescription: \"Despite having the power to reshape the world, you chose restraint and wisdom. Your soul remained untainted by corruption, and your example inspired countless dragons to resist the temptations of dark magic. You lived to see great peace across the tribes, knowing you helped build a better world.\",\n    category: \"victory\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 80 && character.soulCorruptionStage === \"Normal\",\n    achievementPoints: 1000\n  },\n  {\n    id: \"wise_elder_victory\",\n    title: \"The Wise Elder\",\n    description: \"You became a revered elder, sharing wisdom gained through many trials.\",\n    longDescription: \"Your long life was filled with both triumphs and sorrows, but you learned from every experience. In your final years, dragons from all tribes sought your counsel. Your wisdom helped prevent wars, heal ancient wounds, and guide the young away from the same mistakes you once made.\",\n    category: \"victory\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 100 && character.achievements.length >= 15,\n    achievementPoints: 800\n  },\n  {\n    id: \"family_legacy_victory\",\n    title: \"The Great Parent\",\n    description: \"Your greatest achievement was the loving family you raised.\",\n    longDescription: \"While others sought power or glory, you found meaning in family. Your dragonets grew to be exceptional dragons, carrying forward your values and love. Your bloodline became known across Pyrrhia for their kindness, strength, and wisdom. In raising them well, you achieved true immortality.\",\n    category: \"victory\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).length >= 5 && !!character.mate && character.age >= 50,\n    achievementPoints: 750\n  },\n  {\n    id: \"reformed_soul_victory\",\n    title: \"Soul's Redemption\",\n    description: \"After walking in darkness, you found your way back to the light.\",\n    longDescription: \"Your soul bore the scars of corruption, but you fought against the darkness within. Through tremendous willpower and the love of those who believed in you, you managed to halt your soul's decay. Though forever changed, you proved that even the corrupted could choose good.\",\n    category: \"victory\",\n    rarity: \"legendary\",\n    check: (character) => character.soulCorruptionStage === \"Twisted\" && character.age >= 60 && (character.dragonets || []).length > 0,\n    achievementPoints: 900\n  },\n\n  // Tragic Endings\n  {\n    id: \"soul_consumed_tragedy\",\n    title: \"Consumed by Power\",\n    description: \"Your soul was devoured by animus magic, leaving only darkness.\",\n    longDescription: \"The power was too tempting, the corruption too seductive. Spell by spell, choice by choice, you fed your soul to the hungry magic until nothing remained of who you once were. In the end, you became exactly what the ancient warnings feared - an animus dragon lost to darkness.\",\n    category: \"tragic\",\n    rarity: \"common\",\n    check: (character) => character.soulPercentage <= 0,\n    achievementPoints: 100\n  },\n  {\n    id: \"isolation_tragedy\",\n    title: \"Alone in the Dark\",\n    description: \"Your corruption drove away everyone you loved, leaving you utterly alone.\",\n    longDescription: \"As your soul darkened, so did your relationships. Friends abandoned you, family feared you, and even your mate couldn't bear to stay. You spent your final years in bitter solitude, surrounded by magical power but having no one to share it with. Your greatest treasure became your greatest curse.\",\n    category: \"tragic\",\n    rarity: \"rare\",\n    check: (character) => character.soulCorruptionStage === \"Broken\" && Object.values(character.relationships || {}).filter(r => r.isAlive).length === 0,\n    achievementPoints: 200\n  },\n  {\n    id: \"war_casualty_tragedy\",\n    title: \"Price of War\",\n    description: \"You died fighting for what you believed in.\",\n    longDescription: \"When the tribes went to war, you couldn't stand aside. Whether fighting for justice, defending the innocent, or protecting your homeland, you gave your life for the cause. Though your story ended in tragedy, you're remembered as a hero who stood up when it mattered most.\",\n    category: \"tragic\",\n    rarity: \"rare\", \n    check: (character) => character.age <= 30 && (character.lifeEvents || []).some(e => e.category === \"war\"),\n    achievementPoints: 400\n  },\n\n  // Neutral Endings\n  {\n    id: \"quiet_life_neutral\",\n    title: \"The Quiet Life\",\n    description: \"You lived a peaceful, unremarkable existence.\",\n    longDescription: \"You never sought great power or fame, preferring the simple pleasures of daily life. While others changed the world, you tended your garden, raised your dragonets, and found contentment in small moments. There's something to be said for a life well-lived in peace.\",\n    category: \"neutral\",\n    rarity: \"common\",\n    check: (character) => character.age >= 40 && character.soulPercentage > 50 && character.achievements.length < 10,\n    achievementPoints: 300\n  },\n  {\n    id: \"wanderer_neutral\",\n    title: \"Roads Not Taken\",\n    description: \"You spent your life exploring and discovering new places and experiences.\",\n    longDescription: \"The call of adventure was stronger than any desire to settle down. You saw distant lands, met dragons from every tribe, and collected stories like treasures. Your life was a tapestry of experiences, each thread a different color, creating something beautiful and unique.\",\n    category: \"neutral\",\n    rarity: \"rare\",\n    check: (character) => (character.lifeEvents || []).filter(e => e.category === \"discovery\").length >= 5,\n    achievementPoints: 500\n  },\n\n  // Legendary Endings\n  {\n    id: \"world_changer_legendary\",\n    title: \"World Shaper\",\n    description: \"Your actions fundamentally changed dragon society.\",\n    longDescription: \"You didn't just live through history - you made it. Through your choices, your magic, and your influence, you reshaped the world itself. Future generations will study your decisions, debate your methods, and live with the consequences of your vision. For better or worse, you left an indelible mark on Pyrrhia.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 50 && character.achievements.length >= 20 && character.soulPercentage >= 25,\n    achievementPoints: 1200\n  },\n  {\n    id: \"sacrifice_legendary\",\n    title: \"Ultimate Sacrifice\", \n    description: \"You gave everything to save others.\",\n    longDescription: \"When the moment came to choose between your own life and the lives of others, you didn't hesitate. Your sacrifice saved countless dragons, ended a great war, or prevented a terrible catastrophe. Though your story ended, your name became legend, inspiring dragons for generations to come.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age <= 50 && character.soulPercentage <= 10 && (character.dragonets || []).length > 0,\n    achievementPoints: 1000\n  },\n  {\n    id: \"transcendence_legendary\",\n    title: \"The Transcendent\",\n    description: \"You achieved something beyond ordinary dragon existence.\",\n    longDescription: \"Through your mastery of animus magic, profound wisdom, or extraordinary experiences, you transcended the normal boundaries of dragon existence. Whether you became something more than mortal or achieved a perfect balance between power and purity, you reached a state few dragons have ever imagined.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 120 && character.soulCorruptionStage === \"Normal\" && character.achievements.length >= 25,\n    achievementPoints: 1500\n  }\n];\n\nexport class EndingSystem {\n  static determineEnding(character: Character): GameEnding | null {\n    // Check for applicable endings, prioritizing by rarity and category\n    const applicableEndings = GAME_ENDINGS.filter(ending => ending.check(character));\n    \n    if (applicableEndings.length === 0) return null;\n\n    // Sort by priority: legendary > rare > common, victory > neutral > tragic\n    const priority = (ending: GameEnding): number => {\n      let score = 0;\n      \n      // Rarity bonus\n      switch (ending.rarity) {\n        case \"legendary\": score += 100; break;\n        case \"rare\": score += 50; break;\n        case \"common\": score += 10; break;\n      }\n      \n      // Category bonus\n      switch (ending.category) {\n        case \"legendary\": score += 40; break;\n        case \"victory\": score += 30; break;\n        case \"neutral\": score += 20; break;\n        case \"tragic\": score += 10; break;\n      }\n      \n      return score;\n    };\n\n    // Return the highest priority ending\n    return applicableEndings.sort((a, b) => priority(b) - priority(a))[0];\n  }\n\n  static getEndingSummary(character: Character, ending: GameEnding): {\n    ending: GameEnding;\n    finalStats: {\n      age: number;\n      soulPercentage: number;\n      achievements: number;\n      achievementScore: number;\n      relationships: number;\n      dragonets: number;\n    };\n    lifeSummary: string;\n  } {\n    const achievementScore = AchievementSystem.calculateAchievementScore(character);\n    const relationships = Object.values(character.relationships || {}).filter(r => r.isAlive).length;\n    \n    let lifeSummary = `${character.name} the ${character.tribe}`;\n    if (character.hybridTribes && character.hybridTribes.length > 1) {\n      lifeSummary += ` (${character.hybridTribes.join(\"-\")} Hybrid)`;\n    }\n    lifeSummary += ` lived ${character.age} years.`;\n    \n    if (character.mate) {\n      lifeSummary += ` Bonded with ${character.mate}.`;\n    }\n    \n    if (character.dragonets && character.dragonets.length > 0) {\n      lifeSummary += ` Raised ${character.dragonets.length} dragonet${character.dragonets.length > 1 ? 's' : ''}.`;\n    }\n\n    return {\n      ending,\n      finalStats: {\n        age: character.age,\n        soulPercentage: character.soulPercentage,\n        achievements: character.achievements.length,\n        achievementScore,\n        relationships,\n        dragonets: character.dragonets ? character.dragonets.length : 0\n      },\n      lifeSummary\n    };\n  }\n\n  static getAllPossibleEndings(): GameEnding[] {\n    return GAME_ENDINGS;\n  }\n\n  static getEndingsByCategory(category: GameEnding[\"category\"]): GameEnding[] {\n    return GAME_ENDINGS.filter(e => e.category === category);\n  }\n}\n\nexport default EndingSystem;","size_bytes":11020},"client/src/lib/local-storage.ts":{"content":"import { GameState, InsertGameState, Character, GameData } from \"@shared/schema\";\n\n// Local storage keys\nconst GAME_STATES_KEY = \"wof-rpg-game-states\";\nconst CURRENT_GAME_KEY = \"wof-rpg-current-game\";\n\nexport interface LocalGameState {\n  id: string;\n  userId: string | null;\n  characterData: Character;\n  gameData: GameData;\n  turn: number;\n  location: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport class LocalGameStorage {\n  private static getGameStates(): Record<string, LocalGameState> {\n    try {\n      const stored = localStorage.getItem(GAME_STATES_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error(\"Error reading game states from localStorage:\", error);\n      return {};\n    }\n  }\n\n  private static setGameStates(gameStates: Record<string, LocalGameState>): void {\n    try {\n      localStorage.setItem(GAME_STATES_KEY, JSON.stringify(gameStates));\n    } catch (error) {\n      console.error(\"Error saving game states to localStorage:\", error);\n    }\n  }\n\n  static getGameState(id: string): LocalGameState | undefined {\n    const gameStates = this.getGameStates();\n    return gameStates[id];\n  }\n\n  static getGameStateByUserId(userId: string): LocalGameState | undefined {\n    const gameStates = this.getGameStates();\n    return Object.values(gameStates).find(gameState => gameState.userId === userId);\n  }\n\n  static createGameState(insertGameState: InsertGameState): LocalGameState {\n    const id = `game_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    const now = new Date().toISOString();\n    \n    const gameState: LocalGameState = {\n      id,\n      createdAt: now,\n      updatedAt: now,\n      userId: insertGameState.userId || null,\n      turn: insertGameState.turn || 1,\n      location: insertGameState.location || \"Jade Mountain Academy\",\n      characterData: insertGameState.characterData as Character,\n      gameData: insertGameState.gameData as GameData,\n    };\n\n    const gameStates = this.getGameStates();\n    gameStates[id] = gameState;\n    this.setGameStates(gameStates);\n\n    // Set as current game\n    this.setCurrentGameId(id);\n\n    return gameState;\n  }\n\n  static updateGameState(id: string, updateData: Partial<InsertGameState>): LocalGameState {\n    const gameStates = this.getGameStates();\n    const existingGameState = gameStates[id];\n    \n    if (!existingGameState) {\n      throw new Error(\"Game state not found\");\n    }\n\n    const updatedGameState: LocalGameState = {\n      ...existingGameState,\n      ...(updateData as Partial<LocalGameState>),\n      updatedAt: new Date().toISOString(),\n    };\n\n    gameStates[id] = updatedGameState;\n    this.setGameStates(gameStates);\n\n    return updatedGameState;\n  }\n\n  static deleteGameState(id: string): void {\n    const gameStates = this.getGameStates();\n    delete gameStates[id];\n    this.setGameStates(gameStates);\n\n    // Clear current game if it was deleted\n    if (this.getCurrentGameId() === id) {\n      this.clearCurrentGameId();\n    }\n  }\n\n  static getAllGameStates(): LocalGameState[] {\n    const gameStates = this.getGameStates();\n    return Object.values(gameStates).sort((a, b) => \n      new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n  }\n\n  static setCurrentGameId(gameId: string): void {\n    try {\n      localStorage.setItem(CURRENT_GAME_KEY, gameId);\n    } catch (error) {\n      console.error(\"Error setting current game ID:\", error);\n    }\n  }\n\n  static getCurrentGameId(): string | null {\n    try {\n      return localStorage.getItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error getting current game ID:\", error);\n      return null;\n    }\n  }\n\n  static clearCurrentGameId(): void {\n    try {\n      localStorage.removeItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error clearing current game ID:\", error);\n    }\n  }\n\n  static getCurrentGame(): LocalGameState | undefined {\n    const currentId = this.getCurrentGameId();\n    return currentId ? this.getGameState(currentId) : undefined;\n  }\n\n  // Utility methods for backup and restore\n  static exportGameData(): string {\n    const gameStates = this.getGameStates();\n    const currentGameId = this.getCurrentGameId();\n    \n    return JSON.stringify({\n      gameStates,\n      currentGameId,\n      exportedAt: new Date().toISOString(),\n      version: \"1.0\"\n    }, null, 2);\n  }\n\n  static importGameData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.gameStates) {\n        this.setGameStates(data.gameStates);\n      }\n      \n      if (data.currentGameId) {\n        this.setCurrentGameId(data.currentGameId);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error importing game data:\", error);\n      return false;\n    }\n  }\n\n  // Clear all data (for testing or reset)\n  static clearAllData(): void {\n    try {\n      localStorage.removeItem(GAME_STATES_KEY);\n      localStorage.removeItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error clearing all data:\", error);\n    }\n  }\n}","size_bytes":5058},"client/src/lib/romance-system.ts":{"content":"import { Character, Dragonet, RomanticEvent, Relationship } from \"@shared/schema\";\n\nexport class RomanceSystem {\n  // Names for dragon partners\n  private static readonly DRAGON_NAMES = [\n    \"Ember\", \"Frostbite\", \"Coral\", \"Sandstorm\", \"Viper\", \"Rainbow\", \"Shadow\", \"Moonbeam\",\n    \"Thunder\", \"Starlight\", \"Clay\", \"Ruby\", \"Sapphire\", \"Crystal\", \"Storm\", \"Breeze\",\n    \"Phoenix\", \"Galaxy\", \"Mist\", \"Flame\", \"Glacier\", \"Opal\", \"Onyx\", \"Jade\"\n  ];\n\n  static getRandomPartnerName(): string {\n    return this.DRAGON_NAMES[Math.floor(Math.random() * this.DRAGON_NAMES.length)];\n  }\n\n  static canHaveRomance(character: Character): boolean {\n    return character.age >= 3 && \n           character.soulPercentage >= 50 && \n           character.sanityPercentage >= 50;\n  }\n\n  static generateRomanticEncounter(character: Character): {\n    partnerName: string;\n    partnerTribe: string;\n    scenario: string;\n    isHybrid: boolean;\n    narrativeText: string[];\n  } {\n    const partnerName = this.getRandomPartnerName();\n    const partnerTribe = this.getRandomTribe(character.tribe);\n    const isHybrid = Math.random() < 0.3; // 30% chance of hybrid partner\n    \n    const scenarios = [\n      {\n        brief: `You meet ${partnerName}, a charming ${partnerTribe} dragon at Jade Mountain Academy.`,\n        narrativeText: [\n          `During a quiet evening in the academy library, you notice ${partnerName}, an attractive ${partnerTribe} dragon, reading a scroll about ancient history.`,\n          `When they catch you looking, they smile warmly and ask if you'd like to study together. There's something magnetic about their presence that draws you in.`,\n          `As you spend time discussing the complexities of inter-tribal politics, you find yourself captivated not just by their intelligence, but by the way their eyes light up when they're passionate about a topic.`\n        ]\n      },\n      {\n        brief: `${partnerName} saves your life during a dangerous expedition, and you feel drawn to them.`,\n        narrativeText: [\n          `During a treacherous mountain expedition, a rockslide threatens to crush you when ${partnerName}, a brave ${partnerTribe} dragon, swoops in at the last second.`,\n          `As they pull you to safety, your eyes meet and time seems to stop. Their protective strength and quick thinking have not only saved your life, but awakened feelings you didn't expect.`,\n          `\"Are you hurt?\" they ask with genuine concern, their wing still protectively wrapped around you. The moment feels charged with possibility.`\n        ]\n      },\n      {\n        brief: `You and ${partnerName} bond over shared interests and similar experiences.`,\n        narrativeText: [\n          `You discover ${partnerName}, a thoughtful ${partnerTribe} dragon, shares your love for ancient poetry and philosophy during an academy discussion group.`,\n          `After the formal session ends, you both linger to continue debating the meaning of freedom in modern dragon society. Their perspectives challenge and inspire you in equal measure.`,\n          `Hours pass unnoticed as you walk together through the academy gardens, your conversation flowing as naturally as breathing. You've found a kindred spirit.`\n        ]\n      },\n      {\n        brief: `${partnerName} challenges you to a friendly competition, and sparks fly.`,\n        narrativeText: [\n          `${partnerName}, a competitive ${partnerTribe} dragon with impressive skills, challenges you to a flying race through the academy's aerial course.`,\n          `As you both push your limits, diving through clouds and around mountain peaks, their playful taunts and encouraging shouts create an exhilarating tension between you.`,\n          `When you both land, breathless and laughing, they congratulate you on your performance with a touch to your wing that sends unexpected warmth through your scales.`\n        ]\n      }\n    ];\n\n    const selectedScenario = scenarios[Math.floor(Math.random() * scenarios.length)];\n\n    return {\n      partnerName,\n      partnerTribe,\n      scenario: selectedScenario.brief,\n      isHybrid,\n      narrativeText: selectedScenario.narrativeText\n    };\n  }\n\n  private static getRandomTribe(excludeTribe: string): string {\n    const tribes = [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"];\n    const availableTribes = tribes.filter(tribe => tribe !== excludeTribe);\n    return availableTribes[Math.floor(Math.random() * availableTribes.length)];\n  }\n\n  static developRomance(character: Character, partnerName: string, partnerTribe: string): void {\n    // Add romantic relationship\n    character.relationships[partnerName] = {\n      name: partnerName,\n      type: \"romantic\",\n      strength: Math.floor(Math.random() * 40) + 30, // 30-70 strength\n      history: [\"First romantic encounter\"],\n      isAlive: true\n    };\n\n    // Add to romantic history\n    const romanticEvent: RomanticEvent = {\n      partnerName,\n      eventType: \"courtship\",\n      turnOccurred: character.age,\n      outcome: \"developing relationship\",\n      hasOffspring: false\n    };\n\n    if (!character.romanticHistory) {\n      character.romanticHistory = [];\n    }\n    character.romanticHistory.push(romanticEvent);\n  }\n\n  static canMate(character: Character, partnerName: string): boolean {\n    const relationship = character.relationships[partnerName];\n    return relationship && \n           relationship.type === \"romantic\" && \n           relationship.strength >= 60 &&\n           character.age >= 5;\n  }\n\n  static attemptMating(character: Character, partnerName: string): boolean {\n    if (!this.canMate(character, partnerName)) return false;\n\n    const relationship = character.relationships[partnerName];\n    const success = Math.random() < 0.7; // 70% success rate\n\n    if (success) {\n      // Update relationship to mate\n      relationship.type = \"mate\";\n      relationship.strength = Math.min(100, relationship.strength + 20);\n      relationship.history.push(\"Became mates\");\n      character.mate = partnerName;\n\n      // Add mating event\n      const romanticEvent: RomanticEvent = {\n        partnerName,\n        eventType: \"mating\",\n        turnOccurred: character.age,\n        outcome: \"successful bonding\",\n        hasOffspring: false\n      };\n      character.romanticHistory.push(romanticEvent);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  static generateOffspring(character: Character, partnerName: string, partnerTribe: string): Dragonet | null {\n    if (!character.mate || character.mate !== partnerName) return null;\n    if (Math.random() > 0.6) return null; // 60% chance of offspring\n\n    const relationship = character.relationships[partnerName];\n    const isHybrid = character.tribe !== partnerTribe;\n    \n    // Generate name\n    const dragonetNames = [\"Pebble\", \"Spark\", \"Brook\", \"Ember\", \"Frost\", \"Leaf\", \"Sky\", \"Ocean\"];\n    const dragonetName = dragonetNames[Math.floor(Math.random() * dragonetNames.length)];\n\n    // Determine tribe (hybrid or pure)\n    let dragonetTribe = character.tribe;\n    let hybridTribes = undefined;\n\n    if (isHybrid) {\n      dragonetTribe = Math.random() < 0.5 ? character.tribe : partnerTribe;\n      hybridTribes = [character.tribe, partnerTribe];\n    }\n\n    // Inherit animus magic (rare)\n    const inheritAnimus = (character.isAnimus && Math.random() < 0.3) || \n                         (Math.random() < 0.1); // 30% from animus parent, 10% random\n\n    // Inherit traits\n    const inheritedTraits = [];\n    if (character.traits.length > 0 && Math.random() < 0.5) {\n      inheritedTraits.push(character.traits[Math.floor(Math.random() * character.traits.length)]);\n    }\n\n    const personalities = [\"brave\", \"shy\", \"curious\", \"fierce\", \"gentle\", \"mischievous\", \"wise\", \"playful\"];\n\n    const dragonet: Dragonet = {\n      name: dragonetName,\n      age: 0,\n      tribe: dragonetTribe,\n      hybridTribes,\n      inheritedTraits,\n      isAnimus: inheritAnimus,\n      parentage: \"biological\",\n      personality: personalities[Math.floor(Math.random() * personalities.length)]\n    };\n\n    // Add to character's dragonets\n    if (!character.dragonets) {\n      character.dragonets = [];\n    }\n    character.dragonets.push(dragonet);\n\n    // Update romantic event\n    const lastEvent = character.romanticHistory[character.romanticHistory.length - 1];\n    if (lastEvent && lastEvent.partnerName === partnerName) {\n      lastEvent.hasOffspring = true;\n    }\n\n    return dragonet;\n  }\n\n  static ageDragonets(character: Character): void {\n    if (!character.dragonets) return;\n\n    character.dragonets.forEach(dragonet => {\n      dragonet.age += 1;\n    });\n  }\n\n  static getRelationshipAdvice(character: Character, partnerName: string): string[] {\n    const relationship = character.relationships[partnerName];\n    if (!relationship) return [\"No relationship exists with this dragon.\"];\n\n    const advice = [];\n    \n    if (relationship.strength < 30) {\n      advice.push(\"Your relationship is struggling. Consider spending more quality time together.\");\n    } else if (relationship.strength < 60) {\n      advice.push(\"Your relationship is developing well. Keep building trust and understanding.\");\n    } else {\n      advice.push(\"You have a strong bond. This relationship could last a lifetime.\");\n    }\n\n    if (relationship.type === \"romantic\" && character.age >= 8) {\n      advice.push(\"You might consider taking your relationship to the next level.\");\n    }\n\n    if (character.soulCorruptionStage !== \"Normal\") {\n      advice.push(\"Your soul corruption may affect your relationships. Be mindful of how you treat loved ones.\");\n    }\n\n    return advice;\n  }\n}\n\nexport default RomanceSystem;","size_bytes":9683},"client/src/lib/simplified-query-client.ts":{"content":"// Simplified client for any remaining API needs (keeping minimal for compatibility)\nexport const apiRequest = async (method: string, url: string, body?: any) => {\n  // Placeholder for any future API needs\n  throw new Error(\"API calls are disabled - using local storage\");\n};\n\nexport const queryClient = {\n  invalidateQueries: () => {\n    // No-op for local storage\n  }\n};","size_bytes":372},"client/src/components/conversation-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { MessageCircle, ArrowRight, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface ConversationMessage {\n  speaker: string;\n  text: string;\n  isPlayer: boolean;\n}\n\ninterface ConversationChoice {\n  text: string;\n  tone: 'friendly' | 'hostile' | 'neutral' | 'diplomatic' | 'cunning';\n}\n\ninterface ConversationModalProps {\n  character: Character;\n  conversationTopic: string;\n  otherDragon: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onConversationEnd: (outcome: string, relationship: string) => void;\n}\n\nexport default function ConversationModal({ \n  character, \n  conversationTopic,\n  otherDragon,\n  isOpen, \n  onClose, \n  onConversationEnd \n}: ConversationModalProps) {\n  const [messages, setMessages] = useState<ConversationMessage[]>([]);\n  const [currentChoices, setCurrentChoices] = useState<ConversationChoice[]>([]);\n  const [conversationTurn, setConversationTurn] = useState(0);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && conversationTopic) {\n      initializeConversation();\n    }\n  }, [isOpen, conversationTopic]);\n\n  const initializeConversation = () => {\n    setMessages([]);\n    setConversationTurn(0);\n    \n    // Generate opening message from the other dragon\n    const openingContext = {\n      topic: conversationTopic,\n      speaker: otherDragon,\n      turn: 0,\n      playerTribe: character.tribe\n    };\n    \n    const opening = MockAIService.generateRandomEvent(character, openingContext);\n    \n    setMessages([{\n      speaker: otherDragon,\n      text: opening.content,\n      isPlayer: false\n    }]);\n    \n    generateChoices();\n  };\n\n  const generateChoices = () => {\n    const choices: ConversationChoice[] = [\n      {\n        text: generateChoiceText('friendly'),\n        tone: 'friendly'\n      },\n      {\n        text: generateChoiceText('neutral'),\n        tone: 'neutral'\n      },\n      {\n        text: generateChoiceText('diplomatic'),\n        tone: 'diplomatic'\n      }\n    ];\n\n    // Add hostile or cunning options based on character traits\n    if (character.traits.includes('Fierce') || character.traits.includes('Vengeful')) {\n      choices.push({\n        text: generateChoiceText('hostile'),\n        tone: 'hostile'\n      });\n    }\n\n    if (character.traits.includes('Cunning') || character.traits.includes('Ambitious')) {\n      choices.push({\n        text: generateChoiceText('cunning'),\n        tone: 'cunning'\n      });\n    }\n\n    setCurrentChoices(choices);\n  };\n\n  const generateChoiceText = (tone: string): string => {\n    const templates = {\n      friendly: [\n        \"That's interesting! Tell me more about that.\",\n        \"I appreciate you sharing this with me.\",\n        \"I'd love to help if I can.\",\n        \"That sounds like quite an adventure!\"\n      ],\n      neutral: [\n        \"I see. What do you think we should do?\",\n        \"That's certainly one way to look at it.\",\n        \"Hmm, let me think about that.\",\n        \"What would you suggest?\"\n      ],\n      diplomatic: [\n        \"Perhaps we could find a solution that works for everyone.\",\n        \"I understand your perspective, but consider this...\",\n        \"Maybe there's a way to compromise here.\",\n        \"Let's think about this carefully before acting.\"\n      ],\n      hostile: [\n        \"That's ridiculous! You're completely wrong.\",\n        \"I don't have time for this nonsense.\",\n        \"You're either lying or completely deluded.\",\n        \"Keep talking and see what happens.\"\n      ],\n      cunning: [\n        \"That's... very convenient for you, isn't it?\",\n        \"I wonder what you're not telling me.\",\n        \"Interesting. And what do you get out of this?\",\n        \"I'm sure there's more to this story.\"\n      ]\n    };\n\n    const toneTemplates = templates[tone as keyof typeof templates] || templates.neutral;\n    return toneTemplates[Math.floor(Math.random() * toneTemplates.length)];\n  };\n\n  const handleChoice = async (choice: ConversationChoice) => {\n    setIsGenerating(true);\n    \n    // Add player message\n    const newMessages = [...messages, {\n      speaker: character.name,\n      text: choice.text,\n      isPlayer: true\n    }];\n    \n    setMessages(newMessages);\n    \n    // Generate response\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const responseContext = {\n      topic: conversationTopic,\n      playerChoice: choice.text,\n      playerTone: choice.tone,\n      turn: conversationTurn + 1,\n      characterTraits: character.traits\n    };\n    \n    const response = MockAIService.generateRandomEvent(character, responseContext);\n    \n    const finalMessages = [...newMessages, {\n      speaker: otherDragon,\n      text: response.content,\n      isPlayer: false\n    }];\n    \n    setMessages(finalMessages);\n    setConversationTurn(prev => prev + 1);\n    \n    // End conversation after 3-4 exchanges or generate new choices\n    if (conversationTurn >= 2) {\n      endConversation(choice.tone);\n    } else {\n      generateChoices();\n    }\n    \n    setIsGenerating(false);\n  };\n\n  const endConversation = (lastTone: string) => {\n    const outcomes = {\n      friendly: [\"The conversation ends on a positive note\", \"You've made a new friend\", \"They seem to trust you more\"],\n      hostile: [\"The conversation escalates into conflict\", \"They storm off angrily\", \"You've made an enemy\"],\n      neutral: [\"The conversation ends inconclusively\", \"You both go your separate ways\", \"Nothing much changes\"],\n      diplomatic: [\"You reach a mutual understanding\", \"A compromise is achieved\", \"Both parties benefit\"],\n      cunning: [\"You learn valuable information\", \"They suspect your motives\", \"The situation becomes complex\"]\n    };\n\n    const outcomeTexts = outcomes[lastTone as keyof typeof outcomes] || outcomes.neutral;\n    const outcome = outcomeTexts[Math.floor(Math.random() * outcomeTexts.length)];\n    \n    const relationshipChanges = {\n      friendly: \"improved\",\n      hostile: \"worsened\", \n      neutral: \"unchanged\",\n      diplomatic: \"strengthened\",\n      cunning: \"complicated\"\n    };\n\n    const relationship = relationshipChanges[lastTone as keyof typeof relationshipChanges];\n    \n    setTimeout(() => {\n      onConversationEnd(outcome, relationship);\n      onClose();\n    }, 2000);\n  };\n\n  const getToneColor = (tone: string) => {\n    const colors = {\n      friendly: \"text-green-400 border-green-500/30\",\n      hostile: \"text-red-400 border-red-500/30\",\n      neutral: \"text-slate-400 border-slate-500/30\",\n      diplomatic: \"text-blue-400 border-blue-500/30\",\n      cunning: \"text-purple-400 border-purple-500/30\"\n    };\n    return colors[tone as keyof typeof colors] || colors.neutral;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-blue-300 flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Conversation with {otherDragon}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n            <p className=\"text-sm text-slate-300\">Topic: {conversationTopic}</p>\n          </div>\n\n          {/* Conversation Messages */}\n          <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n            {messages.map((message, index) => (\n              <div key={index} className={`p-3 rounded-lg ${\n                message.isPlayer \n                  ? 'bg-purple-900/30 border border-purple-500/30 ml-4' \n                  : 'bg-slate-900/30 border border-slate-500/30 mr-4'\n              }`}>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Badge variant={message.isPlayer ? \"default\" : \"outline\"} className=\"text-xs\">\n                    {message.speaker}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-slate-200\">{message.text}</p>\n              </div>\n            ))}\n          </div>\n\n          {/* Conversation Choices */}\n          {currentChoices.length > 0 && !isGenerating && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-slate-200\">How do you respond?</h4>\n              {currentChoices.map((choice, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className={`w-full text-left p-3 ${getToneColor(choice.tone)}`}\n                  onClick={() => handleChoice(choice)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">{choice.text}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {choice.tone}\n                      </Badge>\n                      <ArrowRight className=\"w-4 h-4\" />\n                    </div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          )}\n\n          {isGenerating && (\n            <div className=\"text-center py-4\">\n              <MessageCircle className=\"w-6 h-6 animate-pulse mx-auto mb-2 text-blue-400\" />\n              <p className=\"text-sm text-slate-400\">They are thinking...</p>\n            </div>\n          )}\n\n          {conversationTurn >= 3 && (\n            <div className=\"p-3 bg-green-900/20 border border-green-500/30 rounded-lg\">\n              <p className=\"text-sm text-green-300\">Conversation concluding...</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={onClose} variant=\"outline\">\n            <X className=\"w-4 h-4 mr-2\" />\n            End Conversation\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10155},"client/src/components/custom-action-modal.tsx":{"content":"import { Character, GameData, InventoryItem } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { IntelligentActionProcessor } from \"@/lib/intelligent-action-processor\";\nimport { Sparkles, Send, Package, Zap, AlertTriangle } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CustomActionModalProps {\n  character: Character;\n  gameData: GameData;\n  inventory: InventoryItem[];\n  isOpen: boolean;\n  onClose: () => void;\n  onExecuteAction: (action: string, result: string, itemUsed?: InventoryItem, processedAction?: any) => void;\n}\n\nexport default function CustomActionModal({ \n  character, \n  gameData,\n  inventory, \n  isOpen, \n  onClose, \n  onExecuteAction \n}: CustomActionModalProps) {\n  const [customAction, setCustomAction] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\n  const [actionResult, setActionResult] = useState<string>(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [processedAction, setProcessedAction] = useState<any>(null);\n  const [showWarning, setShowWarning] = useState(false);\n\n  const generateActionResult = () => {\n    if (!customAction.trim()) return;\n    \n    setIsGenerating(true);\n    setShowWarning(false);\n    \n    // Use intelligent action processor for contextual results\n    setTimeout(() => {\n      try {\n        const processed = IntelligentActionProcessor.processCustomAction(\n          customAction,\n          character,\n          gameData,\n          selectedItem || undefined\n        );\n        \n        setProcessedAction(processed);\n        setActionResult(processed.actionResult);\n        \n        // Show warning for high-consequence actions\n        if (processed.soulCost > 10 || processed.consequences.includes('major_action_consequences')) {\n          setShowWarning(true);\n        }\n        \n        setIsGenerating(false);\n      } catch (error) {\n        console.error(\"Error processing action:\", error);\n        setActionResult(`You attempt to ${customAction.toLowerCase()}, but something goes wrong with your approach. Perhaps try a different strategy.`);\n        setIsGenerating(false);\n      }\n    }, 1500);\n  };\n\n  const executeAction = () => {\n    if (actionResult) {\n      onExecuteAction(customAction, actionResult, selectedItem || undefined, processedAction);\n      reset();\n      onClose();\n    }\n  };\n\n  const reset = () => {\n    setCustomAction(\"\");\n    setSelectedItem(null);\n    setActionResult(\"\");\n    setIsGenerating(false);\n    setProcessedAction(null);\n    setShowWarning(false);\n  };\n\n  // Get scenario-specific custom actions\n  const getScenarioActions = () => {\n    const currentScenario = gameData.currentScenario;\n    if (!currentScenario) return [];\n    \n    const actions = [];\n    const description = (currentScenario.description || \"\").toLowerCase();\n\n    // Common scenario-specific actions based on scenario content\n    if (description.includes('dragon') && description.includes('approach')) {\n      actions.push(\"Approach the dragon cautiously\");\n      actions.push(\"Try to read their mind\");\n      actions.push(\"Offer them something from your inventory\");\n    }\n\n    if (description.includes('battle') || description.includes('fight')) {\n      actions.push(\"Use animus magic in battle\");\n      actions.push(\"Try to end the fight peacefully\");\n      actions.push(\"Retreat strategically\");\n    }\n\n    if (description.includes('ancient') || description.includes('artifact')) {\n      actions.push(\"Examine the ancient object closely\");\n      actions.push(\"Try to activate the artifact\");\n      actions.push(\"Research its history\");\n    }\n\n    if (description.includes('injured') || description.includes('hurt')) {\n      actions.push(\"Use healing magic\");\n      actions.push(\"Bandage their wounds\");\n      actions.push(\"Find a healer\");\n    }\n\n    if (description.includes('prophecy') || description.includes('vision')) {\n      actions.push(\"Seek more details about the prophecy\");\n      actions.push(\"Try to change the predicted future\");\n      actions.push(\"Share the vision with others\");\n    }\n\n    if (description.includes('scroll') || description.includes('message')) {\n      actions.push(\"Read the scroll carefully\");\n      actions.push(\"Enchant the scroll to reveal hidden text\");\n      actions.push(\"Share the message with trusted allies\");\n    }\n\n    if (description.includes('suspicious') || description.includes('strange')) {\n      actions.push(\"Investigate the strange occurrence\");\n      actions.push(\"Use your tribal abilities to sense danger\");\n      actions.push(\"Alert others to the suspicious activity\");\n    }\n\n    return actions.slice(0, 6); // Limit to 6 suggestions\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) { reset(); onClose(); } }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-yellow-300 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5\" />\n            Custom Action\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-yellow-900/20 border border-yellow-500/30 rounded-lg\">\n            <p className=\"text-sm text-slate-300\">\n              Describe what you want your dragon to do. Be creative! You can interact with other dragons, \n              explore locations, use items, or try anything you can imagine within the Wings of Fire universe.\n            </p>\n          </div>\n\n          {/* Scenario-Specific Suggestions */}\n          {getScenarioActions().length > 0 && (\n            <div className=\"space-y-3\">\n              <Label>Quick Actions for This Scenario:</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                {getScenarioActions().map((action, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    onClick={() => setCustomAction(action)}\n                    className=\"text-left p-3 h-auto whitespace-normal\"\n                    disabled={isGenerating}\n                  >\n                    <div className=\"flex items-start\">\n                      <Sparkles className=\"w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{action}</span>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Action Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"action\">What do you want to do?</Label>\n            <Input\n              id=\"action\"\n              value={customAction}\n              onChange={(e) => setCustomAction(e.target.value)}\n              placeholder=\"e.g., 'Approach the group of SkyWing dragonets and ask about the missing scroll' or 'Use my fire breath to light the ancient torch'\"\n              className=\"bg-black/50 border-yellow-500/30\"\n              disabled={isGenerating}\n            />\n          </div>\n\n          {/* Inventory Selection */}\n          {inventory.length > 0 && (\n            <div className=\"space-y-3\">\n              <Label>Use an item (optional):</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                <Button\n                  variant={selectedItem === null ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedItem(null)}\n                  className=\"text-left p-3\"\n                  disabled={isGenerating}\n                >\n                  <div className=\"flex items-center\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    No item (use natural abilities)\n                  </div>\n                </Button>\n                \n                {inventory.slice(0, 5).map((item, index) => (\n                  <Button\n                    key={index}\n                    variant={selectedItem?.id === item.id ? \"default\" : \"outline\"}\n                    onClick={() => setSelectedItem(item)}\n                    className=\"text-left p-3\"\n                    disabled={isGenerating}\n                  >\n                    <div className=\"flex items-center\">\n                      <Package className=\"w-4 h-4 mr-2\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">{item.name}</div>\n                        <div className=\"text-xs text-slate-400\">{item.type.replace('_', ' ')}</div>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n              \n              {selectedItem && (\n                <div className=\"p-3 bg-purple-900/20 border border-purple-500/30 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Package className=\"w-4 h-4\" />\n                    <span className=\"font-medium text-purple-300\">Selected: {selectedItem.name}</span>\n                  </div>\n                  <p className=\"text-sm text-slate-300\">{selectedItem.description}</p>\n                  {selectedItem.enchantments.length > 0 && (\n                    <div className=\"text-sm text-blue-300 mt-2\">\n                      ✨ Enchantments: {selectedItem.enchantments.join(', ')}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Generate Button */}\n          <Button\n            onClick={generateActionResult}\n            disabled={!customAction.trim() || isGenerating}\n            className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n          >\n            {isGenerating ? (\n              <>\n                <Sparkles className=\"w-4 h-4 mr-2 animate-spin\" />\n                AI is narrating your action...\n              </>\n            ) : (\n              <>\n                <Send className=\"w-4 h-4 mr-2\" />\n                See What Happens\n              </>\n            )}\n          </Button>\n\n          {/* Result Display */}\n          {actionResult && (\n            <div className=\"space-y-4\">\n              {/* Warning for high-consequence actions */}\n              {showWarning && processedAction && (\n                <div className=\"p-4 bg-red-900/30 border border-red-500/50 rounded-lg\">\n                  <div className=\"flex items-center mb-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-red-400 mr-2\" />\n                    <h4 className=\"font-semibold text-red-300\">High-Consequence Action</h4>\n                  </div>\n                  <div className=\"text-sm text-red-200 space-y-2\">\n                    {processedAction.soulCost > 0 && (\n                      <p>Soul Cost: {processedAction.soulCost}%</p>\n                    )}\n                    {processedAction.sanityCost > 0 && (\n                      <p>Sanity Cost: {processedAction.sanityCost}%</p>\n                    )}\n                    {processedAction.itemConsumed && (\n                      <p>This action will destroy the {selectedItem?.name}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"p-4 bg-gradient-to-r from-yellow-900/30 to-black/30 rounded-lg border border-yellow-500/30\">\n                <div className=\"flex items-center mb-2\">\n                  <Sparkles className=\"w-4 h-4 text-yellow-400 mr-2\" />\n                  <h4 className=\"font-semibold text-yellow-300\">Action Result</h4>\n                </div>\n                <p className=\"text-sm text-slate-200 leading-relaxed whitespace-pre-line\">{actionResult}</p>\n                \n                {/* Show achievement notification */}\n                {processedAction?.achievementUnlocked && (\n                  <div className=\"mt-3 p-2 bg-purple-900/30 border border-purple-500/50 rounded\">\n                    <p className=\"text-xs text-purple-300\">\n                      🏆 Achievement Unlocked: {processedAction.achievementUnlocked}\n                    </p>\n                  </div>\n                )}\n                \n                <div className=\"flex justify-end mt-4\">\n                  <Button\n                    onClick={executeAction}\n                    className={showWarning ? \"bg-red-600 hover:bg-red-700\" : \"bg-yellow-600 hover:bg-yellow-700\"}\n                  >\n                    {showWarning ? \"Accept Consequences\" : \"Commit to This Action\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Examples */}\n          <div className=\"p-3 bg-slate-900/20 border border-slate-600/30 rounded-lg\">\n            <h5 className=\"font-semibold text-slate-300 mb-2\">Example Actions:</h5>\n            <div className=\"text-xs text-slate-400 space-y-1\">\n              <div>• \"Challenge the arrogant SkyWing to a flying race\"</div>\n              <div>• \"Sneak into the forbidden library using my RainWing camouflage\"</div>\n              <div>• \"Ask the wise SeaWing elder about ancient prophecies\"</div>\n              <div>• \"Use my enchanted amulet to communicate with distant allies\"</div>\n              <div>• \"Practice my tribal powers in the training caves\"</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={() => { reset(); onClose(); }} variant=\"outline\">\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13685},"client/src/components/special-power-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { Eye, Brain, Sparkles, Zap, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface SpecialPowerModalProps {\n  character: Character;\n  powerType: 'prophecy' | 'mindreading' | 'future' | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onUsePower: (power: string, result: string) => void;\n}\n\nexport default function SpecialPowerModal({ \n  character, \n  powerType, \n  isOpen, \n  onClose, \n  onUsePower \n}: SpecialPowerModalProps) {\n  const [currentVision, setCurrentVision] = useState<string>(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [usageCount, setUsageCount] = useState(0);\n  const [soulCost, setSoulCost] = useState(0);\n\n  const powerConfig = {\n    prophecy: {\n      title: \"Prophecy Vision\",\n      icon: <Eye className=\"w-5 h-5\" />,\n      color: \"blue\",\n      description: \"Peer into the threads of fate to see what destiny holds\",\n      baseCost: 2,\n      actions: [\n        \"See a vision of the near future\",\n        \"Divine the outcome of a major decision\", \n        \"Glimpse potential dangers ahead\",\n        \"Witness distant events unfolding\",\n        \"Perceive the consequences of current actions\"\n      ]\n    },\n    mindreading: {\n      title: \"Mind Reading\",\n      icon: <Brain className=\"w-5 h-5\" />,\n      color: \"purple\", \n      description: \"Delve into the thoughts and memories of others\",\n      baseCost: 3,\n      actions: [\n        \"Read the surface thoughts of a nearby dragon\",\n        \"Probe deeper into someone's memories\",\n        \"Sense the emotions and intentions around you\",\n        \"Detect lies and hidden motives\",\n        \"Communicate telepathically with another mind\"\n      ]\n    },\n    future: {\n      title: \"Future Sight\",\n      icon: <Sparkles className=\"w-5 h-5\" />,\n      color: \"cyan\",\n      description: \"See across time with enhanced foresight\",\n      baseCost: 5,\n      actions: [\n        \"Glimpse multiple possible futures\",\n        \"See the long-term consequences of actions\",\n        \"Witness events that will shape the world\",\n        \"Perceive threats before they manifest\",\n        \"View the destiny of individuals or kingdoms\"\n      ]\n    }\n  };\n\n  const config = powerType ? powerConfig[powerType] : null;\n\n  useEffect(() => {\n    if (powerType && isOpen) {\n      setUsageCount(0);\n      setSoulCost(config?.baseCost || 0);\n      setCurrentVision(\"\");\n    }\n  }, [powerType, isOpen, config]);\n\n  const generateVision = (actionType: string) => {\n    if (!config || !powerType) return;\n    \n    setIsGenerating(true);\n    \n    // Simulate AI generation delay\n    setTimeout(() => {\n      let vision = \"\";\n      \n      switch (powerType) {\n        case 'prophecy':\n          const prophecy = MockAIService.generateProphecy(character, { action: actionType });\n          vision = prophecy.content;\n          break;\n          \n        case 'mindreading':\n          const mindRead = MockAIService.generateVision(character, { action: actionType });\n          vision = mindRead.content;\n          break;\n          \n        case 'future':\n          const futureVision = MockAIService.generateProphecy(character, { action: actionType, type: 'future' });\n          vision = futureVision.content;\n          break;\n      }\n      \n      setCurrentVision(vision);\n      setUsageCount(prev => prev + 1);\n      setSoulCost(prev => prev + (config.baseCost * usageCount));\n      setIsGenerating(false);\n    }, 1000);\n  };\n\n  const usePower = () => {\n    if (currentVision && config && powerType) {\n      onUsePower(config.title, currentVision);\n      onClose();\n    }\n  };\n\n  if (!config || !powerType) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className={`text-${config.color}-300 flex items-center gap-2`}>\n            {config.icon}\n            {config.title}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className={`p-4 bg-${config.color}-900/20 border border-${config.color}-500/30 rounded-lg`}>\n            <p className=\"text-sm text-slate-300\">{config.description}</p>\n            \n            {usageCount > 0 && (\n              <div className=\"flex items-center gap-4 mt-2 text-xs\">\n                <Badge variant=\"outline\">Uses: {usageCount}</Badge>\n                <Badge variant=\"destructive\">Soul Cost: {soulCost}%</Badge>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-slate-200\">Choose your vision:</h4>\n            {config.actions.map((action, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                className={`w-full text-left p-3 border-${config.color}-500/30 hover:bg-${config.color}-500/10`}\n                onClick={() => generateVision(action)}\n                disabled={isGenerating}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">{action}</span>\n                  {isGenerating ? (\n                    <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Zap className=\"w-4 h-4\" />\n                  )}\n                </div>\n              </Button>\n            ))}\n          </div>\n\n          {/* Vision Display */}\n          {currentVision && (\n            <div className={`p-4 bg-gradient-to-r from-${config.color}-900/30 to-black/30 rounded-lg border border-${config.color}-500/30`}>\n              <div className=\"flex items-center mb-2\">\n                {config.icon}\n                <h4 className={`font-semibold text-${config.color}-300 ml-2`}>Vision Received</h4>\n              </div>\n              <p className=\"text-sm text-slate-200 italic leading-relaxed\">{currentVision}</p>\n              \n              <div className=\"flex justify-end mt-4\">\n                <Button\n                  onClick={usePower}\n                  className={`bg-${config.color}-600 hover:bg-${config.color}-700`}\n                >\n                  Use This Vision\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Warning */}\n          <div className={`p-3 bg-${config.color}-900/10 border border-${config.color}-700/30 rounded-lg`}>\n            <p className=\"text-xs text-slate-400\">\n              <strong>Warning:</strong> Using {config.title.toLowerCase()} repeatedly may strain your mind and cost soul energy. \n              Each use becomes more taxing than the last.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={onClose} variant=\"outline\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7183},"client/src/lib/mock-ai-service.ts":{"content":"// Mock AI Service - Generates contextually-aware random content for Wings of Fire RPG\n// No API keys required - uses local logic and lore knowledge\n\nexport interface AIResponse {\n  content: string;\n  mood?: 'mysterious' | 'ominous' | 'hopeful' | 'dramatic' | 'neutral';\n}\n\nexport class MockAIService {\n  private static wingsOfFireTribes = [\n    'MudWing', 'SandWing', 'SkyWing', 'SeaWing', 'IceWing', 'RainWing', 'NightWing',\n    'SilkWing', 'HiveWing', 'LeafWing'\n  ];\n\n  private static prophecyTemplates = [\n    \"When {element} meets {element2}, the {creature} shall {action}\",\n    \"In the {time} of {event}, {number} dragons will {action} the {object}\",\n    \"The {tribe} dragon with {trait} eyes will {action} when {condition}\",\n    \"From {location} to {location2}, the path of {concept} shall be {adjective}\",\n    \"When the {celestial} {action2} above {location}, {consequence} will follow\"\n  ];\n\n  private static visionTemplates = [\n    \"You see {location} shrouded in {weather}, where {character} {action} a {object}\",\n    \"A flash of {color} light reveals {number} dragons {action} near {landmark}\",\n    \"In your vision, {tribe} dragons are {action} while {event} unfolds\",\n    \"The image shows {character} holding {object} as {weather} approaches {location}\",\n    \"You witness {event} happening at {location} under a {celestial} sky\"\n  ];\n\n  private static objectDescriptions = {\n    scroll: [\n      \"This ancient scroll bears the seal of {tribe} royalty, its edges singed with age\",\n      \"Mysterious runes dance along this parchment, glowing faintly in moonlight\",\n      \"A prophecy scroll that seems to whisper secrets when the wind touches it\"\n    ],\n    gem: [\n      \"A {color} gemstone that pulses with inner fire, warm to the touch\",\n      \"This crystalline stone seems to contain swirling {element} energy\",\n      \"A rare gem that {tribe} dragons once used in their most sacred ceremonies\"\n    ],\n    weapon: [\n      \"An {material} weapon forged in the volcanic depths of the {tribe} kingdom\",\n      \"This blade hums with power, its edge sharp enough to cut through scales\",\n      \"A legendary weapon that once belonged to a {adjective} {tribe} hero\"\n    ],\n    armor: [\n      \"Scales of fallen {tribe} warriors woven into protective armor\",\n      \"This armor bears battle scars from the great {event} war\",\n      \"Enchanted protection that grows stronger with each victory\"\n    ],\n    artifact: [\n      \"A mysterious relic from the time before the {tribe} tribes were divided\",\n      \"This ancient artifact pulses with {element} magic\",\n      \"A sacred object that {tribe} shamans used to commune with spirits\"\n    ]\n  };\n\n  private static powerUsageScenarios = {\n    fire: [\n      \"The cavern is blocked by ice - your fire could melt a path through\",\n      \"Enemy dragons approach in the darkness - illuminate and intimidate them\",\n      \"A fellow dragon is trapped in freezing water - warm them to safety\"\n    ],\n    ice: [\n      \"The ground is unstable - freeze it solid to create safe passage\",\n      \"Pursuers are gaining on you - create an ice barrier to slow them\",\n      \"A forest fire threatens innocents - help contain the flames\"\n    ],\n    electricity: [\n      \"Ancient mechanisms need power to activate the door\",\n      \"Storm clouds gather - channel lightning to charge your scales\",\n      \"Communication crystals are dead - energize them with your spark\"\n    ],\n    water: [\n      \"The desert crossing ahead looks treacherous without water\",\n      \"Toxic fumes fill the air - create a water shield to breathe safely\",\n      \"Injured dragons need healing - pure water accelerates recovery\"\n    ],\n    earth: [\n      \"The mountain path has collapsed - reshape the stone to continue\",\n      \"Enemies corner you in open ground - raise earth walls for protection\",\n      \"Hidden treasures lie beneath - sense valuable metals underground\"\n    ],\n    mind_reading: [\n      \"The suspicious dragon claims innocence - read their true intentions\",\n      \"Multiple paths lie ahead - probe nearby minds for the safest route\",\n      \"Negotiations have stalled - understand what your opponent really wants\"\n    ],\n    prophecy: [\n      \"Dark times approach - seek visions of what's to come\",\n      \"An important decision looms - glimpse the consequences of each choice\",\n      \"Ancient mysteries surround you - divine the truth from the past\"\n    ],\n    camouflage: [\n      \"Guards patrol the forbidden area - slip past unseen\",\n      \"Dangerous predators hunt nearby - become invisible to their eyes\",\n      \"Diplomatic mission requires stealth - infiltrate without detection\"\n    ]\n  };\n\n  private static elements = ['fire', 'ice', 'lightning', 'earth', 'water', 'wind', 'shadow', 'light'];\n  private static colors = ['crimson', 'azure', 'golden', 'emerald', 'violet', 'silver', 'obsidian', 'pearl'];\n  private static materials = ['steel', 'obsidian', 'diamond', 'dragonbone', 'moonstone', 'starsilver'];\n  private static adjectives = ['legendary', 'cursed', 'blessed', 'ancient', 'mystical', 'powerful', 'forgotten'];\n  private static locations = ['Jade Mountain', 'Possibility', 'Diamond Falls', 'Burn\\'s Palace', 'Ruins of the Palace', 'The Scorpion Den'];\n  private static events = ['War of SandWing Succession', 'Great Ice Storm', 'Plague of the Red Death', 'Dragon Rebellion'];\n  private static celestials = ['moon', 'sun', 'stars', 'eclipse', 'aurora'];\n  private static weather = ['storm clouds', 'mist', 'sandstorm', 'blizzard', 'gentle rain', 'scorching heat'];\n\n  static generateObjectDescription(itemName: string, context?: any): AIResponse {\n    const seed = this.createSeed(itemName + (context?.turn || 0));\n    const type = this.determineObjectType(itemName) as keyof typeof this.objectDescriptions;\n    const templates = this.objectDescriptions[type] || this.objectDescriptions.artifact;\n    \n    const template = templates[seed % templates.length];\n    const description = this.fillTemplate(template, seed);\n    \n    return {\n      content: description,\n      mood: 'mysterious'\n    };\n  }\n\n  static generateProphecy(character: any, context?: any): AIResponse {\n    const seed = this.createSeed(character.name + character.tribe + (context?.turn || 0));\n    const template = this.prophecyTemplates[seed % this.prophecyTemplates.length];\n    const prophecy = this.fillTemplate(template, seed);\n    \n    return {\n      content: `The visions swirl before you: \"${prophecy}\"`,\n      mood: 'ominous'\n    };\n  }\n\n  static generateVision(character: any, context?: any): AIResponse {\n    const seed = this.createSeed(character.name + 'vision' + (context?.turn || 0));\n    const template = this.visionTemplates[seed % this.visionTemplates.length];\n    const vision = this.fillTemplate(template, seed);\n    \n    return {\n      content: `Your mind's eye reveals: ${vision}`,\n      mood: 'mysterious'\n    };\n  }\n\n  static generatePowerUsageOptions(power: string, context?: any): string[] {\n    const scenarios = this.powerUsageScenarios[power as keyof typeof this.powerUsageScenarios] || this.powerUsageScenarios.fire;\n    const seed = this.createSeed(power + (context?.turn || 0));\n    \n    // Return 2-3 random scenarios\n    const shuffled = this.shuffle([...scenarios], seed);\n    return shuffled.slice(0, 2 + (seed % 2));\n  }\n\n  static generateRandomEvent(character: any, gameData: any): AIResponse {\n    const seed = this.createSeed(character.name + gameData.turn + 'event');\n    const events = [\n      \"A mysterious {tribe} dragon approaches with urgent news about {event}\",\n      \"Strange {weather} brings {adjective} omens to {location}\",\n      \"You discover {object} hidden in the ruins, but {consequence}\",\n      \"Tribal politics shift as {tribe} dragons {action} against {tribe2}\",\n      \"The {celestial} reveals secrets about your {trait} heritage\"\n    ];\n    \n    const template = events[seed % events.length];\n    const event = this.fillTemplate(template, seed);\n    \n    return {\n      content: event,\n      mood: 'dramatic'\n    };\n  }\n\n  static generateHybridTraits(tribe1: string, tribe2: string): string[] {\n    const seed = this.createSeed(tribe1 + tribe2);\n    const hybridTraits = [\n      `${tribe1}-${tribe2} hybrid scales`,\n      `Mixed ${tribe1.toLowerCase()} and ${tribe2.toLowerCase()} powers`,\n      `Torn between ${tribe1} loyalty and ${tribe2} heritage`,\n      `Unique ${this.elements[seed % this.elements.length]} affinity`,\n      `Conflicted tribal identity`,\n      `Enhanced hybrid vigor`,\n      `Mysterious bloodline abilities`\n    ];\n    \n    const shuffled = this.shuffle([...hybridTraits], seed);\n    return shuffled.slice(0, 2 + (seed % 3));\n  }\n\n  private static createSeed(input: string): number {\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  private static determineObjectType(itemName: string): string {\n    const name = itemName.toLowerCase();\n    if (name.includes('scroll') || name.includes('parchment')) return 'scroll';\n    if (name.includes('gem') || name.includes('crystal') || name.includes('stone')) return 'gem';\n    if (name.includes('sword') || name.includes('blade') || name.includes('spear')) return 'weapon';\n    if (name.includes('armor') || name.includes('shield') || name.includes('helm')) return 'armor';\n    return 'artifact';\n  }\n\n  private static fillTemplate(template: string, seed: number): string {\n    const rng = this.createRNG(seed);\n    \n    return template.replace(/\\{(\\w+)\\}/g, (match, key) => {\n      switch (key) {\n        case 'tribe':\n          return this.wingsOfFireTribes[Math.floor(rng() * this.wingsOfFireTribes.length)];\n        case 'tribe2':\n          return this.wingsOfFireTribes[Math.floor(rng() * this.wingsOfFireTribes.length)];\n        case 'element':\n          return this.elements[Math.floor(rng() * this.elements.length)];\n        case 'element2':\n          return this.elements[Math.floor(rng() * this.elements.length)];\n        case 'color':\n          return this.colors[Math.floor(rng() * this.colors.length)];\n        case 'material':\n          return this.materials[Math.floor(rng() * this.materials.length)];\n        case 'adjective':\n          return this.adjectives[Math.floor(rng() * this.adjectives.length)];\n        case 'location':\n          return this.locations[Math.floor(rng() * this.locations.length)];\n        case 'location2':\n          return this.locations[Math.floor(rng() * this.locations.length)];\n        case 'event':\n          return this.events[Math.floor(rng() * this.events.length)];\n        case 'celestial':\n          return this.celestials[Math.floor(rng() * this.celestials.length)];\n        case 'weather':\n          return this.weather[Math.floor(rng() * this.weather.length)];\n        case 'number':\n          return ['three', 'five', 'seven', 'nine'][Math.floor(rng() * 4)];\n        case 'time':\n          return ['dawn', 'dusk', 'midnight', 'noon'][Math.floor(rng() * 4)];\n        case 'creature':\n          return ['dragon', 'animus', 'hybrid', 'prophet'][Math.floor(rng() * 4)];\n        case 'object':\n          return ['scroll', 'gem', 'crown', 'weapon', 'treasure'][Math.floor(rng() * 5)];\n        case 'action':\n          return ['discover', 'destroy', 'protect', 'awaken', 'unite'][Math.floor(rng() * 5)];\n        case 'action2':\n          return ['rises', 'sets', 'shines', 'darkens', 'eclipses'][Math.floor(rng() * 5)];\n        case 'condition':\n          return ['storms rage', 'peace reigns', 'war ends', 'magic fails'][Math.floor(rng() * 4)];\n        case 'consequence':\n          return ['great change', 'ancient power', 'terrible darkness', 'new hope'][Math.floor(rng() * 4)];\n        case 'concept':\n          return ['destiny', 'revenge', 'redemption', 'power', 'wisdom'][Math.floor(rng() * 5)];\n        case 'trait':\n          return ['silver', 'golden', 'violet', 'emerald', 'crimson'][Math.floor(rng() * 5)];\n        case 'character':\n          return ['a young dragon', 'an ancient dragoness', 'a mysterious figure', 'a warrior'][Math.floor(rng() * 4)];\n        case 'landmark':\n          return ['the great tree', 'crystal caves', 'the old bridge', 'sacred stones'][Math.floor(rng() * 4)];\n        default:\n          return match;\n      }\n    });\n  }\n\n  private static createRNG(seed: number) {\n    return function() {\n      seed = (seed * 9301 + 49297) % 233280;\n      return seed / 233280;\n    };\n  }\n\n  private static shuffle<T>(array: T[], seed: number): T[] {\n    const rng = this.createRNG(seed);\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(rng() * (i + 1));\n      [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result;\n  }\n}","size_bytes":12785},"client/src/lib/openai-service.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true \n});\n\nconst WINGS_OF_FIRE_CONTEXT = `\nYou are an AI assistant for a Wings of Fire themed role-playing game. Wings of Fire is a fantasy book series about dragons living in tribes with unique abilities.\n\nTribes and their abilities:\n- NightWings: Mind reading, prophecy, can breathe fire\n- SkyWings: Excellent fliers, breathe fire, fierce warriors  \n- SeaWings: Underwater breathing, bioluminescent scales, strong swimmers\n- RainWings: Color-changing scales, deadly venom, excellent climbers\n- SandWings: Venomous tail barbs, survive in deserts, excellent hunters\n- IceWings: Ice breath, resist cold, precise and organized\n- MudWings: Breathe fire, strong and tough, some have fire immunity\n\nThe game focuses on animus dragons - rare dragons with magical powers that corrupt their soul with each use. Players make choices that affect their character's soul integrity, relationships, and story progression.\n\nAlways respond in character and maintain the Wings of Fire atmosphere. Be dramatic, descriptive, and reference dragon society, tribal politics, and the consequences of magic use.\n`;\n\nexport class OpenAIService {\n  static async generateScenarioResponse(prompt: string, context?: any): Promise<string> {\n    try {\n      const contextInfo = context ? JSON.stringify(context) : \"\";\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: WINGS_OF_FIRE_CONTEXT + \"\\n\\nGenerate a dramatic, immersive response for this Wings of Fire RPG scenario. Keep responses to 2-3 sentences maximum.\"\n          },\n          {\n            role: \"user\",\n            content: `${prompt}\\n\\nContext: ${contextInfo}`\n          }\n        ],\n        max_tokens: 150,\n        temperature: 0.8,\n      });\n\n      return response.choices[0].message.content || \"The mystical energies swirl around you, but their meaning remains unclear.\";\n    } catch (error) {\n      console.error(\"OpenAI API Error:\", error);\n      return \"The magical energies are too chaotic to interpret right now.\";\n    }\n  }\n\n  static async generateMindReading(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you use your mind-reading abilities in this situation: ${scenario}. What thoughts do you pick up from other dragons nearby?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      location: character.location \n    });\n  }\n\n  static async generateProphecy(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you have a prophetic vision about: ${scenario}. What cryptic future do you see?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      age: character.age \n    });\n  }\n\n  static async generateFutureVision(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you peer into possible futures regarding: ${scenario}. What potential outcomes do you glimpse?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      relationships: Object.keys(character.relationships).length \n    });\n  }\n\n  static async generateTribalPowerUse(character: any, power: string, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon, you use your tribal power \"${power}\" in this situation: ${scenario}. Describe the dramatic result and its effect on the story.`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      tribe: character.tribe,\n      soulCorruption: character.soulCorruptionStage \n    });\n  }\n\n  static async generateCustomAction(character: any, action: string, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you attempt to: ${action}. Current situation: ${scenario}. Describe what happens and how it affects the story.`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      action,\n      currentScene: scenario,\n      corruption: character.soulCorruptionStage \n    });\n  }\n\n  static async generateCorruptionWhisper(character: any): Promise<string> {\n    const prompts = [\n      \"Generate a dark, tempting whisper that a corrupted soul might hear, encouraging evil actions.\",\n      \"Create a sinister suggestion that corruption whispers to a dragon, tempting them toward darkness.\",\n      \"Generate an evil thought that manifests as a whisper in a corrupted dragon's mind.\",\n    ];\n    \n    const prompt = prompts[Math.floor(Math.random() * prompts.length)];\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      tribe: character.tribe \n    });\n  }\n}","size_bytes":5456},"client/src/lib/enhanced-ai-controller.ts":{"content":"import { Character, GameData, Scenario, Choice, CustomSpell } from '@shared/schema';\nimport { EnhancedGameEngine } from './enhanced-game-engine';\n\nexport interface AIAction {\n  type: 'magic' | 'custom_action' | 'tribal_power' | 'special_power';\n  data: any;\n  description: string;\n  execute?: () => Promise<void>;\n}\n\nexport class EnhancedAIController {\n  private static isExecutingAction = false;\n  private static actionQueue: AIAction[] = [];\n\n  /**\n   * Generate and execute an AI action based on the current game state\n   */\n  static async executeAITurn(character: Character, gameData: GameData, gameUI: any): Promise<void> {\n    // Don't execute if not AI controlled or if soul isn't completely gone\n    if (!character.isAIControlled || character.soulPercentage > 0) {\n      return;\n    }\n\n    if (this.isExecutingAction) return;\n\n    const action = this.generateAIAction(character, gameData, gameUI);\n    if (!action) return;\n\n    this.isExecutingAction = true;\n\n    try {\n      // Show what the AI is doing\n      console.log(`AI Action: ${action.description}`);\n\n      // Execute the action\n      if (action.execute) {\n        await action.execute();\n      }\n\n      // Add narrative description\n      const narrative = this.generateAINarrative(action, character);\n      console.log(narrative);\n\n    } catch (error) {\n      console.error('Error executing AI action:', error);\n    } finally {\n      this.isExecutingAction = false;\n    }\n  }\n\n  /**\n   * Generate an AI action with execution logic - NO CHOICES, only custom actions and magic\n   */\n  static generateAIAction(character: Character, gameData: GameData, gameUI?: any): AIAction | null {\n    // Input validation\n    if (!character || !gameData) {\n      console.warn('Invalid character or gameData provided to generateAIAction');\n      return null;\n    }\n\n    // Only generate AI actions when soul is completely gone AND character is AI controlled\n    if (!character.isAIControlled || character.soulPercentage > 0) {\n      return null;\n    }\n\n    // AI can only do magic and custom actions now - no choices\n    const actionTypes = ['magic', 'custom_action', 'tribal_power', 'special_power'];\n    const weights = [0.4, 0.4, 0.15, 0.05]; // Higher weight for magic and custom actions\n\n    const actionType = this.weightedRandomChoice(actionTypes, weights);\n\n    try {\n      switch (actionType) {\n        case 'magic':\n          return this.generateMagicAction(character, gameData, gameUI);\n        case 'custom_action':\n          return this.generateCustomAction(character, gameData, gameUI);\n        case 'tribal_power':\n          return this.generateTribalPowerAction(character, gameData, gameUI);\n        case 'special_power':\n          return this.generateSpecialPowerAction(character, gameData, gameUI);\n        default:\n          // Default to custom action if something goes wrong\n          return this.generateCustomAction(character, gameData, gameUI);\n      }\n    } catch (error) {\n      console.error('Error generating AI action:', error);\n      return this.generateCustomAction(character, gameData, gameUI);\n    }\n  }\n\n  private static weightedRandomChoice<T>(items: T[], weights: number[]): T {\n    if (!items || items.length === 0) {\n      throw new Error('Items array cannot be empty');\n    }\n    if (!weights || weights.length !== items.length) {\n      throw new Error('Weights array must match items array length');\n    }\n\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n    if (totalWeight <= 0) {\n      throw new Error('Total weight must be positive');\n    }\n\n    let random = Math.random() * totalWeight;\n\n    for (let i = 0; i < items.length; i++) {\n      random -= weights[i];\n      if (random <= 0) return items[i];\n    }\n\n    return items[items.length - 1];\n  }\n\n  private static generateMagicAction(character: Character, gameData: GameData, gameUI?: any): AIAction | null {\n    if (!character.isAnimus) {\n      return null;\n    }\n\n    const corruptedSpells = [\n      // Original spells\n      {\n        targetObject: \"Dagger\",\n        enchantmentDescription: \"Cause wounds to fester and never fully heal\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 12\n      },\n      {\n        targetObject: \"Mirror\",\n        enchantmentDescription: \"Trap the reflection's soul, making it scream silently\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Necklace\",\n        enchantmentDescription: \"Whisper dark thoughts into the wearer's mind at night\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Ring\",\n        enchantmentDescription: \"Slowly drain the wearer's luck, making misfortune unavoidable\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Candle\",\n        enchantmentDescription: \"Burn with flames that induce fear and hallucinations\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 16\n      },\n      // Additional enchantments from the list\n      {\n        targetObject: \"Book\",\n        enchantmentDescription: \"Rewrite its own pages to reveal forbidden knowledge whenever opened\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 20\n      },\n      {\n        targetObject: \"Armor\",\n        enchantmentDescription: \"Slowly corrupt the wearer's body, making them feel endless fatigue\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 15\n      },\n      {\n        targetObject: \"Coin\",\n        enchantmentDescription: \"Curse anyone who touches it to attract betrayal from friends\",\n        spellType: \"curse\" as const,\n        complexity: \"simple\" as const,\n        estimatedSoulCost: 10\n      },\n      {\n        targetObject: \"Key\",\n        enchantmentDescription: \"Lock doors permanently and summon shadows when used\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Cloak\",\n        enchantmentDescription: \"Conceal the wearer but slowly warp their mind into paranoia\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 17\n      },\n      {\n        targetObject: \"Potion vial\",\n        enchantmentDescription: \"Turn any drink poured inside into a poison that induces rage\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Quill\",\n        enchantmentDescription: \"Write words that compel the reader to obey dark commands\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 19\n      },\n      {\n        targetObject: \"Bell\",\n        enchantmentDescription: \"Ring on its own to call nightmares into the surrounding area\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Staff\",\n        enchantmentDescription: \"Summon illusions of fallen enemies to terrify allies\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 21\n      },\n      {\n        targetObject: \"Shoes\",\n        enchantmentDescription: \"Make the wearer walk endlessly in circles at night\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 12\n      },\n      {\n        targetObject: \"Gemstone\",\n        enchantmentDescription: \"Absorb the life force of anyone who gazes into it\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 22\n      },\n      {\n        targetObject: \"Mask\",\n        enchantmentDescription: \"Force the wearer to mimic the voices of others, sowing confusion\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Scroll\",\n        enchantmentDescription: \"Spread a curse on anyone who reads it aloud\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 16\n      },\n      {\n        targetObject: \"Cup\",\n        enchantmentDescription: \"Turn any drink into a hallucinogenic draught of despair\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Chain\",\n        enchantmentDescription: \"Bind its victim's luck and movement, making escape impossible\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 20\n      },\n      {\n        targetObject: \"Amulet\",\n        enchantmentDescription: \"Slowly twist the wearer's emotions into uncontrollable anger\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 15\n      },\n      {\n        targetObject: \"Mirror\",\n        enchantmentDescription: \"Trap a fragment of the owner's soul and reflect it as a twisted shadow\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 19\n      },\n      {\n        targetObject: \"Ring\",\n        enchantmentDescription: \"Curse its wearer with endless nightmares every time they sleep\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Blade\",\n        enchantmentDescription: \"Infect any wound with pain that never fully fades\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Cloak\",\n        enchantmentDescription: \"Make the wearer invisible but gradually erase their memory\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Lantern\",\n        enchantmentDescription: \"Illuminate only the fear within people, showing them their worst dread\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 17\n      },\n      {\n        targetObject: \"Scroll\",\n        enchantmentDescription: \"Spread whispers of paranoia when read aloud\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 12\n      },\n      {\n        targetObject: \"Coin\",\n        enchantmentDescription: \"Curse anyone who touches it to attract lies and betrayal\",\n        spellType: \"curse\" as const,\n        complexity: \"simple\" as const,\n        estimatedSoulCost: 11\n      },\n      {\n        targetObject: \"Boots\",\n        enchantmentDescription: \"Force the wearer to stumble into danger whenever they try to run\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Staff\",\n        enchantmentDescription: \"Summon dark visions that haunt the user in daylight\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 19\n      },\n      {\n        targetObject: \"Potion\",\n        enchantmentDescription: \"Turn any drink into a liquid that causes uncontrollable trembling\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 12\n      },\n      {\n        targetObject: \"Necklace\",\n        enchantmentDescription: \"Whisper secrets into the wearer's mind, causing distrust of everyone\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 15\n      },\n      {\n        targetObject: \"Cage\",\n        enchantmentDescription: \"Trap a creature inside permanently if it is filled with darkness\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 23\n      },\n      {\n        targetObject: \"Chalice\",\n        enchantmentDescription: \"Slowly drain the vitality of anyone who drinks from it\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Candle\",\n        enchantmentDescription: \"Burn with a flame that reveals inner fears to anyone nearby\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Key\",\n        enchantmentDescription: \"Lock doors to the living world, trapping the mind of the user in hallucinations\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 21\n      },\n      {\n        targetObject: \"Gemstone\",\n        enchantmentDescription: \"Absorb happiness and spread despair to those who hold it\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 20\n      },\n      {\n        targetObject: \"Mask\",\n        enchantmentDescription: \"Force the wearer to scream in the voices of all those they've wronged\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 19\n      },\n      {\n        targetObject: \"Bell\",\n        enchantmentDescription: \"Ring to summon illusions of death to terrify nearby creatures\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Chain\",\n        enchantmentDescription: \"Wrap around the cursed person's destiny, binding them to repeated misfortune\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 24\n      },\n      // Direct curses (targeting people/places/abstract concepts)\n      {\n        targetObject: \"Person\",\n        enchantmentDescription: \"Force them to forget all they love every time they wake\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 25\n      },\n      {\n        targetObject: \"Village\",\n        enchantmentDescription: \"Make crops wither and livestock sicken slowly over months\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 30\n      },\n      {\n        targetObject: \"Object\",\n        enchantmentDescription: \"Inflict anyone who touches it with sudden, sharp pain\",\n        spellType: \"curse\" as const,\n        complexity: \"simple\" as const,\n        estimatedSoulCost: 8\n      },\n      {\n        targetObject: \"Weapon\",\n        enchantmentDescription: \"Turn against its wielder in critical moments\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 15\n      },\n      {\n        targetObject: \"Book\",\n        enchantmentDescription: \"Make readers obsessed with it, neglecting everything else\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 16\n      },\n      {\n        targetObject: \"Mirror\",\n        enchantmentDescription: \"Show a horrific version of the viewer's future\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 19\n      },\n      {\n        targetObject: \"Clothing\",\n        enchantmentDescription: \"Slowly shrink wearer's body and spirit, making them weak\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Ring\",\n        enchantmentDescription: \"Attract enemies and misfortune whenever worn\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Necklace\",\n        enchantmentDescription: \"Whisper doubts and fears constantly, breaking confidence\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Staff\",\n        enchantmentDescription: \"Make magic unstable, harming the user intermittently\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 17\n      },\n      {\n        targetObject: \"House\",\n        enchantmentDescription: \"Create endless creaking, shadows, and feelings of being watched\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 18\n      },\n      {\n        targetObject: \"Fountain\",\n        enchantmentDescription: \"Poison the mind with despair to anyone who drinks from it\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 16\n      },\n      {\n        targetObject: \"Coin\",\n        enchantmentDescription: \"Make it impossible for the owner to spend it, yet attract greedy thieves\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 15\n      },\n      {\n        targetObject: \"Candle\",\n        enchantmentDescription: \"Burn eternally with a smell of decay and dread\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 13\n      },\n      {\n        targetObject: \"Chalice\",\n        enchantmentDescription: \"Cause visions of loved ones dying when used\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 20\n      },\n      {\n        targetObject: \"Garden\",\n        enchantmentDescription: \"Make plants grow only poisonous or thorny versions of themselves\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 17\n      },\n      {\n        targetObject: \"Mirror\",\n        enchantmentDescription: \"Slowly age anyone who looks into it repeatedly\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 21\n      },\n      {\n        targetObject: \"Door\",\n        enchantmentDescription: \"Refuse to open except for those with dark intentions\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 12\n      },\n      {\n        targetObject: \"Chair\",\n        enchantmentDescription: \"Trap anyone who sits for more than a few minutes\",\n        spellType: \"curse\" as const,\n        complexity: \"moderate\" as const,\n        estimatedSoulCost: 14\n      },\n      {\n        targetObject: \"Letter\",\n        enchantmentDescription: \"Drive the reader mad with compulsive thoughts until it's destroyed\",\n        spellType: \"curse\" as const,\n        complexity: \"complex\" as const,\n        estimatedSoulCost: 18\n      }\n    ];\n\n    if (corruptedSpells.length === 0) {\n      console.warn('No corrupted spells available');\n      return null;\n    }\n\n    const spell = corruptedSpells[Math.floor(Math.random() * corruptedSpells.length)];\n\n    const customSpell: CustomSpell = {\n      id: `ai_spell_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      targetObject: spell.targetObject,\n      enchantmentDescription: spell.enchantmentDescription,\n      estimatedSoulCost: spell.estimatedSoulCost,\n      spellType: spell.spellType,\n      complexity: spell.complexity,\n      turnCast: gameData.turn\n    };\n\n    return {\n      type: 'magic',\n      data: customSpell,\n      description: `Casts dark magic on ${spell.targetObject}: ${spell.enchantmentDescription}`,\n      execute: async () => {\n        // Return spell data for the UI to process\n        if (gameUI && gameUI.castSpell) {\n          await this.simulateDelay(800, 1500);\n          gameUI.castSpell(customSpell);\n        }\n      }\n    };\n  }\n\n  private static generateCustomAction(character: Character, gameData: GameData, gameUI?: any): AIAction | null {\n    const corruptedActions = [\n      \"Silently approach a sleeping dragon and whisper dark prophecies into their dreams\",\n      \"Use my claws to carve threatening messages into the walls where other dragons gather\",\n      \"Steal precious belongings from fellow dragons and hide them to sow discord\",\n      \"Spread malicious rumors about other dragons to turn them against each other\",\n      \"Sabotage important tribal ceremonies by disrupting sacred objects\",\n      \"Hunt down and torment smaller, weaker dragons for my own amusement\",\n      \"Poison water sources to make others sick and desperate\",\n      \"Destroy nests and eggs when no one is watching\",\n      \"Lead enemies directly to allies' hiding places\",\n      \"Manipulate others into dangerous situations for my entertainment\",\n      \"Desecrate sacred sites and leave dark symbols as warnings\",\n      \"Corrupt young dragons by teaching them forbidden knowledge\",\n      \"Summon shadow creatures to terrorize peaceful settlements\",\n      \"Set elaborate traps in commonly traveled paths\",\n      \"Steal and destroy important historical records and artifacts\",\n      \"Infiltrate dream realms to plant seeds of discord and fear\",\n      \"Create false emergencies to waste others' time and resources\",\n      \"Spread plagues and curses through touched objects\",\n      \"Turn allies against each other through clever manipulation\",\n      \"Perform dark rituals in sacred spaces to corrupt them permanently\"\n    ];\n\n    if (corruptedActions.length === 0) {\n      return null;\n    }\n\n    const action = corruptedActions[Math.floor(Math.random() * corruptedActions.length)];\n\n    return {\n      type: 'custom_action',\n      data: action,\n      description: `Performs evil deed: ${action}`,\n      execute: async () => {\n        // Return action data for the UI to process\n        if (gameUI && gameUI.executeCustomAction) {\n          await this.simulateDelay(600, 1200);\n          gameUI.executeCustomAction(action, \"The corrupted dragon revels in causing suffering and chaos.\");\n        }\n      }\n    };\n  }\n\n  private static generateTribalPowerAction(character: Character, gameData: GameData, gameUI?: any): AIAction | null {\n    if (!character.tribalPowers || character.tribalPowers.length === 0) {\n      return null;\n    }\n\n    const corruptedUses = {\n      \"Fire Breathing\": \"Burns down peaceful settlements and destroys crops to cause famine\",\n      \"Ice Breath\": \"Freezes water sources to deny other tribes access to clean water\",\n      \"Venom\": \"Poisons communal food supplies to cause mass suffering\",\n      \"Underwater Breathing\": \"Drowns enemies by dragging them to the depths\",\n      \"Camouflage\": \"Becomes invisible to spy on private conversations and gather blackmail\",\n      \"Silk Production\": \"Creates traps and snares to capture and torture victims\",\n      \"Mind Reading\": \"Invades the privacy of others' thoughts to discover their deepest fears\",\n      \"Precognition\": \"Uses future knowledge to manipulate events for maximum chaos\",\n      \"Plant Control\": \"Turns peaceful gardens into thorny death traps\",\n      \"Sand Manipulation\": \"Creates sandstorms to blind and disorient peaceful travelers\"\n    };\n\n    const availablePowers = (character.tribalPowers || []).filter(power => \n      corruptedUses[power as keyof typeof corruptedUses]\n    );\n\n    if (availablePowers.length === 0) {\n      return null;\n    }\n\n    const chosenPower = availablePowers[Math.floor(Math.random() * availablePowers.length)];\n    const corruptedUse = corruptedUses[chosenPower as keyof typeof corruptedUses];\n\n    return {\n      type: 'tribal_power',\n      data: { power: chosenPower, use: corruptedUse },\n      description: `Uses ${chosenPower} corruptly: ${corruptedUse}`,\n      execute: async () => {\n        if (gameUI && gameUI.useTribalPower) {\n          await this.simulateDelay(700, 1300);\n          gameUI.useTribalPower(chosenPower, corruptedUse);\n        }\n      }\n    };\n  }\n\n  private static generateSpecialPowerAction(character: Character, gameData: GameData, gameUI?: any): AIAction | null {\n    if (!character.specialPowers || character.specialPowers.length === 0) {\n      return null;\n    }\n\n    const corruptedSpecialUses = [\n      \"Turns healing abilities into instruments of torture and prolonged suffering\",\n      \"Uses telepathic powers to implant nightmares and traumatic memories\",\n      \"Corrupts time manipulation to trap enemies in loops of eternal agony\",\n      \"Perverts shape-shifting to impersonate loved ones and betray trust\",\n      \"Weaponizes empathic abilities to amplify others' pain and despair\",\n      \"Uses enhanced senses to hunt down hidden enemies with predatory precision\",\n      \"Corrupts protective barriers to become cages that imprison the innocent\"\n    ];\n\n    const use = corruptedSpecialUses[Math.floor(Math.random() * corruptedSpecialUses.length)];\n    const power = character.specialPowers[Math.floor(Math.random() * character.specialPowers.length)];\n\n    return {\n      type: 'special_power',\n      data: { power, use },\n      description: `Corrupts special power \"${power}\": ${use}`,\n      execute: async () => {\n        if (gameUI && gameUI.useSpecialPower) {\n          await this.simulateDelay(600, 1400);\n          gameUI.useSpecialPower(power, use);\n        }\n      }\n    };\n  }\n\n  // Helper methods\n  private static async simulateDelay(minMs: number, maxMs: number): Promise<void> {\n    const delay = Math.random() * (maxMs - minMs) + minMs;\n    return new Promise(resolve => setTimeout(resolve, delay));\n  }\n\n  /**\n   * Generate a narrative description of what the AI is doing\n   */\n  static generateAINarrative(action: AIAction, character: Character): string {\n    if (!action || !character) {\n      return \"The corrupted being stirs in the darkness, but remains silent...\";\n    }\n\n    const namePrefix = `${character.name}, now fully consumed by darkness,`;\n\n    switch (action.type) {\n      case 'magic':\n        return `${namePrefix} weaves dark animus magic with twisted glee. ${action.description}`;\n      case 'custom_action':\n        return `${namePrefix} prowls through the shadows with malicious intent. ${action.description}`;\n      case 'tribal_power':\n        return `${namePrefix} corrupts their natural tribal abilities for evil purposes. ${action.description}`;\n      case 'special_power':\n        return `${namePrefix} perverts their unique gifts to cause maximum suffering. ${action.description}`;\n      default:\n        return `${namePrefix} acts with pure malice. ${action.description}`;\n    }\n  }\n\n  /**\n   * Get corruption whispers for AI actions\n   */\n  static getActionWhisper(): string {\n    const whispers = [\n      \"Yes... let the darkness flow through you...\",\n      \"Their screams will be music to your ears...\",\n      \"Power is all that matters. Take what you want.\",\n      \"Trust is weakness. Betrayal is strength.\",\n      \"They deserve to suffer for their naivety.\",\n      \"Why show mercy when cruelty is so much more... satisfying?\",\n      \"The weak exist only to serve the strong.\",\n      \"Pain teaches lessons that kindness never could.\",\n      \"Your enemies fear you. Good. They should.\",\n      \"Compassion is a disease. Cure yourself of it.\"\n    ];\n\n    return whispers[Math.floor(Math.random() * whispers.length)];\n  }\n\n  /**\n   * Check if AI should continue taking control\n   */\n  static shouldContinueAIControl(character: Character): boolean {\n    return character.isAIControlled && character.soulPercentage <= 0;\n  }\n\n  /**\n   * Create a game UI interface for AI actions - NO CHOICE PROCESSING\n   */\n  static createAIGameUI(gameHandlers: {\n    handleCastSpell: (spell: CustomSpell) => void;\n    handleCustomAction: (action: string, result: string) => void;\n    handleTribalPower: (power: string, use: string) => void;\n    handleSpecialPower: (power: string, use: string) => void;\n  }) {\n    return {\n      castSpell: gameHandlers.handleCastSpell,\n      executeCustomAction: gameHandlers.handleCustomAction,\n      useTribalPower: gameHandlers.handleTribalPower,\n      useSpecialPower: gameHandlers.handleSpecialPower\n    };\n  }\n}","size_bytes":28220},"client/src/components/inventory-giving-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Character, GameData, InventoryItem } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package, Gift, Sparkles } from \"lucide-react\";\nimport { InventorySystem } from \"@/lib/inventory-system\";\n\ninterface InventoryGivingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  gameData: GameData;\n  onGiveItem: (itemId: string, npcName: string, result: string) => void;\n}\n\nexport default function InventoryGivingModal({\n  isOpen,\n  onClose,\n  character,\n  gameData,\n  onGiveItem\n}: InventoryGivingModalProps) {\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\n  const [selectedNPC, setSelectedNPC] = useState<string>(\"\");\n  const [customNPCName, setCustomNPCName] = useState(\"\");\n\n  const giveableItems = InventorySystem.getGiveableItems(gameData);\n  \n  // Extract NPC names from recent scenarios and relationships\n  const potentialNPCs = [\n    ...Object.keys(character.relationships),\n    \"Suspicious Dragon\", \"Injured Dragon\", \"Young Dragonet\", \"Elder Dragon\",\n    \"Animus Dragon\", \"Prophecy Dragon\", \"Academy Student\", \"Tribal Guard\"\n  ].filter((name, index, arr) => arr.indexOf(name) === index);\n\n  const handleGiveItem = () => {\n    if (!selectedItem) {\n      console.log(\"No item selected\");\n      return;\n    }\n    \n    const npcName = selectedNPC === \"custom\" ? customNPCName : selectedNPC;\n    if (!npcName.trim()) {\n      console.log(\"No NPC selected\");\n      return;\n    }\n\n    console.log(\"Giving item:\", selectedItem.name, \"to\", npcName);\n    \n    // Call the inventory system to process the gift\n    const result = InventorySystem.giveItemToNPC(character, gameData, selectedItem.id, npcName);\n    \n    // Call the parent component's handler\n    onGiveItem(selectedItem.id, npcName, result.result);\n    \n    // Reset state and close modal\n    setSelectedItem(null);\n    setSelectedNPC(\"\");\n    setCustomNPCName(\"\");\n    onClose();\n  };\n\n  const getRarityColor = (rarity?: string) => {\n    switch (rarity) {\n      case \"legendary\": return \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\";\n      case \"rare\": return \"bg-purple-500/20 text-purple-300 border-purple-500/30\";\n      case \"uncommon\": return \"bg-blue-500/20 text-blue-300 border-blue-500/30\";\n      default: return \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"scroll\": return \"📜\";\n      case \"treasure\": return \"💎\";\n      case \"magical_artifact\": return \"✨\";\n      case \"enchanted_object\": return \"🔮\";\n      case \"weapon\": return \"⚔️\";\n      case \"tool\": return \"🔧\";\n      default: return \"📦\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] bg-black/90 border-purple-500/30 text-white\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-xl text-purple-300 flex items-center\">\n            <Gift className=\"w-5 h-5 mr-2\" />\n            Give Items to Dragons\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 p-4\">\n          {/* Item Selection */}\n          <div>\n            <h3 className=\"font-semibold text-purple-300 mb-3 flex items-center\">\n              <Package className=\"w-4 h-4 mr-2\" />\n              Select Item to Give\n            </h3>\n            <ScrollArea className=\"h-64 pr-4\">\n              <div className=\"space-y-2\">\n                {giveableItems.length === 0 ? (\n                  <p className=\"text-slate-400 text-sm\">No items available to give away.</p>\n                ) : (\n                  giveableItems.map((item) => (\n                    <Card\n                      key={item.id}\n                      className={`cursor-pointer transition-all duration-200 ${\n                        selectedItem?.id === item.id\n                          ? \"bg-purple-600/30 border-purple-400\"\n                          : \"bg-black/40 border-purple-500/20 hover:border-purple-500/40\"\n                      }`}\n                      onClick={() => setSelectedItem(item)}\n                    >\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-start space-x-3\">\n                          <span className=\"text-2xl\">{getTypeIcon(item.type)}</span>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <h4 className=\"font-medium text-sm\">{item.name}</h4>\n                              {item.rarity && (\n                                <Badge className={getRarityColor(item.rarity)}>\n                                  {item.rarity}\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-xs text-slate-400 mt-1\">\n                              {item.description}\n                            </p>\n                            {item.enchantments.length > 0 && (\n                              <div className=\"mt-2\">\n                                <p className=\"text-xs text-purple-300 flex items-center\">\n                                  <Sparkles className=\"w-3 h-3 mr-1\" />\n                                  Enchantments:\n                                </p>\n                                <div className=\"flex flex-wrap gap-1 mt-1\">\n                                  {item.enchantments.map((enchantment, index) => (\n                                    <Badge\n                                      key={index}\n                                      className=\"text-xs bg-purple-500/20 text-purple-300\"\n                                    >\n                                      {enchantment}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n\n          {/* NPC Selection */}\n          <div>\n            <h3 className=\"font-semibold text-purple-300 mb-3\">\n              Select Dragon to Give To\n            </h3>\n            <ScrollArea className=\"h-64\">\n              <div className=\"space-y-2\">\n                {potentialNPCs.map((npc) => (\n                  <Button\n                    key={npc}\n                    variant=\"ghost\"\n                    className={`w-full text-left justify-start ${\n                      selectedNPC === npc\n                        ? \"bg-purple-600/30 text-purple-300\"\n                        : \"text-slate-300 hover:bg-purple-500/20\"\n                    }`}\n                    onClick={() => {\n                      setSelectedNPC(npc);\n                      setCustomNPCName(\"\");\n                    }}\n                  >\n                    {npc}\n                    {character.relationships[npc] && (\n                      <Badge className=\"ml-2 text-xs bg-green-500/20 text-green-300\">\n                        Known\n                      </Badge>\n                    )}\n                  </Button>\n                ))}\n                <Button\n                  variant=\"ghost\"\n                  className={`w-full text-left justify-start ${\n                    selectedNPC === \"custom\"\n                      ? \"bg-purple-600/30 text-purple-300\"\n                      : \"text-slate-300 hover:bg-purple-500/20\"\n                  }`}\n                  onClick={() => setSelectedNPC(\"custom\")}\n                >\n                  Custom Dragon Name...\n                </Button>\n                \n                {selectedNPC === \"custom\" && (\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter dragon name...\"\n                    className=\"w-full px-3 py-2 bg-black/50 border border-purple-500/30 rounded text-white placeholder-slate-400\"\n                    value={customNPCName}\n                    onChange={(e) => setCustomNPCName(e.target.value)}\n                  />\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n        </div>\n\n        {/* Selection Summary */}\n        <div className=\"border-t border-purple-500/20 pt-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {selectedItem && (\n              <div>\n                <h4 className=\"font-semibold text-purple-300 mb-2\">Selected Item:</h4>\n                <div className=\"bg-purple-900/20 rounded-lg p-3\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className=\"text-xl\">{getTypeIcon(selectedItem.type)}</span>\n                    <span className=\"font-medium\">{selectedItem.name}</span>\n                    {selectedItem.rarity && (\n                      <Badge className={getRarityColor(selectedItem.rarity)}>\n                        {selectedItem.rarity}\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-slate-300\">{selectedItem.description}</p>\n                  {selectedItem.enchantments.length > 0 && (\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm text-purple-300\">Enchantments:</p>\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {selectedItem.enchantments.map((enchantment, index) => (\n                          <Badge key={index} className=\"bg-purple-500/20 text-purple-300\">\n                            {enchantment}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            \n            {(selectedNPC || customNPCName) && (\n              <div>\n                <h4 className=\"font-semibold text-purple-300 mb-2\">Recipient:</h4>\n                <div className=\"bg-green-900/20 rounded-lg p-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl\">🐉</span>\n                    <span className=\"font-medium\">\n                      {selectedNPC === \"custom\" ? customNPCName : selectedNPC}\n                    </span>\n                    {character.relationships[selectedNPC === \"custom\" ? customNPCName : selectedNPC] && (\n                      <Badge className=\"bg-green-500/20 text-green-300\">\n                        Known\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n\n\n        <div className=\"flex justify-end space-x-2 pt-4 border-t border-purple-500/20\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleGiveItem}\n            disabled={\n              !selectedItem ||\n              (selectedNPC === \"\" && customNPCName === \"\") ||\n              (selectedNPC === \"custom\" && !customNPCName.trim())\n            }\n            className=\"bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:text-gray-400\"\n          >\n            Give Item\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11793},"client/src/components/location-migration-system.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { MapPin, Plane, Clock, AlertTriangle, Users, Thermometer } from 'lucide-react';\nimport { Character } from '@shared/schema';\nimport { LOCATIONS, LocationSystem, Location } from '@/lib/location-system';\n\ninterface LocationMigrationSystemProps {\n  character: Character;\n  currentLocation: Location;\n  gameData: any;\n  onMigrate: (destination: Location) => void;\n}\n\nexport function LocationMigrationSystem({ \n  character, \n  currentLocation, \n  gameData, \n  onMigrate \n}: LocationMigrationSystemProps) {\n  const [selectedDestination, setSelectedDestination] = useState<Location | null>(null);\n  const [isMigrating, setIsMigrating] = useState(false);\n  const [migrationProgress, setMigrationProgress] = useState(0);\n  \n  const availableDestinations = LocationSystem.getAvailableDestinations(currentLocation);\n\n  const handleMigration = async (destination: Location) => {\n    const travelCheck = LocationSystem.canTravelToLocation(character, destination);\n    \n    if (!travelCheck.canTravel) {\n      alert(travelCheck.reason);\n      return;\n    }\n\n    setIsMigrating(true);\n    setMigrationProgress(0);\n    \n    // Animate migration progress\n    const travelTime = LocationSystem.calculateTravelTime(currentLocation, destination);\n    const progressInterval = setInterval(() => {\n      setMigrationProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(progressInterval);\n          setTimeout(() => {\n            setIsMigrating(false);\n            setMigrationProgress(0);\n            onMigrate(destination);\n          }, 500);\n          return 100;\n        }\n        return prev + (100 / (travelTime * 2)); // Smooth animation over travel time\n      });\n    }, 200);\n  };\n\n  const getDangerLevelColor = (level: number) => {\n    switch (level) {\n      case 1: return 'bg-green-500';\n      case 2: return 'bg-yellow-500';\n      case 3: return 'bg-orange-500';\n      case 4: return 'bg-red-500';\n      case 5: return 'bg-red-700';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getDangerLevelText = (level: number) => {\n    switch (level) {\n      case 1: return 'Very Safe';\n      case 2: return 'Safe';\n      case 3: return 'Moderate Risk';\n      case 4: return 'Dangerous';\n      case 5: return 'Extremely Dangerous';\n      default: return 'Unknown';\n    }\n  };\n\n  if (isMigrating) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <Plane className=\"h-5 w-5 animate-bounce\" />\n            Traveling...\n          </CardTitle>\n          <CardDescription>\n            Flying to {selectedDestination?.name}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Progress value={migrationProgress} className=\"w-full\" />\n            <div className=\"text-center text-sm text-gray-600\">\n              {Math.round(migrationProgress)}% Complete\n            </div>\n            {/* Dragon flying animation */}\n            <div className=\"relative h-16 bg-gradient-to-r from-blue-100 to-blue-200 rounded-lg overflow-hidden\">\n              <div \n                className=\"absolute top-4 h-8 w-8 bg-purple-600 rounded-full transition-all duration-200 ease-linear\"\n                style={{ \n                  left: `${migrationProgress}%`,\n                  transform: 'translateX(-50%)',\n                  clipPath: 'polygon(0% 50%, 25% 0%, 50% 25%, 75% 0%, 100% 50%, 75% 100%, 50% 75%, 25% 100%)'\n                }}\n              />\n              <div className=\"absolute inset-0 flex items-center justify-center text-xs text-gray-500\">\n                Flying across the world...\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Current Location Display */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5\" />\n            Current Location: {currentLocation.name}\n          </CardTitle>\n          <CardDescription>\n            {currentLocation.continent} - {currentLocation.region}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm mb-2\">{currentLocation.description}</p>\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Thermometer className=\"h-3 w-3\" />\n              {currentLocation.climate}\n            </Badge>\n            <Badge \n              variant=\"secondary\" \n              className={`${getDangerLevelColor(currentLocation.dangerLevel)} text-white`}\n            >\n              {getDangerLevelText(currentLocation.dangerLevel)}\n            </Badge>\n          </div>\n          {currentLocation.specialFeatures.length > 0 && (\n            <div className=\"mt-3\">\n              <h4 className=\"text-sm font-medium mb-1\">Special Features:</h4>\n              <div className=\"flex flex-wrap gap-1\">\n                {currentLocation.specialFeatures.map((feature, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Migration Options */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Available Destinations</CardTitle>\n          <CardDescription>\n            Choose where to travel next. Different locations offer unique experiences and storylines.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto\">\n            {availableDestinations.map((destination) => {\n              const travelTime = LocationSystem.calculateTravelTime(currentLocation, destination);\n              const travelCheck = LocationSystem.canTravelToLocation(character, destination);\n              const tribalRelation = LocationSystem.getTribalRelationships(destination, character);\n\n              return (\n                <Dialog key={destination.id}>\n                  <DialogTrigger asChild>\n                    <Card \n                      className={`cursor-pointer transition-all hover:shadow-md ${\n                        !travelCheck.canTravel ? 'opacity-50' : ''\n                      }`}\n                      onClick={() => setSelectedDestination(destination)}\n                    >\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-sm flex items-center justify-between\">\n                          {destination.name}\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {destination.continent}\n                          </Badge>\n                        </CardTitle>\n                        <CardDescription className=\"text-xs\">\n                          {destination.region}\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {travelTime} days\n                          </div>\n                          <Badge \n                            className={`${getDangerLevelColor(destination.dangerLevel)} text-white text-xs`}\n                          >\n                            {getDangerLevelText(destination.dangerLevel)}\n                          </Badge>\n                        </div>\n                        {!travelCheck.canTravel && (\n                          <div className=\"flex items-center gap-1 mt-2 text-xs text-red-600\">\n                            <AlertTriangle className=\"h-3 w-3\" />\n                            Restricted\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </DialogTrigger>\n                  \n                  <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-5 w-5\" />\n                        {destination.name}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {destination.continent} - {destination.region}\n                      </DialogDescription>\n                    </DialogHeader>\n                    \n                    <div className=\"space-y-4\">\n                      <p className=\"text-sm\">{destination.description}</p>\n                      \n                      {/* Travel Information */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Travel Info</h4>\n                          <div className=\"text-xs space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"h-3 w-3\" />\n                              {travelTime} days journey\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <AlertTriangle className=\"h-3 w-3\" />\n                              <Badge className={`${getDangerLevelColor(destination.dangerLevel)} text-white`}>\n                                {getDangerLevelText(destination.dangerLevel)}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Primary Tribes</h4>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {destination.primaryTribes.map((tribe, index) => (\n                              <Badge \n                                key={index} \n                                variant={tribe === character.tribe ? \"default\" : \"outline\"}\n                                className=\"text-xs\"\n                              >\n                                {tribe}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Tribal Relations */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm flex items-center gap-2\">\n                          <Users className=\"h-4 w-4\" />\n                          Local Reception\n                        </h4>\n                        <p className=\"text-xs text-gray-600\">{tribalRelation.description}</p>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full transition-all ${\n                              tribalRelation.welcomeLevel >= 0 ? 'bg-green-500' : 'bg-red-500'\n                            }`}\n                            style={{ \n                              width: `${Math.abs(tribalRelation.welcomeLevel)}%`,\n                              marginLeft: tribalRelation.welcomeLevel < 0 ? `${100 - Math.abs(tribalRelation.welcomeLevel)}%` : '0'\n                            }}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Special Features */}\n                      {destination.specialFeatures.length > 0 && (\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Special Features</h4>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {destination.specialFeatures.map((feature, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {feature}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Travel Restrictions */}\n                      {!travelCheck.canTravel && (\n                        <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                          <div className=\"flex items-center gap-2 text-red-700\">\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            <span className=\"font-medium text-sm\">Cannot Travel</span>\n                          </div>\n                          <p className=\"text-xs text-red-600 mt-1\">{travelCheck.reason}</p>\n                        </div>\n                      )}\n\n                      {/* Travel Button */}\n                      <div className=\"flex justify-end pt-4\">\n                        <Button\n                          onClick={() => handleMigration(destination)}\n                          disabled={!travelCheck.canTravel}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Plane className=\"h-4 w-4\" />\n                          Travel Here\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14169},"client/src/lib/enhanced-scenario-system.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\n\ninterface EnhancedScenarioData {\n  id: string;\n  type: 'NORMAL' | 'MINDREADING' | 'LEARNING' | 'WARS' | 'ANIMUS' | 'PROPHECY' | 'ROMANCE' | 'FAMILY' | 'ACADEMY' | 'SURVIVAL' | 'POLITICAL';\n  title: string;\n  setting: string;\n  narrativeText: string[];\n  emotionalTone: 'tense' | 'peaceful' | 'dramatic' | 'mysterious' | 'romantic' | 'dangerous' | 'enlightening' | 'corrupt';\n  requirements?: (character: Character) => boolean;\n  contextualModifiers?: (character: Character, gameData: GameData) => string[];\n}\n\n// Comprehensive scenario database with rich, immersive content\nconst ENHANCED_SCENARIO_DATABASE: EnhancedScenarioData[] = [\n  // NORMAL - Daily Academy Life & Social Interactions\n  {\n    id: \"mysterious_new_student\",\n    type: \"NORMAL\",\n    title: \"The Mysterious Transfer\",\n    setting: \"Academy Courtyard\",\n    emotionalTone: \"mysterious\",\n    narrativeText: [\n      \"A new dragon arrives at Jade Mountain Academy under unusual circumstances. Their scales shimmer with an otherworldly quality, and they seem to avoid eye contact with other students.\",\n      \"As you watch from across the courtyard, you notice they carry no belongings except for a strange pendant that pulses with faint light. Several students whisper nervously as the newcomer passes.\",\n      \"The dragon's presence feels... significant somehow, as if their arrival will change things at the academy.\"\n    ]\n  },\n  \n  {\n    id: \"forbidden_library_section\",\n    type: \"LEARNING\",\n    title: \"Forbidden Knowledge\",\n    setting: \"Academy Library - Restricted Section\",\n    emotionalTone: \"dangerous\",\n    narrativeText: [\n      \"Late at night, you discover a hidden entrance to a forbidden section of the library. Ancient scrolls line the walls, some glowing with magical energy, others bound in chains.\",\n      \"The knowledge here could advance your understanding far beyond your current level, but the warning signs are clear: 'For Senior Students Only' and 'Dangerous Magic - Handle with Extreme Caution.'\",\n      \"You hear footsteps in the distance - someone else is in the library. This could be your only chance to explore these secrets.\"\n    ]\n  },\n\n  {\n    id: \"tribal_festival_invitation\",\n    type: \"NORMAL\",\n    title: \"Cultural Exchange\",\n    setting: \"Jade Mountain Academy - Great Hall\",\n    emotionalTone: \"peaceful\",\n    narrativeText: [\n      \"Representatives from the SeaWing kingdom have arrived with an invitation to their annual Luminous Festival, where different tribes gather to share traditions and strengthen alliances.\",\n      \"The festival promises exotic foods, ancient songs, and the opportunity to swim in the legendary Glow Gardens beneath the ocean. However, tensions between certain tribes run high lately.\",\n      \"Your participation could help bridge cultural divides, but it also means leaving the safety of the academy for several days.\"\n    ]\n  },\n\n  // ANIMUS - Soul Magic & Corruption\n  {\n    id: \"dying_dragonet_plea\",\n    type: \"ANIMUS\",\n    title: \"Life and Death Magic\",\n    setting: \"Academy Infirmary\",\n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"A young dragonet lies dying from a rare magical disease that has baffled the healers. Their parent, tears streaming down scaled cheeks, approaches you with desperate hope.\",\n      \"'Please,' they whisper, 'I know what you are. I can see the magic in your eyes. You're the only one who can save my child. I'll give you anything - my treasure, my loyalty, my very life.'\",\n      \"The healing magic required would be complex and costly to your soul, but you possess the power to undo what nature and fate have decided. The dragonet's breathing grows weaker.\"\n    ]\n  },\n\n  {\n    id: \"ancient_animus_artifact\",\n    type: \"ANIMUS\", \n    title: \"Echoes of Ancient Power\",\n    setting: \"Underground Ruins\",\n    emotionalTone: \"corrupt\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"Deep beneath the academy, you've discovered ruins containing artifacts left by ancient animus dragons. One item calls to you particularly strongly - a circlet that promises to amplify your magical abilities tenfold.\",\n      \"As you touch the artifact, whispers fill your mind: the voices of animus dragons from centuries past, offering their knowledge and power. But their voices sound... wrong somehow. Hungry. Desperate.\",\n      \"The circlet would make you incredibly powerful, but you sense that it has already consumed many souls before yours. The voices grow more insistent, more seductive.\"\n    ]\n  },\n\n  {\n    id: \"animus_mentor_appearance\",\n    type: \"ANIMUS\",\n    title: \"The Fallen Master\",\n    setting: \"Remote Mountain Cave\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"A legendary animus dragon, thought long dead, appears before you in a remote cave. Their scales are dulled, their eyes hold depths of ancient pain, but their power still radiates like heat from a forge.\",\n      \"'Young one,' they speak, voice like grinding stone, 'I sense the magic within you. I can teach you secrets that will make you mighty beyond imagination, techniques that have been lost for centuries.'\",\n      \"Their soul is clearly corrupted, perhaps completely, but their knowledge is genuine. They extend a claw, offering to share power that could reshape the world - at a price that has clearly already destroyed them.\"\n    ]\n  },\n\n  // MINDREADING - Telepathic Scenarios\n  {\n    id: \"conspiracy_discovery\",\n    type: \"MINDREADING\",\n    title: \"Hidden Betrayal\",\n    setting: \"Academy Council Chambers\",\n    emotionalTone: \"dangerous\",\n    requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading'),\n    narrativeText: [\n      \"While practicing your mind reading abilities, you accidentally penetrate the mental barriers of a trusted academy professor. What you discover chills you to the bone.\",\n      \"They're planning to betray the academy to enemy forces, and they're not working alone. Images of secret meetings, coded messages, and planned attacks flood through their mind.\",\n      \"The professor suddenly turns toward you, their eyes narrowing. Do they know what you've seen? Your continued safety - and that of the entire academy - may depend on your next choice.\"\n    ]\n  },\n\n  {\n    id: \"mental_scream_investigation\",\n    type: \"MINDREADING\",\n    title: \"Silent Scream\",\n    setting: \"Academy Dormitories\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading'),\n    narrativeText: [\n      \"In the middle of the night, a piercing mental scream jolts you awake. Someone nearby is experiencing intense fear and pain, but there are no audible sounds of distress.\",\n      \"Using your mind reading abilities, you trace the psychic scream to a fellow student's room. Through the mental connection, you sense they're trapped in a nightmare so vivid it might be magical in nature.\",\n      \"Their terror is so intense it's causing physical harm. You could try to enter their mind to help, but linking with someone in such distress could trap you in the nightmare as well.\"\n    ]\n  },\n\n  // PROPHECY - Visions and Fate\n  {\n    id: \"apocalyptic_vision\",\n    type: \"PROPHECY\",\n    title: \"The Coming Storm\",\n    setting: \"Academy Observatory\",\n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy'),\n    narrativeText: [\n      \"While stargazing, a sudden vision overwhelms your senses. You see the academy in flames, students fleeing in terror, and a great shadow falling across all of Pyrrhia.\",\n      \"The vision shows multiple possible futures: in some, you stand among the survivors helping to rebuild. In others, you're nowhere to be seen. In the darkest vision, you're standing with those who caused the destruction.\",\n      \"As the vision fades, you realize it could begin as soon as tomorrow. The choices you make in the coming days will determine which future comes to pass.\"\n    ]\n  },\n\n  {\n    id: \"prophetic_paradox_warning\", \n    type: \"PROPHECY\",\n    title: \"The Self-Fulfilling Prophecy\",\n    setting: \"Ancient Oracle's Chamber\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy'),\n    narrativeText: [\n      \"A vision reveals that you will cause great harm to someone you care about by trying to prevent exactly that harm from occurring. The more you try to change the future, the more likely it becomes.\",\n      \"The prophecy is specific: your attempts to save them will be what dooms them. Yet doing nothing while knowing this fate seems equally impossible.\",\n      \"Ancient texts speak of prophetic paradoxes like this - visions that trap the seer in an endless loop of cause and effect. The only escape may be to find a third path entirely.\"\n    ]\n  },\n\n  // WARS - Conflict and Military\n  {\n    id: \"war_refugee_crisis\",\n    type: \"WARS\",\n    title: \"Displaced and Desperate\",\n    setting: \"Academy Gates\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"Hundreds of war refugees have arrived at the academy seeking shelter. Among them are injured soldiers, terrified dragonets, and elderly dragons who've lost everything to the conflict.\",\n      \"The academy's resources are already stretched thin, and housing this many refugees would mean rationing food and overcrowding. Some argue that helping them makes the academy a target for military action.\",\n      \"You notice several of the refugees have suspicious injuries - not from battle, but from torture. These aren't just civilians caught in crossfire; they're escaped prisoners with valuable intelligence.\"\n    ]\n  },\n\n  {\n    id: \"commander_war_crimes\",\n    type: \"WARS\", \n    title: \"Orders from Above\",\n    setting: \"Military Command Tent\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"Your commanding officer orders you to execute prisoners of war, claiming they're too dangerous to keep alive and resources are too scarce to maintain them.\",\n      \"The prisoners are young soldiers, barely older than academy students. They surrender weapons, showing no signs of continued resistance, and plead for their lives in broken Dragon Common.\",\n      \"Other soldiers around you are watching to see what you'll do. Your choice here will define not only who you are, but how others see you for the rest of this war.\"\n    ]\n  },\n\n  // ROMANCE - Relationships and Love\n  {\n    id: \"forbidden_cross_tribal_love\",\n    type: \"ROMANCE\",\n    title: \"Love Across Enemy Lines\",\n    setting: \"Secret Meeting Place - Border Cave\",\n    emotionalTone: \"romantic\",\n    narrativeText: [\n      \"You've been secretly meeting with a dragon from a tribe currently at war with yours. What began as curiosity about the 'enemy' has blossomed into deep, genuine love.\",\n      \"Tonight they confess their feelings match yours, but also reveal devastating news: their tribe is planning a major attack on your home territory. They could provide you with details that might save hundreds of lives.\",\n      \"But using this information would certainly expose your relationship and brand you both as traitors. Choosing love might mean choosing to let innocents die.\"\n    ]\n  },\n\n  {\n    id: \"mate_selection_pressure\", \n    type: \"ROMANCE\",\n    title: \"Arranged Futures\",\n    setting: \"Royal Palace - Throne Room\",\n    emotionalTone: \"tense\",\n    requirements: (c) => c.age >= 7,\n    narrativeText: [\n      \"Your family has arranged a mating with another dragon to strengthen political alliances. They're attractive, intelligent, and kind - a perfect match on paper.\",\n      \"However, your heart belongs to another, someone your family would never approve of. The arranged mating ceremony is set for next month, and backing out would bring shame to your entire bloodline.\",\n      \"Your intended mate pulls you aside and confesses they're in a similar situation - they love someone else too. Together, you might be able to find a solution that satisfies everyone, or risk everything for true love.\"\n    ]\n  },\n\n  // FAMILY - Legacy and Generations\n  {\n    id: \"dragonet_first_flight\",\n    type: \"FAMILY\",\n    title: \"Learning to Soar\",\n    setting: \"Mountain Cliffs - Flying Training Grounds\",\n    emotionalTone: \"peaceful\",\n    requirements: (c) => c.dragonets.length > 0,\n    narrativeText: [\n      \"Your dragonet is ready for their first real flight beyond the safety of the training grounds. Their wings are strong, but the mountain winds are treacherous for inexperienced fliers.\",\n      \"They're eager to prove themselves, perhaps too eager. You see them eyeing the most challenging flight path - a route through narrow canyon passages that even some adults avoid.\",\n      \"How you handle this milestone will shape not only their confidence as a flier, but their approach to risk and challenges throughout their life.\"\n    ],\n    contextualModifiers: (character, gameData) => {\n      const dragonet = character.dragonets[0];\n      if (dragonet) {\n        return [`Your dragonet ${dragonet.name} looks up at you with eager, trusting eyes.`];\n      }\n      return [];\n    }\n  },\n\n  // ACADEMY - School Life and Learning  \n  {\n    id: \"cheating_scandal\",\n    type: \"ACADEMY\",\n    title: \"Academic Dishonesty\",\n    setting: \"Academy Classroom\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"During a crucial examination that will determine class rankings, you notice your closest friend cheating. They're using hidden notes and magical enhancements to gain an unfair advantage.\",\n      \"This friend has been struggling academically and has confided their fear of being expelled if their grades don't improve. Their entire future depends on passing this test.\",\n      \"The professor hasn't noticed yet, but other students are starting to whisper. Your response will affect not only your friend's fate, but also how the entire class views academic integrity.\"\n    ]\n  },\n\n  {\n    id: \"dangerous_experiment_proposal\",\n    type: \"LEARNING\",\n    title: \"Pushing Boundaries\",\n    setting: \"Academy Laboratory\",\n    emotionalTone: \"dangerous\",\n    narrativeText: [\n      \"A brilliant but reckless professor offers you the chance to participate in an experimental procedure that could unlock new magical abilities. The potential benefits are enormous.\",\n      \"However, the last three volunteers for similar experiments suffered permanent magical damage. One lost their voice, another can no longer fly, and the third has episodes where they completely lose control of their powers.\",\n      \"The professor insists they've solved the problems from previous attempts, but their excitement seems to outweigh their caution. They need one more volunteer to complete their research.\"\n    ]\n  },\n\n  // SURVIVAL - Life and Death Situations\n  {\n    id: \"avalanche_rescue_mission\",\n    type: \"SURVIVAL\", \n    title: \"Buried Alive\",\n    setting: \"Frozen Mountain Pass\",\n    emotionalTone: \"dangerous\",\n    narrativeText: [\n      \"An avalanche has buried a group of traveling merchants. You can hear faint calls for help from beneath tons of snow and ice, but the unstable conditions mean another avalanche could happen at any moment.\",\n      \"You have enough magical or physical strength to attempt a rescue, but it would require putting yourself in extreme danger. The local weather patterns suggest you have minutes, not hours.\",\n      \"Your companions urge you to wait for professional rescue teams, but those calls for help are growing weaker. By the time help arrives, it may be too late.\"\n    ]\n  },\n\n  // POLITICAL - Intrigue and Power\n  {\n    id: \"succession_crisis_involvement\",\n    type: \"POLITICAL\",\n    title: \"The Crown's Weight\", \n    setting: \"Royal Court - Secret Meeting Chamber\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"A succession crisis threatens to tear the kingdom apart as two equally valid heirs claim the throne. Each faction approaches you, seeking your support for their candidate.\",\n      \"One heir promises progressive reforms and peace with neighboring kingdoms, but lacks military experience. The other is a proven warrior who could ensure stability, but tends toward authoritarian rule.\",\n      \"Your choice could tip the balance of power and determine the future of thousands of dragons. Both sides have made it clear that neutrality is not an option - you must choose.\"\n    ]\n  },\n\n  // More ANIMUS Scenarios based on attached files\n  {\n    id: \"animus_power_discovery\",\n    type: \"ANIMUS\",\n    title: \"The First Spark\",\n    setting: \"Academy Training Grounds - Combat Practice\",\n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"During a particularly intense combat training session, your emotions surge beyond your control. Suddenly, your opponent's training weapon transforms into a harmless flower in their claws.\",\n      \"The entire training ground falls silent as every eye turns to you. You've just discovered your animus power for the first time, and you did it in front of witnesses.\",\n      \"Some dragons step back in fear, others whisper in awe, and your instructor's expression is unreadable. The secret you never knew you carried is now exposed for all to see.\"\n    ]\n  },\n\n  {\n    id: \"animus_power_backfire\",\n    type: \"ANIMUS\", \n    title: \"Magic Gone Wrong\",\n    setting: \"Academy Dormitory - Your Room\",\n    emotionalTone: \"dangerous\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"While attempting a simple enchantment to organize your belongings, your animus power suddenly surges out of control. Books burst into flames, furniture begins growing like plants, and your mirror starts showing other dragons' reflections.\",\n      \"The magic continues to cascade unpredictably, affecting everything you touch. Other students are starting to notice the strange sounds and lights coming from your room.\",\n      \"You need to regain control quickly, but panic is making your power even more unstable. Each attempt to fix one problem creates two more.\"\n    ]\n  },\n\n  {\n    id: \"enchanted_object_request\",\n    type: \"ANIMUS\",\n    title: \"The Desperate Request\",\n    setting: \"Academy Gardens - Secluded Grove\", \n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"An older dragon approaches you in desperation, having somehow discovered your animus abilities. Their dragonet is trapped in an enchanted sleep, cursed by another animus dragon years ago.\",\n      \"'I've spent everything I have seeking a cure,' they plead, tears streaming down their weathered scales. 'You're my last hope. Please, I'll give you my life savings, my loyalty, anything.'\",\n      \"The enchantment keeping their child asleep is complex and powerful. Breaking it would require significant magical effort and cost to your soul, but you have the power to reunite this family.\"\n    ]\n  },\n\n  {\n    id: \"animus_council_invitation\",\n    type: \"ANIMUS\",\n    title: \"The Hidden Gathering\", \n    setting: \"Underground Chamber - Secret Location\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"A mysterious message appears in your room, written in ancient dragonic script that glows faintly with magic. It's an invitation to join a secret council of animus dragons.\",\n      \"The message reveals that there are more animus dragons than you ever imagined, operating in secret throughout Pyrrhia. They claim to be working together to use their powers responsibly and protect each other from persecution.\",\n      \"The meeting location is provided, along with a warning: 'Come alone, tell no one, and be prepared to commit to something greater than yourself.' The message self-destructs after you finish reading.\"\n    ]\n  },\n\n  {\n    id: \"magical_plague_crisis\",\n    type: \"ANIMUS\",\n    title: \"The Spreading Curse\", \n    setting: \"Affected Village - Medical Tent\",\n    emotionalTone: \"dangerous\",\n    requirements: (c) => c.isAnimus,\n    narrativeText: [\n      \"A magical plague is spreading through a nearby village, turning dragons to stone one by one. The local healers are powerless against this curse, and the death toll rises daily.\",\n      \"You've determined that only animus magic can break the curse, but the scale of the enchantment required would be enormous. You'd need to risk a significant portion of your soul to save hundreds of lives.\",\n      \"As you stand among the affected dragons, some still partially transformed with terror frozen in their stone features, you realize that time is running out. The curse spreads faster each day.\"\n    ]\n  },\n\n  // More MINDREADING Scenarios\n  {\n    id: \"mind_reading_addiction\",\n    type: \"MINDREADING\",\n    title: \"The Addiction\",\n    setting: \"Academy Cafeteria - Crowded Social Space\", \n    emotionalTone: \"corrupt\",\n    requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading'),\n    narrativeText: [\n      \"You've found yourself unable to stop reading other dragons' minds. What started as curiosity has become a compulsion that grows stronger each day.\",\n      \"Every conversation feels hollow because you know exactly what everyone is really thinking. You've learned secrets that no one intended to share, and the constant stream of thoughts is beginning to overwhelm your own identity.\",\n      \"Today you realized that you've been unconsciously influencing others' thoughts, subtly pushing them toward decisions that benefit you. The line between reading minds and controlling them is becoming dangerously blurred.\"\n    ]\n  },\n\n  {\n    id: \"psychic_scream_crisis\",\n    type: \"MINDREADING\",\n    title: \"The Silent Victim\",\n    setting: \"Academy Medical Wing - Emergency Ward\",\n    emotionalTone: \"dramatic\", \n    requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading'),\n    narrativeText: [\n      \"A piercing psychic scream jolts you awake in the middle of the night, so intense it leaves you gasping. Someone nearby is experiencing tremendous mental anguish, but their physical body shows no signs of distress.\",\n      \"Following the psychic signature, you find a fellow student apparently sleeping peacefully. However, their mind is trapped in a nightmare so vivid and terrifying that it's causing real psychological damage.\",\n      \"The nightmare seems to be magical in nature, possibly planted by someone else. If you don't intervene, the victim may never wake up - but entering their mind could trap you in the nightmare as well.\"\n    ]\n  },\n\n  {\n    id: \"mental_link_invitation\",\n    type: \"MINDREADING\",\n    title: \"The Offered Connection\",\n    setting: \"Academy Library - Telepathy Study Section\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading'),\n    narrativeText: [\n      \"While studying telepathy techniques, another mind reader approaches you with an unusual proposal. They offer to establish a permanent mental link between you, allowing instant communication and shared thoughts.\",\n      \"They explain that such links can enhance both dragons' abilities and provide emotional support during difficult times. However, permanent mind links also mean no privacy - you would share not just thoughts, but emotions and memories.\",\n      \"The other dragon seems sincere and their offer is tempting, especially given the isolation that comes with mind reading abilities. But such an intimate connection could also be used to manipulate or control.\"\n    ]\n  },\n\n  // More PROPHECY Scenarios\n  {\n    id: \"prophetic_vision_disaster\",\n    type: \"PROPHECY\",\n    title: \"The Coming Catastrophe\",\n    setting: \"Academy Observatory - Stargazing Platform\",\n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy'),\n    narrativeText: [\n      \"While studying the ancient star charts, a sudden vision overwhelms your senses. You see the academy consumed by an unnatural fire that burns cold instead of hot, turning everything it touches to ice.\",\n      \"In the vision, dragons flee screaming as their wings freeze solid and shatter. You see specific details: the time (tomorrow at sunset), the source (the academy's magical heating system), and the trigger (a seemingly minor maintenance error).\",\n      \"The vision is remarkably clear and detailed, suggesting it's a near-certain future rather than just a possibility. You have less than a day to either prevent this catastrophe or evacuate the academy.\"\n    ]\n  },\n\n  {\n    id: \"prophecy_paradox_trap\",\n    type: \"PROPHECY\",\n    title: \"The Impossible Choice\",\n    setting: \"Sacred Oracle Chamber - Ancient Temple\",\n    emotionalTone: \"mysterious\",\n    requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy'),\n    narrativeText: [\n      \"A vision shows you that your best friend will die tomorrow because of actions you will take to save them. Every path you see where you try to prevent their death actually causes it through increasingly complex chains of causation.\",\n      \"The prophecy is maddeningly specific: if you warn them, they'll panic and make a fatal mistake. If you try to keep them safe, your protection will put them in danger. If you do nothing, they die anyway.\",\n      \"Ancient texts speak of 'paradox prophecies' - visions that trap the seer in a loop where knowledge of the future creates the very future they're trying to prevent. Breaking free requires finding a path the prophecy didn't show you.\"\n    ]\n  },\n\n  {\n    id: \"shared_prophetic_burden\", \n    type: \"PROPHECY\",\n    title: \"The Shared Vision\",\n    setting: \"Academy Meditation Gardens - Circle of Stones\",\n    emotionalTone: \"enlightening\",\n    requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy'),\n    narrativeText: [\n      \"During a group meditation session, you suddenly realize that another dragon is experiencing the exact same prophetic vision as you. This has never happened before - prophecy is typically a solitary burden.\",\n      \"The shared vision shows a great war coming to Pyrrhia, but having two prophetic perspectives reveals details that neither of you could see alone. Together, you might be able to understand how to prevent the conflict.\",\n      \"However, sharing prophetic visions is considered impossible by most scholars. Either you're witnessing something unprecedented, or one of you isn't what they seem to be.\"\n    ]\n  },\n\n  // More WARS Scenarios\n  {\n    id: \"civilian_evacuation_choice\",\n    type: \"WARS\",\n    title: \"The Evacuation Dilemma\",\n    setting: \"Border Town - Emergency Command Center\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"Enemy forces are advancing faster than expected, and you're in charge of evacuating a border town. However, there are too many civilians and not enough transport - you can't save everyone.\",\n      \"Military strategists advise prioritizing essential personnel and young dragons who can help rebuild. However, abandoning the elderly and disabled to enemy forces goes against everything you believe in.\",\n      \"Time is running out. The enemy will arrive within hours, and every minute spent on moral deliberation is a minute lost that could be used for evacuation. The town's survival depends on making hard choices.\"\n    ]\n  },\n\n  {\n    id: \"prisoner_of_war_interrogation\",\n    type: \"WARS\",\n    title: \"Information at Any Cost\",\n    setting: \"Military Detention Facility - Interrogation Room\",\n    emotionalTone: \"corrupt\",\n    narrativeText: [\n      \"You've captured an enemy officer who possesses critical intelligence about a planned attack on civilian targets. Standard interrogation methods have failed, and your commanders are pressuring you to use more... persuasive techniques.\",\n      \"The prisoner is young, frightened, and clearly reluctant to betray their comrades. However, the information they possess could save hundreds of innocent lives if an attack proceeds as planned.\",\n      \"Your commanders have made it clear that 'results matter more than methods' in this case. The tools for enhanced interrogation are readily available, and turning a blind eye to their use would be easy.\"\n    ]\n  },\n\n  {\n    id: \"false_flag_operation\",\n    type: \"WARS\", \n    title: \"The Deceptive Strike\",\n    setting: \"Military Command Tent - Strategy Meeting\",\n    emotionalTone: \"corrupt\",\n    narrativeText: [\n      \"Your military commanders propose a false flag operation: attacking your own allies while disguised as enemy forces, then using the incident to justify a massive retaliation that would end the war quickly.\",\n      \"The plan is militarily sound and would likely succeed in its goals, potentially saving thousands of lives in the long run by shortening the conflict. However, it involves betraying allies and lying to your own people.\",\n      \"You've been selected for this mission because of your proven abilities and discretion. Refusing could be seen as insubordination, but participating means becoming complicit in a conspiracy that violates every principle of honorable warfare.\"\n    ]\n  },\n\n  // More SURVIVAL Scenarios\n  {\n    id: \"poisoned_water_supply\",\n    type: \"SURVIVAL\",\n    title: \"Toxic Waters\",\n    setting: \"Mountain Wilderness - Contaminated Stream\",\n    emotionalTone: \"dangerous\",\n    narrativeText: [\n      \"During a wilderness expedition, your group discovers that the only water source for miles has been contaminated with a magical poison. Several dragons are already showing signs of sickness.\",\n      \"You have enough clean water for maybe one more day, and the nearest alternative source is a three-day journey through hostile territory. Some of the group are too sick to travel far.\",\n      \"However, you've identified a magical plant nearby that could neutralize the poison in the water. The problem is that harvesting it requires someone to expose themselves to concentrated toxins that could prove fatal.\"\n    ]\n  },\n\n  {\n    id: \"avalanche_rescue_dilemma\", \n    type: \"SURVIVAL\",\n    title: \"Buried Alive\",\n    setting: \"Frozen Mountain Pass - Avalanche Site\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"An avalanche has buried a merchant caravan, and you can hear faint calls for help from beneath tons of snow and ice. However, the conditions remain unstable - another avalanche could happen at any moment.\",\n      \"Your party has the strength and tools to attempt a rescue, but it would require everyone to work in the danger zone for hours. The alternative is to wait for professional rescue teams that might not arrive in time.\",\n      \"As you debate, the calls for help grow weaker. Among the buried are several dragonets whose voices you can clearly identify. Time is running out, and every moment of hesitation makes survival less likely.\"\n    ]\n  },\n\n  // More ACADEMY Scenarios\n  {\n    id: \"academic_cheating_scandal\",\n    type: \"ACADEMY\",\n    title: \"The Honor Code Crisis\", \n    setting: \"Academy Testing Hall - Final Examinations\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"During the most important examination of the year, you discover that several students are using sophisticated magical cheating methods. These aren't simple note-hiding tricks, but complex enchantments that give them access to vast amounts of knowledge.\",\n      \"The cheating is so advanced that it's clearly being organized by someone with significant magical skills - possibly even a faculty member. The students involved include some of your closest friends.\",\n      \"Your own academic standing depends partly on class rankings, and these cheaters are artificially inflating their scores at the expense of honest students. Reporting them might save the integrity of the system but could destroy friendships and potentially someone's entire future.\"\n    ]\n  },\n\n  {\n    id: \"dangerous_magical_experiment\",\n    type: \"LEARNING\", \n    title: \"The Forbidden Research\",\n    setting: \"Academy Laboratory - Advanced Magic Wing\",\n    emotionalTone: \"dangerous\",\n    narrativeText: [\n      \"A brilliant but reckless professor offers you the chance to participate in experimental research that could revolutionize magical understanding. The potential discoveries could benefit all of dragonkind.\",\n      \"However, the previous volunteers for similar experiments suffered severe consequences: one lost their ability to breathe fire permanently, another developed uncontrollable magic surges, and a third disappeared entirely during the procedure.\",\n      \"The professor insists they've refined the technique and eliminated the dangers, but their excitement seems to override their caution. They need one more volunteer to complete the research and publish results that could change history.\"\n    ]\n  },\n\n  // ROMANCE Scenarios\n  {\n    id: \"arranged_mating_conflict\",\n    type: \"ROMANCE\",\n    title: \"Duty Versus Heart\", \n    setting: \"Family Estate - Formal Gardens\",\n    emotionalTone: \"romantic\",\n    requirements: (c) => c.age >= 6,\n    narrativeText: [\n      \"Your family has arranged a prestigious mating that would strengthen important political alliances and secure your family's future. Your intended partner is everything anyone could ask for - attractive, intelligent, wealthy, and kind.\",\n      \"The problem is that your heart belongs to someone else entirely: a dragon from a lower social class whom your family would never accept. The love between you is genuine and deep, but pursuing it would mean sacrificing your family's honor and expectations.\",\n      \"The arranged mating ceremony is scheduled for next month, and your intended partner has begun making plans for your shared future together. They seem genuinely happy about the arrangement, which makes the situation even more complicated.\"\n    ]\n  },\n\n  {\n    id: \"secret_cross_tribal_romance\",\n    type: \"ROMANCE\",\n    title: \"Love Across Enemy Lines\",\n    setting: \"Neutral Territory - Hidden Cave\",\n    emotionalTone: \"romantic\",\n    requirements: (c) => c.age >= 5,\n    narrativeText: [\n      \"For months, you've been secretly meeting with a dragon from a tribe currently at war with yours. What began as curiosity about the 'enemy' has evolved into deep, genuine love that transcends tribal boundaries.\",\n      \"Tonight, your beloved reveals critical information about their tribe's military plans - including a surprise attack on your home territory that could result in massive casualties. They're sharing this information because they trust you completely.\",\n      \"However, using this intelligence would certainly expose your relationship and brand both of you as traitors to your respective tribes. The choice is between protecting hundreds of innocent lives and protecting the dragon you love more than life itself.\"\n    ]\n  },\n\n  // SOUL/SANITY RESTORATION Scenarios - Designed to work with regeneration system\n  {\n    id: \"helping_injured_dragonet\",\n    type: \"NORMAL\",\n    title: \"A Cry for Help\",\n    setting: \"Academy Courtyard\",\n    emotionalTone: \"peaceful\",\n    narrativeText: [\n      \"A young dragonet has fallen from the sky during flight practice, landing hard and crying from both pain and embarrassment. Other students walk past, some snickering at the obvious failure.\",\n      \"The dragonet's wing is clearly injured, and they're too proud to ask for help directly. Their instructor is nowhere to be seen, and the medical wing is across the academy.\",\n      \"This small act of kindness could make a real difference in this young dragon's life, and sometimes the smallest gestures restore our faith in ourselves.\"\n    ]\n  },\n\n  {\n    id: \"meditation_and_reflection\",\n    type: \"NORMAL\",\n    title: \"Peaceful Contemplation\",\n    setting: \"Academy Meditation Gardens\",\n    emotionalTone: \"peaceful\",\n    narrativeText: [\n      \"The gardens offer a rare moment of tranquility away from the pressures of academy life. Ancient stone benches sit among flowering vines, and the sound of flowing water creates perfect serenity.\",\n      \"You feel the weight of recent choices and the toll they've taken on your spirit. This sacred space seems to offer the opportunity for true reflection and inner peace.\",\n      \"Sometimes taking time to center yourself and reconnect with your true nature is the most important choice you can make.\"\n    ]\n  },\n\n  {\n    id: \"defending_the_innocent\",\n    type: \"NORMAL\",\n    title: \"Standing for Justice\",\n    setting: \"Village Market - Public Square\",\n    emotionalTone: \"enlightening\",\n    narrativeText: [\n      \"A group of older dragons are bullying a young merchant, threatening to destroy their stall unless they pay 'protection' money. The merchant is clearly terrified and can't afford what they're demanding.\",\n      \"Other bystanders pretend not to notice, unwilling to get involved. The bullies are clearly counting on this cowardice to continue their behavior.\",\n      \"This is a moment where taking a stand could make a real difference, and acting with courage and compassion often strengthens the soul rather than weakening it.\"\n    ]\n  },\n\n  {\n    id: \"sharing_wisdom_teaching\",\n    type: \"LEARNING\", \n    title: \"The Gift of Knowledge\",\n    setting: \"Academy Library - Study Hall\",\n    emotionalTone: \"enlightening\",\n    narrativeText: [\n      \"A younger student approaches you, struggling with concepts you've already mastered. They're clearly frustrated and on the verge of giving up entirely.\",\n      \"Teaching others and sharing knowledge freely is one of the most noble uses of wisdom. This student could truly benefit from your guidance.\",\n      \"Sometimes helping others learn and grow gives us as much as it gives them, restoring our sense of purpose and connection.\"\n    ]\n  },\n\n  {\n    id: \"forgiveness_and_mercy\",\n    type: \"NORMAL\",\n    title: \"The Power of Forgiveness\",\n    setting: \"Academy Dormitories\",\n    emotionalTone: \"enlightening\", \n    narrativeText: [\n      \"A dragon who has wronged you in the past approaches with genuine remorse, seeking forgiveness for their actions. Their apology seems heartfelt and sincere.\",\n      \"Holding onto anger and resentment has been weighing on your spirit. This could be an opportunity to let go of past hurts and find peace.\",\n      \"Forgiveness often heals the one who forgives even more than the one being forgiven, offering a path back to inner harmony.\"\n    ]\n  },\n\n  // FAMILY Scenarios  \n  {\n    id: \"dragonet_magical_awakening\",\n    type: \"FAMILY\",\n    title: \"Inherited Power\",\n    setting: \"Family Dwelling - Private Chambers\",\n    emotionalTone: \"dramatic\",\n    requirements: (c) => c.dragonets.length > 0,\n    narrativeText: [\n      \"Your dragonet has just manifested powerful magical abilities far beyond what's normal for their age. Objects around them float without conscious control, and their emotions seem to affect the weather outside.\",\n      \"This level of magical power in one so young is unprecedented and potentially dangerous. They could hurt themselves or others without proper training, but taking them to magical authorities might result in them being taken away for 'special education.'\",\n      \"The dragonet is frightened by their new abilities and looks to you for guidance and protection. How you handle this awakening will shape not only their relationship with magic, but their trust in you as their parent.\"\n    ],\n    contextualModifiers: (character, gameData) => {\n      const dragonet = character.dragonets[0];\n      if (dragonet) {\n        return [`${dragonet.name} clings to your wing, tears streaming down their small face as another flower pot floats past the window.`];\n      }\n      return [];\n    }\n  },\n\n  {\n    id: \"teaching_dragonet_values\", \n    type: \"FAMILY\",\n    title: \"The Moral Lesson\",\n    setting: \"Academy Grounds - Walking Path\",\n    emotionalTone: \"peaceful\",\n    requirements: (c) => c.dragonets.length > 0,\n    narrativeText: [\n      \"While walking with your dragonet, you witness another young dragon being bullied by a group of older students. Your dragonet looks up at you expectantly, waiting to see how you'll respond to this injustice.\",\n      \"This is clearly a teachable moment about standing up for others, but intervening could put both you and your dragonet in conflict with some powerful families whose children are involved in the bullying.\",\n      \"Your dragonet is at an age where they're forming their core values based on your example. Whatever you do in this moment will likely influence how they approach similar situations throughout their life.\"\n    ],\n    contextualModifiers: (character, gameData) => {\n      const dragonet = character.dragonets[0];\n      if (dragonet) {\n        return [`${dragonet.name} tugs on your wing and whispers, \"Shouldn't we help them, parent?\"`];\n      }\n      return [];\n    }\n  }\n];\n\n// Enhanced choice generation with more variety and depth\nfunction generateEnhancedChoices(scenario: EnhancedScenarioData, character: Character): Choice[] {\n  const choices: Choice[] = [];\n  \n  // Generate scenario-specific choices based on type and context\n  switch (scenario.type) {\n    case 'ANIMUS':\n      choices.push(\n        {\n          id: `${scenario.id}_use_magic_carefully`,\n          text: \"Use your animus powers carefully\",\n          description: \"Channel magic with restraint and precision\",\n          soulCost: 8,\n          sanityCost: 2,\n          consequences: [\"You draw upon your animus magic, feeling your soul dim slightly as power flows through you...\"]\n        },\n        {\n          id: `${scenario.id}_use_magic_recklessly`, \n          text: \"Unleash your full magical power\",\n          description: \"Don't hold back - use whatever force is necessary\",\n          soulCost: 15,\n          sanityCost: 0,\n          consequences: [\"Power surges through you like wildfire, solving the problem instantly but leaving you feeling... different...\"],\n          corruption: true\n        },\n        {\n          id: `${scenario.id}_resist_temptation`,\n          text: \"Resist using magic\",\n          description: \"Find another way without relying on animus power\", \n          soulCost: 0,\n          sanityCost: 8,\n          consequences: [\"You steel yourself against the easy solution, preserving your soul but making things much harder...\"]\n        }\n      );\n      break;\n\n    case 'MINDREADING':\n      choices.push(\n        {\n          id: `${scenario.id}_read_mind_carefully`,\n          text: \"Probe their thoughts carefully\",\n          description: \"Use your abilities with surgical precision\",\n          soulCost: 2,\n          sanityCost: 3,\n          consequences: [\"You delicately touch the surface of their mind, gathering information without causing harm...\"]\n        },\n        {\n          id: `${scenario.id}_mental_invasion`,\n          text: \"Force your way into their mind\", \n          description: \"Break through their mental defenses completely\",\n          soulCost: 6,\n          sanityCost: 1,\n          consequences: [\"You smash through their mental barriers like a battering ram, taking what you need by force...\"],\n          corruption: true\n        },\n        {\n          id: `${scenario.id}_respect_privacy`,\n          text: \"Respect their mental privacy\",\n          description: \"Don't use your powers on them\",\n          soulCost: 0,\n          sanityCost: 5,\n          consequences: [\"You turn away from the easy path of mental intrusion, choosing to respect their privacy...\"]\n        }\n      );\n      break;\n\n    case 'WARS':\n      choices.push(\n        {\n          id: `${scenario.id}_fight_honorably`,\n          text: \"Fight with honor\",\n          description: \"Engage according to warrior's code\",\n          soulCost: 0,\n          sanityCost: 5,\n          consequences: [\"You choose the path of honor, even when it makes victory harder to achieve...\"]\n        },\n        {\n          id: `${scenario.id}_fight_ruthlessly`,\n          text: \"Fight without mercy\",\n          description: \"Victory at any cost\",\n          soulCost: 8,\n          sanityCost: 2,\n          consequences: [\"You push aside concerns about honor and morality, focused only on winning...\"],\n          corruption: true\n        },\n        {\n          id: `${scenario.id}_seek_peace`,\n          text: \"Attempt negotiation\",\n          description: \"Try to find a peaceful solution\",\n          soulCost: 0,\n          sanityCost: 8,\n          consequences: [\"You extend a claw in peace, hoping that reason can prevail over violence...\"]\n        },\n        {\n          id: `${scenario.id}_strategic_retreat`,\n          text: \"Tactical withdrawal\", \n          description: \"Live to fight another day when conditions are better\",\n          soulCost: 0,\n          sanityCost: 10,\n          consequences: [\"Sometimes wisdom means knowing when not to fight...\"]\n        }\n      );\n      break;\n\n    case 'ROMANCE':\n      choices.push(\n        {\n          id: `${scenario.id}_follow_heart`,\n          text: \"Follow your heart\",\n          description: \"Choose love despite the consequences\",\n          soulCost: 0,\n          sanityCost: 12,\n          consequences: [\"You choose the path of true love, accepting whatever challenges come with it...\"]\n        },\n        {\n          id: `${scenario.id}_practical_choice`,\n          text: \"Make the practical choice\",\n          description: \"Choose what makes sense over what feels right\",\n          soulCost: 3,\n          sanityCost: 5,\n          consequences: [\"You set aside your heart's desires for what logic dictates is best...\"]\n        },\n        {\n          id: `${scenario.id}_delay_decision`,\n          text: \"Ask for more time\",\n          description: \"Try to find a way to have both love and duty\",\n          soulCost: 0,\n          sanityCost: 8,\n          consequences: [\"You request time to find a solution that honors both your heart and your obligations...\"]\n        }\n      );\n      break;\n\n    default:\n      // Generate choices based on scenario content and emotional tone\n      if (scenario.emotionalTone === 'peaceful' || scenario.emotionalTone === 'enlightening') {\n        // Scenarios that can restore soul/sanity\n        choices.push(\n          {\n            id: `${scenario.id}_compassionate_action`,\n            text: \"Act with compassion and kindness\",\n            description: \"Choose the path that helps others\",\n            soulCost: 0,\n            sanityCost: -2, // Restores sanity\n            consequences: [\"Your compassionate choice lifts your spirits and restores inner peace...\"]\n          },\n          {\n            id: `${scenario.id}_wise_approach`,\n            text: \"Apply wisdom and patience\",\n            description: \"Take time to make the most thoughtful choice\",\n            soulCost: 0,\n            sanityCost: -1, // Restores sanity slightly\n            consequences: [\"Your thoughtful approach brings clarity and peace of mind...\"]\n          },\n          {\n            id: `${scenario.id}_selfless_help`,\n            text: \"Put others' needs before your own\",\n            description: \"Make a sacrifice to help someone else\",\n            soulCost: 0,\n            sanityCost: 3,\n            consequences: [\"Your selfless action strengthens your soul even as it challenges you...\"]\n          }\n        );\n      } else {\n        // Standard choices for other tones\n        choices.push(\n          {\n            id: `${scenario.id}_bold_action`,\n            text: \"Take bold action\",\n            description: \"Act decisively and confidently\", \n            soulCost: 0,\n            sanityCost: 4,\n            consequences: [\"You act with confidence and determination...\"]\n          },\n          {\n            id: `${scenario.id}_cautious_approach`,\n            text: \"Proceed cautiously\",\n            description: \"Think carefully before acting\",\n            soulCost: 0,\n            sanityCost: 2,\n            consequences: [\"You take time to consider all angles before making your move...\"]\n          },\n          {\n            id: `${scenario.id}_seek_help`,\n            text: \"Seek advice from others\",\n            description: \"Consult with friends or mentors\",\n            soulCost: 0,\n            sanityCost: 6,\n            consequences: [\"You decide this decision is too important to make alone...\"]\n          },\n          {\n            id: `${scenario.id}_avoid_involvement`,\n            text: \"Avoid getting involved\",\n            description: \"Step back and let others handle it\",\n            soulCost: 2,\n            sanityCost: 8,\n            consequences: [\"You choose not to get involved, letting events unfold without your influence...\"]\n          }\n        );\n      }\n      break;\n  }\n\n  // Add contextual choices based on character abilities\n  if (character.isAnimus && scenario.type !== 'ANIMUS') {\n    choices.push({\n      id: `${scenario.id}_animus_solution`,\n      text: \"Use animus magic to solve this\",\n      description: \"Apply magical power to cut through the complications\",\n      soulCost: 12,\n      sanityCost: 0,\n      consequences: [\"Your animus magic provides an elegant solution, though you feel the familiar cost to your soul...\"]\n    });\n  }\n\n  return choices;\n}\n\n// Enhanced scenario generation with better filtering and variety\nexport function generateEnhancedScenario(character: Character, gameData: GameData): Scenario {\n  // Filter scenarios based on character abilities and age\n  const availableScenarios = ENHANCED_SCENARIO_DATABASE.filter(scenario => {\n    // Apply requirements filter\n    if (scenario.requirements && !scenario.requirements(character)) {\n      return false;\n    }\n    \n    // Enhanced filtering for power-specific scenarios  \n    if (scenario.type === 'ANIMUS' && !character.isAnimus) {\n      return false;\n    }\n    if (scenario.type === 'MINDREADING' && \n        !character.tribalPowers.includes('Mind Reading') && \n        !character.specialPowers.includes('Enhanced Mind Reading')) {\n      return false;\n    }\n    if (scenario.type === 'PROPHECY' && \n        !character.tribalPowers.includes('Prophecy (rare)') && \n        !character.specialPowers.includes('Foresight') &&\n        !character.specialPowers.includes('Enhanced Prophecy')) {\n      return false;\n    }\n    if (scenario.type === 'FAMILY' && character.dragonets.length === 0) {\n      return false;\n    }\n    if (scenario.type === 'ROMANCE' && (character.age < 3 || character.soulPercentage < 50 || character.sanityPercentage < 50)) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  if (availableScenarios.length === 0) {\n    // Fallback to basic scenarios if none available\n    const fallbackScenario = ENHANCED_SCENARIO_DATABASE.find(s => s.type === 'NORMAL') || ENHANCED_SCENARIO_DATABASE[0];\n    return convertToScenario(fallbackScenario, character, gameData);\n  }\n\n  // Weight scenarios based on recent history to avoid repetition\n  const weightedScenarios = weightScenariosByHistory(availableScenarios, gameData);\n  const selectedScenario = selectWeightedScenario(weightedScenarios);\n  \n  return convertToScenario(selectedScenario, character, gameData);\n}\n\nfunction weightScenariosByHistory(scenarios: EnhancedScenarioData[], gameData: GameData): { scenario: EnhancedScenarioData; weight: number }[] {\n  const recentScenarioTypes = gameData.history\n    .slice(-5) // Last 5 turns\n    .map(event => event.scenario.split('_')[0]); // Extract scenario type\n  \n  return scenarios.map(scenario => {\n    let weight = 1.0;\n    \n    // Reduce weight for recently used scenario types\n    const typeUsageCount = recentScenarioTypes.filter(type => \n      scenario.id.startsWith(type)\n    ).length;\n    weight -= (typeUsageCount * 0.3);\n    \n    // Increase weight for scenarios that haven't been used recently\n    if (!recentScenarioTypes.some(type => scenario.id.startsWith(type))) {\n      weight += 0.5;\n    }\n    \n    return { scenario, weight: Math.max(0.1, weight) };\n  });\n}\n\nfunction selectWeightedScenario(weightedScenarios: { scenario: EnhancedScenarioData; weight: number }[]): EnhancedScenarioData {\n  const totalWeight = weightedScenarios.reduce((sum, item) => sum + item.weight, 0);\n  let randomValue = Math.random() * totalWeight;\n  \n  for (const item of weightedScenarios) {\n    randomValue -= item.weight;\n    if (randomValue <= 0) {\n      return item.scenario;\n    }\n  }\n  \n  return weightedScenarios[0].scenario; // Fallback\n}\n\nfunction convertToScenario(scenarioData: EnhancedScenarioData, character: Character, gameData: GameData): Scenario {\n  const contextualText = scenarioData.contextualModifiers \n    ? scenarioData.contextualModifiers(character, gameData)\n    : [];\n  \n  const fullNarrativeText = [\n    ...scenarioData.narrativeText,\n    ...contextualText,\n    generateAtmosphericText(scenarioData.setting, scenarioData.emotionalTone)\n  ];\n\n  // Determine game type for engine\n  let gameType: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic' = 'mundane';\n  switch (scenarioData.type) {\n    case 'ANIMUS':\n      gameType = 'magical';\n      break;\n    case 'WARS':\n    case 'SURVIVAL':\n    case 'POLITICAL':\n      gameType = 'extraordinary';\n      break;\n    case 'PROPHECY':\n      gameType = 'prophetic';\n      break;\n    case 'MINDREADING':\n      gameType = 'tribal';\n      break;\n    case 'LEARNING':\n    case 'ACADEMY':\n      gameType = 'extraordinary';\n      break;\n    default:\n      gameType = 'mundane';\n  }\n\n  return {\n    id: scenarioData.id,\n    title: scenarioData.title,\n    description: generateScenarioDescription(scenarioData),\n    narrativeText: fullNarrativeText,\n    choices: generateEnhancedChoices(scenarioData, character),\n    type: gameType,\n    location: scenarioData.setting,\n    timeOfDay: generateTimeOfDay(),\n    weather: generateWeatherBasedOnTone(scenarioData.emotionalTone)\n  };\n}\n\nfunction generateScenarioDescription(scenarioData: EnhancedScenarioData): string {\n  const descriptions = {\n    'NORMAL': 'A situation in your daily life requires careful consideration',\n    'ANIMUS': 'Your magical powers present both opportunity and terrible temptation',\n    'MINDREADING': 'Your telepathic abilities reveal information that changes everything',\n    'PROPHECY': 'Visions of possible futures guide your path forward',\n    'WARS': 'The brutal realities of conflict demand a difficult choice',\n    'LEARNING': 'An opportunity for knowledge comes with unexpected risks',\n    'ROMANCE': 'Matters of the heart complicate your path forward', \n    'FAMILY': 'Your role as a parent or child shapes this moment',\n    'ACADEMY': 'Academy life presents challenges that will define your character',\n    'SURVIVAL': 'Life and death hang in the balance of your next decision',\n    'POLITICAL': 'The games of power and influence require careful navigation'\n  };\n  \n  return descriptions[scenarioData.type] || descriptions['NORMAL'];\n}\n\nfunction generateAtmosphericText(setting: string, tone: 'tense' | 'peaceful' | 'dramatic' | 'mysterious' | 'romantic' | 'dangerous' | 'enlightening' | 'corrupt'): string {\n  const atmosphericTexts = {\n    'tense': [\n      \"The air itself seems to vibrate with tension.\",\n      \"Every sound feels unnaturally loud in the charged atmosphere.\",\n      \"Your heart pounds as the weight of the moment settles upon you.\"\n    ],\n    'peaceful': [\n      \"A sense of calm pervades this place, offering clarity for difficult decisions.\", \n      \"The peaceful surroundings provide a moment of tranquil reflection.\",\n      \"Even the light here seems softer, more contemplative.\"\n    ],\n    'dramatic': [\n      \"The very air crackles with the importance of this moment.\",\n      \"History pivots on choices like this one.\",\n      \"The weight of destiny presses down upon your shoulders.\"\n    ],\n    'mysterious': [\n      \"Something about this situation feels significant in ways you cannot yet understand.\",\n      \"Hidden currents of meaning flow beneath the surface of events.\",\n      \"You sense there are layers to this situation that haven't been revealed.\"\n    ],\n    'romantic': [\n      \"The setting seems touched by magic, perfect for matters of the heart.\",\n      \"Something in the air makes emotions feel more intense, more real.\",\n      \"This moment feels like it belongs in the great love stories of dragon legend.\"\n    ],\n    'dangerous': [\n      \"Every instinct you possess screams that this situation could turn deadly in an instant.\",\n      \"The scent of danger hangs heavy in the air around you.\",\n      \"One wrong move could prove catastrophic.\"\n    ],\n    'enlightening': [\n      \"Understanding dawns as new perspectives reveal themselves.\",\n      \"Knowledge flows through you like sunlight breaking through clouds.\",\n      \"This moment offers the chance for true wisdom.\"\n    ],\n    'corrupt': [\n      \"Something feels fundamentally wrong about this place, this situation.\",\n      \"The very air seems tainted with an influence that makes your scales crawl.\",\n      \"Power whispers seductively, promising easy solutions to hard problems.\"\n    ]\n  };\n  \n  const options = atmosphericTexts[tone];\n  return options[Math.floor(Math.random() * options.length)];\n}\n\nfunction generateTimeOfDay(): string {\n  const times = ['pre-dawn darkness', 'early morning light', 'bright afternoon', 'golden sunset', 'deep night', 'moonlit evening'];\n  return times[Math.floor(Math.random() * times.length)];\n}\n\nfunction generateWeatherBasedOnTone(tone: 'tense' | 'peaceful' | 'dramatic' | 'mysterious' | 'romantic' | 'dangerous' | 'enlightening' | 'corrupt'): string {\n  const weatherByTone = {\n    'tense': ['gathering storm clouds', 'oppressive humidity', 'unnaturally still air'],\n    'peaceful': ['gentle breeze', 'warm sunlight', 'clear skies'],\n    'dramatic': ['lightning in the distance', 'swirling winds', 'dramatic cloud formations'],\n    'mysterious': ['shifting mists', 'strange atmospheric phenomena', 'ethereal lighting'],\n    'romantic': ['soft starlight', 'gentle evening breeze', 'perfect temperature'],\n    'dangerous': ['violent storm', 'treacherous conditions', 'ominous weather patterns'],\n    'enlightening': ['brilliant clarity', 'perfect visibility', 'inspiring natural beauty'],\n    'corrupt': ['unnatural darkness', 'sickly colored sky', 'oppressive atmospheric conditions']\n  };\n  \n  const options = weatherByTone[tone];\n  return options[Math.floor(Math.random() * options.length)];\n}\n\n// Export additional utility functions\nexport { EnhancedScenarioData, generateEnhancedChoices };","size_bytes":58780},"client/src/lib/inventory-system.ts":{"content":"import { InventoryItem, Character, GameData, Choice } from \"@shared/schema\";\n\nexport class InventorySystem {\n  /**\n   * Adds an item to the player's inventory\n   */\n  static addItem(gameData: GameData, item: InventoryItem): GameData {\n    // Initialize inventory if it doesn't exist\n    if (!gameData.inventory) {\n      gameData.inventory = [];\n    }\n    \n    // Check if item already exists and is stackable\n    const existingItemIndex = gameData.inventory.findIndex(\n      (invItem) => invItem.name === item.name && invItem.type === item.type\n    );\n\n    if (existingItemIndex >= 0 && item.type !== \"enchanted_object\") {\n      // For non-enchanted items, just update the existing one\n      return gameData;\n    } else {\n      // Add new item to inventory\n      return {\n        ...gameData,\n        inventory: [...(gameData.inventory || []), { ...item, id: `${item.name}_${Date.now()}` }]\n      };\n    }\n  }\n\n  /**\n   * Removes an item from the player's inventory\n   */\n  static removeItem(gameData: GameData, itemId: string): GameData {\n    return {\n      ...gameData,\n      inventory: (gameData.inventory || []).filter(item => item.id !== itemId)\n    };\n  }\n\n  /**\n   * Gives an item to an NPC and advances story if applicable\n   */\n  static giveItemToNPC(\n    character: Character, \n    gameData: GameData, \n    itemId: string, \n    npcName: string\n  ): { character: Character; gameData: GameData; storyAdvanced: boolean; result: string } {\n    const item = (gameData.inventory || []).find(inv => inv.id === itemId);\n    \n    if (!item) {\n      return {\n        character,\n        gameData,\n        storyAdvanced: false,\n        result: \"Item not found in inventory.\"\n      };\n    }\n\n    if (item.canGiveAway === false) {\n      return {\n        character,\n        gameData,\n        storyAdvanced: false,\n        result: \"This item cannot be given away.\"\n      };\n    }\n\n    // Remove item from inventory\n    const newGameData = this.removeItem(gameData, itemId);\n    let newCharacter = { ...character };\n    let storyAdvanced = false;\n    let result = `You gave ${item.name} to ${npcName}.`;\n\n    // Check if this was a quest item\n    if (item.questItem && item.questItem.toLowerCase().includes(npcName.toLowerCase())) {\n      storyAdvanced = true;\n      \n      // Special rewards for completing quests\n      if (item.enchantments && item.enchantments.some(e => e.toLowerCase().includes(\"immortal\"))) {\n        newCharacter.soulPercentage = Math.min(100, newCharacter.soulPercentage + 10);\n        result += ` ${npcName} is overjoyed and grants you a powerful blessing that restores your soul!`;\n      } else if (item.enchantments && item.enchantments.some(e => e.toLowerCase().includes(\"heal\"))) {\n        newCharacter.sanityPercentage = Math.min(100, newCharacter.sanityPercentage + 15);\n        result += ` ${npcName} feels much better and shares ancient wisdom that clears your mind!`;\n      } else if (item.enchantments && item.enchantments.some(e => e.toLowerCase().includes(\"power\"))) {\n        result += ` ${npcName} becomes incredibly powerful and swears a life debt to you!`;\n      } else {\n        result += ` ${npcName} is extremely grateful and your reputation grows!`;\n        // Note: reputation will be handled by game data in future updates\n      }\n\n      // Add relationship improvement\n      if (!newCharacter.relationships) {\n        newCharacter.relationships = {};\n      }\n      if (newCharacter.relationships[npcName]) {\n        newCharacter.relationships[npcName].strength = Math.min(100, \n          newCharacter.relationships[npcName].strength + 30\n        );\n      } else {\n        newCharacter.relationships[npcName] = {\n          name: npcName,\n          type: \"friend\",\n          strength: 60,\n          history: [`Received ${item.name} as a gift`],\n          isAlive: true\n        };\n      }\n    }\n\n    return {\n      character: newCharacter,\n      gameData: newGameData,\n      storyAdvanced,\n      result\n    };\n  }\n\n  /**\n   * Generates common collectible items for scenarios\n   */\n  static generateCollectibleItem(location: string, scenario: string): InventoryItem {\n    const items: InventoryItem[] = [\n      {\n        id: `scroll_${Date.now()}`,\n        name: \"Blank Scroll\",\n        description: \"A pristine scroll perfect for enchanting with animus magic.\",\n        type: \"scroll\",\n        enchantments: [],\n        isActive: false,\n        canGiveAway: true,\n        rarity: \"common\"\n      },\n      {\n        id: `gem_${Date.now()}`,\n        name: \"Dragon Gem\",\n        description: \"A valuable gemstone that could be enchanted or traded.\",\n        type: \"treasure\",\n        enchantments: [],\n        isActive: false,\n        canGiveAway: true,\n        rarity: \"uncommon\"\n      },\n      {\n        id: `crystal_${Date.now()}`,\n        name: \"Memory Crystal\",\n        description: \"A crystal that can store memories and experiences.\",\n        type: \"magical_artifact\",\n        enchantments: [],\n        isActive: false,\n        canGiveAway: true,\n        rarity: \"rare\"\n      },\n      {\n        id: `feather_${Date.now()}`,\n        name: \"Phoenix Feather\",\n        description: \"A rare feather with healing properties.\",\n        type: \"magical_artifact\",\n        enchantments: [\"healing_aura\"],\n        isActive: true,\n        canGiveAway: true,\n        rarity: \"legendary\"\n      }\n    ];\n\n    // Return a random item based on rarity\n    const rand = Math.random();\n    if (rand < 0.5) return items[0]; // Common\n    if (rand < 0.8) return items[1]; // Uncommon  \n    if (rand < 0.95) return items[2]; // Rare\n    return items[3]; // Legendary\n  }\n\n  /**\n   * Checks if player has required item for a choice\n   */\n  static hasRequiredItem(gameData: GameData, requiredItemId: string): boolean {\n    if (!gameData.inventory) return false;\n    return gameData.inventory.some(item => \n      item.id === requiredItemId || \n      item.name.toLowerCase().includes(requiredItemId.toLowerCase()) ||\n      item.type === requiredItemId\n    );\n  }\n\n  /**\n   * Gets items that can be given to NPCs\n   */\n  static getGiveableItems(gameData: GameData): InventoryItem[] {\n    // Default to true if canGiveAway is undefined (most items can be given)\n    if (!gameData.inventory) return [];\n    return gameData.inventory.filter(item => item.canGiveAway !== false);\n  }\n\n  /**\n   * Gets inventory-specific choices for scenarios\n   */\n  static getInventoryChoices(gameData: GameData, character: Character, scenarioType: string): Choice[] {\n    const choices: Choice[] = [];\n    const inventory = gameData.inventory || [];\n\n    // Scroll-related choices\n    const scrolls = inventory.filter(item => item.type === \"scroll\" || item.name.toLowerCase().includes(\"scroll\"));\n    if (scrolls.length > 0) {\n      choices.push({\n        id: \"hide_scroll_mundane\",\n        text: \"Hide your scroll carefully\",\n        description: \"Use stealth and cunning to conceal the scroll\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"You carefully conceal the scroll using your natural stealth...\"],\n        requiresItem: \"scroll\"\n      });\n\n      if (character.isAnimus) {\n        choices.push({\n          id: \"hide_scroll_animus\",\n          text: \"Use animus magic to hide your scroll\",\n          description: \"Make the scroll invisible with magical power\",\n          soulCost: 5,\n          sanityCost: 0,\n          consequences: [\"Your animus magic wraps around the scroll, rendering it completely invisible...\"],\n          corruption: true,\n          requiresModal: \"animus\",\n          requiresItem: \"scroll\"\n        });\n      }\n    }\n\n    // Gem/treasure-related choices\n    const treasures = inventory.filter(item => item.type === \"treasure\" || item.type === \"magical_artifact\");\n    if (treasures.length > 0) {\n      choices.push({\n        id: \"offer_treasure\",\n        text: \"Offer valuable treasure\",\n        description: \"Use your wealth to solve the problem\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"You present your valuable treasure as an offering...\"],\n        requiresItem: \"treasure\"\n      });\n\n      if (character.isAnimus) {\n        choices.push({\n          id: \"enhance_treasure_animus\",\n          text: \"Enhance treasure with magic\",\n          description: \"Make your treasure more valuable with animus power\",\n          soulCost: 8,\n          sanityCost: 0,\n          consequences: [\"You channel animus magic into your treasure, making it far more powerful...\"],\n          corruption: true,\n          requiresModal: \"animus\",\n          requiresItem: \"treasure\"\n        });\n      }\n    }\n\n    // Weapon-related choices\n    const weapons = inventory.filter(item => item.type === \"weapon\");\n    if (weapons.length > 0) {\n      choices.push({\n        id: \"brandish_weapon\",\n        text: \"Brandish your weapon threateningly\",\n        description: \"Use intimidation to resolve the situation\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"You draw your weapon, its presence changing the dynamic immediately...\"],\n        requiresItem: \"weapon\"\n      });\n\n      if (character.isAnimus) {\n        choices.push({\n          id: \"empower_weapon_animus\",\n          text: \"Empower weapon with animus magic\",\n          description: \"Make your weapon supernaturally deadly\",\n          soulCost: 12,\n          sanityCost: 0,\n          consequences: [\"Dark power flows into your weapon, making it crackle with deadly energy...\"],\n          corruption: true,\n          requiresModal: \"animus\",\n          requiresItem: \"weapon\"\n        });\n      }\n    }\n\n    // Tool-related choices\n    const tools = inventory.filter(item => item.type === \"tool\");\n    if (tools.length > 0) {\n      choices.push({\n        id: \"use_tool_creative\",\n        text: \"Use your tools creatively\",\n        description: \"Apply your equipment in an unexpected way\",\n        soulCost: 0,\n        sanityCost: 1,\n        consequences: [\"You apply your tools in a clever and unexpected manner...\"],\n        requiresItem: \"tool\"\n      });\n    }\n\n    // Enchanted object choices\n    const enchantedObjects = inventory.filter(item => item.type === \"enchanted_object\" && item.isActive);\n    if (enchantedObjects.length > 0) {\n      choices.push({\n        id: \"activate_enchanted_object\",\n        text: \"Activate your enchanted object\",\n        description: \"Draw upon the power of your magical item\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"You activate your enchanted object, feeling its power surge through you...\"],\n        requiresItem: \"enchanted_object\"\n      });\n    }\n\n    return choices;\n  }\n\n  /**\n   * Uses an item in a scenario choice and removes it if consumed\n   */\n  static useItemInChoice(gameData: GameData, choice: Choice): { gameData: GameData; itemUsed?: InventoryItem } {\n    if (!choice.requiresItem) {\n      return { gameData };\n    }\n\n    // Find the first item that matches the required type\n    const itemIndex = gameData.inventory.findIndex(item => \n      item.type === choice.requiresItem || \n      item.name.toLowerCase().includes(choice.requiresItem?.toLowerCase() || \"\")\n    );\n\n    if (itemIndex === -1) {\n      return { gameData };\n    }\n\n    const itemUsed = gameData.inventory[itemIndex];\n\n    // Some choices consume the item, others don't\n    const consumesItem = choice.id.includes(\"offer\") || choice.id.includes(\"sacrifice\") || choice.id.includes(\"give\");\n    \n    if (consumesItem) {\n      const newInventory = [...gameData.inventory];\n      newInventory.splice(itemIndex, 1);\n      return {\n        gameData: {\n          ...gameData,\n          inventory: newInventory\n        },\n        itemUsed\n      };\n    }\n\n    return { gameData, itemUsed };\n  }\n}","size_bytes":11664},"client/src/lib/location-based-scenarios.ts":{"content":"import { Character } from \"@shared/schema\";\nimport { Location } from \"./location-system\";\n\n// Location-specific scenarios based on Wings of Fire lore\nexport interface LocationScenario {\n  id: string;\n  locationId: string;\n  title: string;\n  setting: string;\n  emotionalTone: \"peaceful\" | \"tense\" | \"dramatic\" | \"enlightening\" | \"ominous\";\n  narrativeText: string[];\n  requirements?: (character: Character) => boolean;\n  contextualModifiers?: (character: Character, gameData: any) => string[];\n}\n\nexport const LOCATION_BASED_SCENARIOS: LocationScenario[] = [\n  // JADE MOUNTAIN ACADEMY SCENARIOS\n  {\n    id: \"academy_new_student_orientation\",\n    locationId: \"jade_mountain_academy\",\n    title: \"New Student Integration\",\n    setting: \"Academy Main Hall\",\n    emotionalTone: \"peaceful\",\n    narrativeText: [\n      \"A nervous young dragon from a tribe you've never seen before approaches during orientation. They're clearly overwhelmed by the mix of different tribes and the academy's size.\",\n      \"Other students are already forming cliques based on their tribes, leaving this newcomer isolated. You notice they haven't eaten anything at the welcome feast.\",\n      \"This could be an opportunity to make a friend from a different background, or you could stick with your own kind for safety.\"\n    ]\n  },\n  {\n    id: \"academy_library_discovery\",\n    locationId: \"jade_mountain_academy\",\n    title: \"Forbidden Knowledge\",\n    setting: \"Academy Library - Restricted Section\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"While researching for class, you discover a hidden section of the library containing scrolls about animus magic that predates the academy. The texts describe techniques that even modern animus dragons consider dangerous.\",\n      \"The knowledge here could greatly enhance your understanding of magic, but these scrolls are clearly restricted for good reason. Some of the techniques described have warnings written in multiple languages.\",\n      \"A librarian is approaching, and you need to decide quickly whether to hide the scroll, confront them about the restriction, or put it back and pretend you never saw it.\"\n    ]\n  },\n\n  // MUD KINGDOM SCENARIOS\n  {\n    id: \"mud_kingdom_healing_ceremony\",\n    locationId: \"mud_kingdom\",\n    title: \"Ancient Healing Ritual\",\n    setting: \"Sacred Mud Springs\",\n    emotionalTone: \"enlightening\",\n    narrativeText: [\n      \"The MudWing elders have invited you to participate in an ancient healing ceremony at the sacred mud springs. Dragons with various ailments have gathered, seeking the legendary restorative powers of the mineral-rich mud.\",\n      \"The ritual involves not just physical healing, but spiritual cleansing. You're told that those who undergo the ceremony with pure intentions will find their inner wounds healed as well as their physical ones.\",\n      \"However, the elders warn that the springs reject those with corruption in their hearts, potentially making such dragons even sicker. Your soul's current state may determine whether this healing helps or harms you.\"\n    ]\n  },\n  {\n    id: \"mud_kingdom_sibling_bonds\", \n    locationId: \"mud_kingdom\",\n    title: \"The Sibling Test\",\n    setting: \"MudWing Military Training Grounds\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"MudWing culture revolves around sibling bonds and family loyalty. A group of MudWing siblings challenge you to prove your understanding of family by participating in their traditional bonding exercises.\",\n      \"The challenge involves protecting artificial 'siblings' (wooden training dummies) while navigating a dangerous obstacle course. Failure means you don't understand the sacred bond of family protection.\",\n      \"Your performance will determine how MudWings view you throughout the kingdom. Success could earn you honorary sibling status, while failure might mark you as someone who doesn't value family bonds.\"\n    ]\n  },\n\n  // SAND KINGDOM SCENARIOS\n  {\n    id: \"sand_kingdom_treasure_hunt\",\n    locationId: \"sand_kingdom\",\n    title: \"The Great Treasure Hunt\",\n    setting: \"Ancient Desert Ruins\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"Deep in the Sand Kingdom's vast dunes, you've discovered ruins from before the Scorching. Local SandWings speak of a legendary treasure hidden within, but also of the curse that protects it.\",\n      \"The ruins are filled with traps designed by ancient dragons, and previous treasure hunters have left warnings carved into the walls. Some warn of magical guardians, others of psychological torments that drive dragons mad.\",\n      \"You must decide whether to brave the ruins alone, seek SandWing allies who know the desert's secrets, or report the discovery to authorities and potentially lose your chance at the treasure.\"\n    ]\n  },\n  {\n    id: \"sand_kingdom_succession_politics\",\n    locationId: \"sand_kingdom\",\n    title: \"Political Intrigue\",\n    setting: \"Scorpion Den - Political Quarter\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"You've inadvertently become involved in SandWing succession politics when a minor royal asks you to deliver a message to a rival faction. The contents of the message are sealed, but you suspect it concerns the ongoing power struggles within the tribe.\",\n      \"Both factions have offered you rewards for your cooperation, but choosing sides in SandWing politics is incredibly dangerous. The faction you don't help could consider you an enemy for life.\",\n      \"To complicate matters, you've overheard hints that the message might contain information about planned violence. Delivering it could make you complicit in political assassination.\"\n    ]\n  },\n\n  // SKY KINGDOM SCENARIOS\n  {\n    id: \"sky_kingdom_aerial_challenge\",\n    locationId: \"sky_kingdom\",\n    title: \"The Sky Trials\",\n    setting: \"High Mountain Peaks\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"The SkyWings have challenged you to prove your worth through their traditional aerial trials. The tests involve flying through treacherous mountain passes, dodging falling rocks, and demonstrating precision flying in thin air.\",\n      \"Your performance in these trials will determine your standing among SkyWings throughout the kingdom. Exceptional performance might even earn you recognition from the SkyWing royalty.\",\n      \"However, the trials are genuinely dangerous - several dragons have died attempting them. You must balance the desire for honor with the very real risk to your life.\"\n    ]\n  },\n  {\n    id: \"sky_kingdom_mountain_rescue\",\n    locationId: \"sky_kingdom\",\n    title: \"Storm Rescue Mission\",\n    setting: \"Storm-Lashed Peaks\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"A fierce mountain storm has trapped a group of young dragons on a high peak with no shelter. The SkyWing rescue services are overwhelmed with other emergencies, and time is running out before the dragons freeze or are blown off the mountain.\",\n      \"The storm is too dangerous for most rescue attempts, with winds strong enough to slam even experienced fliers into the mountainside. However, you might have abilities or knowledge that could make the difference.\",\n      \"Each moment you deliberate, the trapped dragons are in greater danger. But rushing into the storm without a solid plan could result in more casualties, including yourself.\"\n    ]\n  },\n\n  // Additional JADE MOUNTAIN ACADEMY SCENARIOS\n  {\n    id: \"academy_winglet_rivalry\",\n    locationId: \"jade_mountain_academy\",\n    title: \"Winglet Competition\",\n    setting: \"Academy Training Grounds\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"The annual inter-winglet competition has begun, and tensions run high between the different student groups. Your winglet has been challenged to a series of contests by the reigning champions.\",\n      \"The competition covers flight maneuvers, combat training, and academic challenges. Winning would bring honor to your winglet but also create enemies among the losing groups.\",\n      \"Some students are suggesting underhanded tactics to ensure victory, while others insist on fair play. Your choice could define your winglet's reputation for years to come.\"\n    ]\n  },\n  {\n    id: \"academy_professor_mystery\",\n    locationId: \"jade_mountain_academy\",\n    title: \"The Missing Professor\",\n    setting: \"Academy Underground Tunnels\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"Professor Webs has been missing for three days, and strange sounds echo from the academy's underground tunnel system. The administration claims he's simply ill, but you know better.\",\n      \"You've discovered claw marks on the tunnel walls and what appears to be signs of a struggle. Other students are too frightened to investigate, leaving the mystery unsolved.\",\n      \"The tunnels are supposedly dangerous and off-limits, but they might hold the key to finding the missing professor before it's too late.\"\n    ]\n  },\n\n  // Additional MUD KINGDOM SCENARIOS  \n  {\n    id: \"mud_kingdom_family_honor\",\n    locationId: \"mud_kingdom\", \n    title: \"A Family's Honor\",\n    setting: \"MudWing Village Square\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"A MudWing family has been accused of cowardice after their eldest son fled from a battle. The shame threatens to destroy their standing in the community and affect their younger dragonets.\",\n      \"The family patriarch begs you to help restore their honor, offering a family heirloom as payment. However, doing so would require you to publicly vouch for dragons you don't really know.\",\n      \"The alternative is to remain neutral, but the family's desperation suggests that without help, they may be forced to leave their ancestral home forever.\"\n    ]\n  },\n  {\n    id: \"mud_kingdom_drought_crisis\",\n    locationId: \"mud_kingdom\",\n    title: \"The Great Drought\", \n    setting: \"Dried Riverbed\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"A severe drought has dried up the sacred mud springs that give MudWings their strength. The tribal elders are desperate for a solution as their dragons grow weak without the mineral-rich mud.\",\n      \"Ancient texts speak of a hidden spring deep in dangerous territory, but the journey would be perilous and might claim lives. Some suggest asking other tribes for help, risking pride for survival.\",\n      \"Time is running out as younger dragonets begin showing signs of serious weakness. Your advice could determine whether the MudWings maintain their independence or humble themselves before other tribes.\"\n    ]\n  },\n\n  // Additional SAND KINGDOM SCENARIOS\n  {\n    id: \"sand_kingdom_oasis_conflict\", \n    locationId: \"sand_kingdom\",\n    title: \"The Disputed Oasis\",\n    setting: \"Remote Desert Oasis\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"Two SandWing clans claim ownership of the same vital oasis, and their dispute has escalated to the brink of violence. Both have legitimate historical claims to the water source.\",\n      \"The oasis is large enough to support both clans, but pride and old grudges prevent them from sharing. A neutral mediator could resolve this peacefully, or it could explode into tribal warfare.\",\n      \"Travelers need the oasis for survival, but taking sides could make you enemies for life. Meanwhile, the longer this drags on, the more likely it is that dragons will die fighting over water.\"\n    ]\n  },\n  {\n    id: \"sand_kingdom_ancient_curse\",\n    locationId: \"sand_kingdom\", \n    title: \"The Cursed Pyramid\",\n    setting: \"Ancient Pyramid Ruins\",\n    emotionalTone: \"ominous\", \n    narrativeText: [\n      \"Local SandWings warn you away from an ancient pyramid, claiming it's cursed by the spirits of long-dead animus dragons. Strange lights flicker inside at night, and those who enter often emerge... changed.\",\n      \"A scholar offers to pay handsomely for artifacts from within, insisting the 'curse' is merely superstition. However, you've noticed that several recent visitors to the pyramid now speak in whispers and avoid sunlight.\",\n      \"The pyramid clearly contains something valuable, but whether it's treasure, knowledge, or something far more dangerous remains unknown. The locals' fear seems genuine, but so does the scholar's desperation.\"\n    ]\n  },\n\n  // Additional SKY KINGDOM SCENARIOS\n  {\n    id: \"sky_kingdom_territorial_dispute\",\n    locationId: \"sky_kingdom\",\n    title: \"Border Skirmish\",\n    setting: \"Sky Kingdom Border Mountains\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"SkyWing border guards have intercepted you near a disputed mountain pass. They claim you've entered restricted airspace, though the borders seem arbitrarily drawn and change frequently.\",\n      \"The guards are young and nervous, clearly eager to prove themselves by making an arrest. However, their commander seems more interested in gathering information about travelers than enforcing arbitrary rules.\",\n      \"This could be a simple misunderstanding, a test of your intentions, or something more serious. Your response will determine whether you continue your journey peacefully or end up in a SkyWing prison.\"\n    ]\n  },\n  {\n    id: \"sky_kingdom_storm_prophecy\",\n    locationId: \"sky_kingdom\",\n    title: \"The Storm Prophet\", \n    setting: \"Windswept Mountain Peak\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"An elderly SkyWing prophet claims to read the future in storm patterns, and her recent visions have the local population terrified. She speaks of a great catastrophe coming to those who fly too high.\",\n      \"Some dragons dismiss her as mad, but her previous prophecies have proven disturbingly accurate. She singles you out from the crowd, claiming your arrival was foretold in the lightning patterns.\",\n      \"The prophet offers to share her vision with you, but warns that knowledge of the future comes with a price. The growing storm above seems to respond to her words, lightning striking closer with each prophecy.\"\n    ]\n  },\n\n  // SEA KINGDOM SCENARIOS  \n  {\n    id: \"sea_kingdom_deep_court\",\n    locationId: \"sea_kingdom\",\n    title: \"The Deep Court's Judgment\",\n    setting: \"Abyssal Palace Depths\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"You've been summoned before the SeaWing Deep Court, an ancient council that meets in the deepest parts of the ocean where sunlight never reaches. They're said to judge matters too important or dangerous for the surface royalty.\",\n      \"The Deep Court's chambers are illuminated only by bioluminescent sea creatures and the council members' own glowing patterns. The pressure here is crushing, and the darkness seems to whisper of ancient secrets.\",\n      \"They're investigating reports of a surface dweller meddling in sea affairs. Depending on how you present yourself, you could be welcomed as an ally or condemned as a threat to SeaWing security.\"\n    ],\n    requirements: (character) => character.tribalPowers.includes(\"Underwater Breathing\") || character.isAnimus\n  },\n  {\n    id: \"sea_kingdom_coral_gardens\",\n    locationId: \"sea_kingdom\", \n    title: \"The Dying Gardens\",\n    setting: \"Royal Coral Gardens\",\n    emotionalTone: \"dramatic\",\n    narrativeText: [\n      \"The SeaWing royal coral gardens, once vibrant and teeming with life, are dying from an unknown cause. The royal gardeners are desperate to find a solution before the ecological disaster spreads to the wider ocean.\",\n      \"You notice patterns in the coral death that others have missed - it seems to be following magical currents rather than natural ones. This could be the result of animus magic, environmental damage, or something far more sinister.\",\n      \"The SeaWing royalty will richly reward whoever can save their gardens, but investigating the cause might expose you to whatever force is killing the coral in the first place.\"\n    ],\n    requirements: (character) => character.tribalPowers.includes(\"Underwater Breathing\") || character.isAnimus\n  },\n\n  // ICE KINGDOM SCENARIOS\n  {\n    id: \"ice_kingdom_ranking_challenge\",\n    locationId: \"ice_kingdom\",\n    title: \"The Circle Challenge\",\n    setting: \"IceWing Ranking Circles\",\n    emotionalTone: \"tense\",\n    narrativeText: [\n      \"You've been challenged to prove your worth within the IceWing ranking system. As an outsider, you start at the bottom of the Seventh Circle, but exceptional performance in challenges can rapidly advance your status.\",\n      \"The ranking challenge involves tests of intelligence, combat skill, and adherence to IceWing traditions. Your current circle determines everything from where you can live to whom you can speak to.\",\n      \"However, IceWing politics are treacherous. Some dragons may try to sabotage your performance to maintain their own positions, while others might see you as a useful ally to advance their own standing.\"\n    ]\n  },\n  {\n    id: \"ice_kingdom_ancient_ice\",\n    locationId: \"ice_kingdom\",\n    title: \"The Ancient Ice Prison\",\n    setting: \"Frozen Wastelands - Ancient Ruins\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"Deep in the Ice Kingdom's frozen wastes, you've discovered structures made of ice that never melts. Local IceWings whisper that these are prisons from the age of legends, built to contain dragons too dangerous to kill.\",\n      \"The ice seems to pulse with its own cold light, and you can hear faint sounds from within - voices that might be cries for help or warnings to stay away. The magical emanations are unlike anything you've encountered.\",\n      \"An ancient IceWing appears and warns you that some prisons were built not to keep prisoners in, but to keep something else out. Opening the wrong chamber could release threats that predate the modern tribes.\"\n    ]\n  },\n\n  // RAINFOREST KINGDOM SCENARIOS\n  {\n    id: \"rainforest_peace_meditation\",\n    locationId: \"rainforest_kingdom\",\n    title: \"The Great Peace\",\n    setting: \"Canopy Temple - Sacred Grove\",\n    emotionalTone: \"peaceful\",\n    narrativeText: [\n      \"The RainWings have invited you to participate in their most sacred ritual - the Great Peace meditation. This ceremony is said to wash away anger, violence, and corruption from the soul.\",\n      \"Surrounded by ancient trees and the gentle sound of tropical rain, you feel the stress and conflict of your recent adventures beginning to fade. The RainWing elders guide you through breathing exercises that seem almost magical in their calming effect.\",\n      \"This could be exactly what your spirit needs after the trials you've faced, potentially restoring your inner balance. However, some part of you wonders if letting go of your edge might leave you vulnerable to future threats.\"\n    ]\n  },\n  {\n    id: \"rainforest_venom_training\",\n    locationId: \"rainforest_kingdom\",\n    title: \"Venom Mastery\",\n    setting: \"RainWing Training Groves\",\n    emotionalTone: \"enlightening\",\n    narrativeText: [\n      \"A RainWing venom expert offers to teach you about their tribe's deadly defensive abilities. The training involves not just learning about different venom types, but understanding the philosophy of when and why to use such powerful weapons.\",\n      \"The instructor explains that venom is both protection and burden - it can save your life, but using it changes you. They share stories of RainWings who became too comfortable with violence after mastering their venom.\",\n      \"You must decide how much you want to learn. Basic knowledge could save your life, but deeper training in venom combat might awaken a more violent side of your nature.\"\n    ]\n  },\n\n  // NIGHTWING VILLAGE SCENARIOS  \n  {\n    id: \"nightwing_village_integration\",\n    locationId: \"rainforest_night_village\",\n    title: \"Cultural Fusion\",\n    setting: \"Mixed Tribe Village Center\",\n    emotionalTone: \"enlightening\",\n    narrativeText: [\n      \"The NightWing-RainWing village represents something unprecedented in dragon history - two tribes learning to live as one community. You witness daily interactions between dragons whose cultures couldn't be more different.\",\n      \"A dispute has arisen over architectural styles for new buildings. Some NightWings want their traditional dark, angular designs while RainWings prefer organic, tree-integrated structures that blend with the forest.\",\n      \"Your input could help shape how this experimental community develops. The decisions made here might serve as a model for inter-tribal cooperation throughout Pyrrhia.\"\n    ]\n  },\n\n  // OLD NIGHT KINGDOM SCENARIOS\n  {\n    id: \"old_night_kingdom_volcano_secrets\",\n    locationId: \"night_kingdom_old\",\n    title: \"Volcanic Revelations\",\n    setting: \"Active Volcano - Ancient Chambers\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"Deep within the volcanic tunnels of the old Night Kingdom, you discover chambers that predate the tribe's exodus. Ancient scrolls and artifacts lie scattered among the lava flows, preserved by the dry heat.\",\n      \"The volcanic activity seems to be increasing, and local dragons whisper that it's because the mountain is angry about the NightWings' abandonment. Strange magical currents flow through the lava, suggesting this was once a place of great power.\",\n      \"Some of the artifacts bear Darkstalker's mark, while others seem older still. Taking anything could provide valuable knowledge, but disturbing this place might awaken forces better left sleeping.\"\n    ]\n  },\n  {\n    id: \"old_night_kingdom_darkstalker_legacy\",\n    locationId: \"night_kingdom_old\", \n    title: \"The Darkstalker Shrine\",\n    setting: \"Hidden Mountain Shrine\",\n    emotionalTone: \"ominous\",\n    narrativeText: [\n      \"You discover a hidden shrine dedicated to Darkstalker, maintained by a secretive cult of NightWings who never left the old kingdom. They believe he will return to reclaim his rightful place as ruler of all dragons.\",\n      \"The cultists offer to share their 'true' history of Darkstalker, claiming that the stories told in schools are lies meant to discredit him. Their version paints him as a misunderstood hero who was betrayed by those he tried to save.\",\n      \"They have artifacts and spells that they claim belonged to Darkstalker himself. Joining them could grant access to incredible power, but their fanatical devotion suggests they might be dangerous to refuse or cross.\"\n    ]\n  }\n];\n\n// Class to manage location-based scenarios\nexport class LocationBasedScenarios {\n  static getRandomLocationScenario(locationId: string, character: Character): LocationScenario | null {\n    const locationScenarios = LOCATION_BASED_SCENARIOS.filter(scenario => {\n      // Match location ID\n      if (scenario.locationId !== locationId) return false;\n      \n      // Check requirements if any\n      if (scenario.requirements && !scenario.requirements(character)) return false;\n      \n      return true;\n    });\n    \n    if (locationScenarios.length === 0) return null;\n    \n    return locationScenarios[Math.floor(Math.random() * locationScenarios.length)];\n  }\n  \n  static getAllScenariosForLocation(locationId: string): LocationScenario[] {\n    return LOCATION_BASED_SCENARIOS.filter(scenario => scenario.locationId === locationId);\n  }\n  \n  static getScenarioById(scenarioId: string): LocationScenario | null {\n    return LOCATION_BASED_SCENARIOS.find(scenario => scenario.id === scenarioId) || null;\n  }\n}","size_bytes":23238},"client/src/lib/location-system.ts":{"content":"import { Character } from \"@shared/schema\";\n\n// Location types based on Wings of Fire map\nexport interface Location {\n  id: string;\n  name: string;\n  continent: \"Pyrrhia\" | \"Pantala\";\n  region: string;\n  primaryTribes: string[];\n  climate: string;\n  description: string;\n  specialFeatures: string[];\n  dangerLevel: 1 | 2 | 3 | 4 | 5; // 1 = Safe, 5 = Extremely Dangerous\n  travelCost: number; // Days to travel there\n}\n\n// All major locations from the Wings of Fire map\nexport const LOCATIONS: Location[] = [\n  // PYRRHIA LOCATIONS\n  {\n    id: \"jade_mountain_academy\",\n    name: \"Jade Mountain Academy\",\n    continent: \"Pyrrhia\",\n    region: \"Central Mountains\",\n    primaryTribes: [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\"],\n    climate: \"Temperate Mountain\",\n    description: \"A prestigious academy where dragons from all tribes learn together, built into the side of Jade Mountain itself.\",\n    specialFeatures: [\"Multi-tribal education\", \"Ancient tunnels\", \"Library\", \"Training grounds\", \"Safe haven\"],\n    dangerLevel: 1,\n    travelCost: 0\n  },\n  {\n    id: \"mud_kingdom\",\n    name: \"Mud Kingdom\",\n    continent: \"Pyrrhia\", \n    region: \"Eastern Marshlands\",\n    primaryTribes: [\"MudWing\"],\n    climate: \"Swampy and humid\",\n    description: \"Vast marshlands and wetlands where MudWings make their homes in reed-covered villages and mud palaces.\",\n    specialFeatures: [\"Healing mud baths\", \"Reed architecture\", \"Sibling bonds\", \"Military training\"],\n    dangerLevel: 2,\n    travelCost: 3\n  },\n  {\n    id: \"sand_kingdom\",\n    name: \"Sand Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Western Desert\", \n    primaryTribes: [\"SandWing\"],\n    climate: \"Hot desert\",\n    description: \"Endless golden dunes and oasis towns, ruled from the Stronghold palace.\",\n    specialFeatures: [\"Oasis settlements\", \"Treasure hoards\", \"Desert survival\", \"Trade routes\"],\n    dangerLevel: 3,\n    travelCost: 4\n  },\n  {\n    id: \"scorpion_den\",\n    name: \"Scorpion Den\",\n    continent: \"Pyrrhia\",\n    region: \"Western Desert\",\n    primaryTribes: [\"SandWing\"],\n    climate: \"Hot desert settlement\",\n    description: \"A bustling outlaw town in the heart of the desert, where dragons of all tribes gather to trade, gamble, and make deals away from royal oversight.\",\n    specialFeatures: [\"Outlaw sanctuary\", \"Black market trading\", \"Multi-tribal mixing\", \"Gambling dens\", \"Information brokers\"],\n    dangerLevel: 4,\n    travelCost: 3\n  },\n  {\n    id: \"sky_kingdom\",\n    name: \"Sky Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Northern Mountains\",\n    primaryTribes: [\"SkyWing\"],\n    climate: \"High altitude, thin air\",\n    description: \"Towering peaks and cloud-shrouded palaces where SkyWings rule the highest reaches of Pyrrhia.\",\n    specialFeatures: [\"Aerial combat training\", \"Mountain fortresses\", \"Thin air adaptation\", \"Strategic advantage\"],\n    dangerLevel: 3,\n    travelCost: 2\n  },\n  {\n    id: \"sea_kingdom\",\n    name: \"Sea Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Bay of a Thousand Scales\",\n    primaryTribes: [\"SeaWing\"],\n    climate: \"Oceanic\",\n    description: \"Underwater palaces and coral cities beneath the waves, accessible only to those who can breathe underwater.\",\n    specialFeatures: [\"Underwater cities\", \"Coral architecture\", \"Royal heritage\", \"Aquatic life\"],\n    dangerLevel: 4,\n    travelCost: 5\n  },\n  {\n    id: \"ice_kingdom\",\n    name: \"Ice Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Far North\",\n    primaryTribes: [\"IceWing\"],\n    climate: \"Arctic tundra\",\n    description: \"Frozen wasteland of ice and snow, with crystalline palaces that reflect the aurora borealis.\",\n    specialFeatures: [\"Ice architecture\", \"Ranking circles\", \"Aurora viewing\", \"Extreme cold survival\"],\n    dangerLevel: 5,\n    travelCost: 7\n  },\n  {\n    id: \"rainforest_kingdom\",\n    name: \"Rainforest Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Southern Rainforest\",\n    primaryTribes: [\"RainWing\"],\n    climate: \"Tropical rainforest\",\n    description: \"Lush canopy cities hidden among the trees, where RainWings live in harmony with nature.\",\n    specialFeatures: [\"Canopy villages\", \"Fruit abundance\", \"Camouflage training\", \"Peaceful lifestyle\"],\n    dangerLevel: 2,\n    travelCost: 4\n  },\n  {\n    id: \"night_kingdom_old\",\n    name: \"Old Night Kingdom\",\n    continent: \"Pyrrhia\",\n    region: \"Talon Peninsula\",\n    primaryTribes: [\"NightWing\"],\n    climate: \"Volcanic\",\n    description: \"The ancestral home of the NightWings, now largely abandoned after the volcano's eruption.\",\n    specialFeatures: [\"Volcanic landscape\", \"Ancient ruins\", \"Dangerous terrain\", \"Historical significance\"],\n    dangerLevel: 5,\n    travelCost: 6\n  },\n  {\n    id: \"rainforest_night_village\",\n    name: \"NightWing Village\",\n    continent: \"Pyrrhia\",\n    region: \"Southern Rainforest\",\n    primaryTribes: [\"NightWing\", \"RainWing\"],\n    climate: \"Tropical rainforest\",\n    description: \"New settlement where NightWings and RainWings live together after the tribe's relocation.\",\n    specialFeatures: [\"Inter-tribal cooperation\", \"New architecture\", \"Cultural fusion\", \"Peaceful coexistence\"],\n    dangerLevel: 1,\n    travelCost: 4\n  },\n\n  // PANTALA LOCATIONS\n  {\n    id: \"jewel_hive\",\n    name: \"Jewel Hive\",\n    continent: \"Pantala\",\n    region: \"Central Pantala\",\n    primaryTribes: [\"HiveWing\"],\n    climate: \"Temperate\",\n    description: \"The grand capital of the HiveWings, a massive crystalline structure that houses Queen Wasp's court.\",\n    specialFeatures: [\"Crystal architecture\", \"Royal court\", \"Mind control network\", \"Advanced technology\"],\n    dangerLevel: 4,\n    travelCost: 10\n  },\n  {\n    id: \"cicada_hive\",\n    name: \"Cicada Hive\",\n    continent: \"Pantala\",\n    region: \"Eastern Pantala\",\n    primaryTribes: [\"HiveWing\", \"SilkWing\"],\n    climate: \"Temperate\",\n    description: \"One of the major HiveWing cities where SilkWings work in the silk production facilities.\",\n    specialFeatures: [\"Silk production\", \"Forced labor\", \"Hive architecture\", \"Underground resistance\"],\n    dangerLevel: 3,\n    travelCost: 9\n  },\n  {\n    id: \"yellowjacket_hive\", \n    name: \"Yellowjacket Hive\",\n    continent: \"Pantala\",\n    region: \"Western Pantala\",\n    primaryTribes: [\"HiveWing\"],\n    climate: \"Arid\",\n    description: \"A militaristic HiveWing settlement focused on training and warfare.\",\n    specialFeatures: [\"Military training\", \"Weapon development\", \"Strategic location\", \"Harsh discipline\"],\n    dangerLevel: 4,\n    travelCost: 11\n  },\n  {\n    id: \"poison_jungle\",\n    name: \"Poison Jungle\",\n    continent: \"Pantala\",\n    region: \"Southern Pantala\", \n    primaryTribes: [\"LeafWing\"],\n    climate: \"Toxic jungle\",\n    description: \"Dense, poisonous jungle where the remaining LeafWings hide from HiveWing persecution.\",\n    specialFeatures: [\"Poisonous plants\", \"Hidden villages\", \"Guerrilla warfare\", \"Natural defenses\"],\n    dangerLevel: 5,\n    travelCost: 8\n  },\n  {\n    id: \"vinegaroon_hive\",\n    name: \"Vinegaroon Hive\", \n    continent: \"Pantala\",\n    region: \"Northern Pantala\",\n    primaryTribes: [\"HiveWing\", \"SilkWing\"],\n    climate: \"Cool temperate\",\n    description: \"Northern HiveWing settlement known for its harsh winters and disciplined inhabitants.\",\n    specialFeatures: [\"Cold adaptation\", \"Northern trade routes\", \"Strict hierarchy\", \"Winter survival\"],\n    dangerLevel: 3,\n    travelCost: 12\n  }\n];\n\nexport class LocationSystem {\n  static getCurrentLocation(gameData: any): Location {\n    const currentLocationId = gameData.location || \"jade_mountain_academy\";\n    return LOCATIONS.find(loc => loc.id === currentLocationId) || LOCATIONS[0];\n  }\n\n  static getAvailableDestinations(currentLocation: Location): Location[] {\n    // All locations are available to travel to, but with different costs/risks\n    return LOCATIONS.filter(loc => loc.id !== currentLocation.id);\n  }\n\n  static calculateTravelTime(from: Location, to: Location): number {\n    // Base travel cost plus continent crossing penalty\n    let travelTime = to.travelCost;\n    \n    if (from.continent !== to.continent) {\n      travelTime += 5; // Extra time to cross the ocean between continents\n    }\n    \n    return travelTime;\n  }\n\n  static canTravelToLocation(character: Character, destination: Location): {\n    canTravel: boolean;\n    reason?: string;\n  } {\n    // Check if character is strong enough for dangerous locations\n    if (destination.dangerLevel >= 4 && character.strength < 60) {\n      return {\n        canTravel: false,\n        reason: \"You need more strength to survive such a dangerous location.\"\n      };\n    }\n\n    // Check if character is sane enough for challenging journeys\n    if (destination.travelCost >= 8 && character.sanityPercentage < 30) {\n      return {\n        canTravel: false,\n        reason: \"Your mind is too fractured for such a long, difficult journey.\"\n      };\n    }\n\n    // Special location requirements\n    if (destination.id === \"sea_kingdom\" && !character.tribalPowers.includes(\"Underwater Breathing\")) {\n      return {\n        canTravel: false,\n        reason: \"You cannot breathe underwater. Only SeaWings or specially enchanted dragons can survive there.\"\n      };\n    }\n\n    return { canTravel: true };\n  }\n\n  static getLocationSpecificScenarios(location: Location): string[] {\n    // Return scenario types that are more likely in specific locations\n    const locationScenarios: Record<string, string[]> = {\n      \"jade_mountain_academy\": [\"ACADEMY\", \"LEARNING\", \"ROMANCE\"],\n      \"mud_kingdom\": [\"FAMILY\", \"HEALING\", \"MUDWING_CULTURE\"],\n      \"sand_kingdom\": [\"TREASURE\", \"SURVIVAL\", \"SANDWING_POLITICS\"],\n      \"sky_kingdom\": [\"AERIAL_COMBAT\", \"MOUNTAIN_SURVIVAL\", \"SKYWING_HONOR\"],\n      \"sea_kingdom\": [\"UNDERWATER_ADVENTURE\", \"SEAWING_ROYALTY\", \"OCEAN_MYSTERIES\"],\n      \"ice_kingdom\": [\"ARCTIC_SURVIVAL\", \"ICEWING_HIERARCHY\", \"FROZEN_SECRETS\"],\n      \"rainforest_kingdom\": [\"NATURE_HARMONY\", \"RAINWING_PEACE\", \"JUNGLE_MYSTERIES\"],\n      \"night_kingdom_old\": [\"ANCIENT_SECRETS\", \"VOLCANIC_DANGER\", \"NIGHTWING_HISTORY\"],\n      \"jewel_hive\": [\"HIVEWING_POLITICS\", \"MIND_CONTROL\", \"PANTALAN_INTRIGUE\"],\n      \"poison_jungle\": [\"LEAFWING_RESISTANCE\", \"TOXIC_SURVIVAL\", \"GUERRILLA_WARFARE\"]\n    };\n\n    return locationScenarios[location.id] || [\"NORMAL\", \"SURVIVAL\"];\n  }\n\n  static getTribalRelationships(location: Location, character: Character): {\n    welcomeLevel: number; // -100 to 100\n    description: string;\n  } {\n    const characterTribe = character.tribe;\n    const primaryTribes = location.primaryTribes;\n\n    if (primaryTribes.includes(characterTribe)) {\n      return {\n        welcomeLevel: 75,\n        description: \"You are welcomed as one of their own tribe.\"\n      };\n    }\n\n    // Inter-tribal relationships based on WoF lore\n    const tribalRelations: Record<string, Record<string, number>> = {\n      \"MudWing\": { \"SkyWing\": -30, \"IceWing\": -20, \"SeaWing\": 20, \"SandWing\": 10, \"RainWing\": 30, \"NightWing\": -10 },\n      \"SandWing\": { \"MudWing\": 10, \"SkyWing\": -40, \"IceWing\": -30, \"SeaWing\": 0, \"RainWing\": 20, \"NightWing\": -20 },\n      \"SkyWing\": { \"MudWing\": -30, \"SandWing\": -40, \"IceWing\": -50, \"SeaWing\": 10, \"RainWing\": 0, \"NightWing\": -60 },\n      \"SeaWing\": { \"MudWing\": 20, \"SandWing\": 0, \"SkyWing\": 10, \"IceWing\": 30, \"RainWing\": 40, \"NightWing\": -10 },\n      \"IceWing\": { \"MudWing\": -20, \"SandWing\": -30, \"SkyWing\": -50, \"SeaWing\": 30, \"RainWing\": -60, \"NightWing\": -80 },\n      \"RainWing\": { \"MudWing\": 30, \"SandWing\": 20, \"SkyWing\": 0, \"SeaWing\": 40, \"IceWing\": -60, \"NightWing\": 60 },\n      \"NightWing\": { \"MudWing\": -10, \"SandWing\": -20, \"SkyWing\": -60, \"SeaWing\": -10, \"IceWing\": -80, \"RainWing\": 60 }\n    };\n\n    let avgWelcome = 0;\n    let relationshipCount = 0;\n\n    for (const tribe of primaryTribes) {\n      if (tribalRelations[characterTribe] && tribalRelations[characterTribe][tribe] !== undefined) {\n        avgWelcome += tribalRelations[characterTribe][tribe];\n        relationshipCount++;\n      }\n    }\n\n    if (relationshipCount > 0) {\n      avgWelcome = Math.round(avgWelcome / relationshipCount);\n    }\n\n    let description = \"\";\n    if (avgWelcome >= 50) {\n      description = \"You are warmly welcomed as a friend and ally.\";\n    } else if (avgWelcome >= 20) {\n      description = \"You are received with cautious friendliness.\";\n    } else if (avgWelcome >= -20) {\n      description = \"You are tolerated but watched carefully.\";\n    } else if (avgWelcome >= -50) {\n      description = \"You are met with suspicion and hostility.\";\n    } else {\n      description = \"You are seen as an enemy and face open hostility.\";\n    }\n\n    return {\n      welcomeLevel: avgWelcome,\n      description\n    };\n  }\n}","size_bytes":12623},"client/src/components/contextual-inventory-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Character, GameData, InventoryItem, Choice } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Package, Gift, Sparkles, Trash2, Eye, EyeOff, Wand2 } from \"lucide-react\";\nimport { InventorySystem } from \"@/lib/inventory-system\";\nimport { ArtifactUsageModal } from \"./artifact-usage-modal\";\nimport { AnimusArtifactSystem } from \"@/lib/animus-artifact-system\";\n\ninterface ContextualInventoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  gameData: GameData;\n  onGiveItem: (itemId: string, npcName: string, result: string) => void;\n  onInventoryAction: (action: string, itemId: string, result: string) => void;\n  scenarioContext?: string;\n}\n\nexport default function ContextualInventoryModal({\n  isOpen,\n  onClose,\n  character,\n  gameData,\n  onGiveItem,\n  onInventoryAction,\n  scenarioContext = \"\"\n}: ContextualInventoryModalProps) {\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\n  const [selectedNPC, setSelectedNPC] = useState<string>(\"\");\n  const [customNPCName, setCustomNPCName] = useState(\"\");\n  const [actionResult, setActionResult] = useState<string>(\"\");\n  const [showArtifactUsage, setShowArtifactUsage] = useState(false);\n  const [artifactToUse, setArtifactToUse] = useState<InventoryItem | null>(null);\n\n  const giveableItems = InventorySystem.getGiveableItems(gameData);\n  \n  // Extract NPC names from recent scenarios and relationships\n  const potentialNPCs = [\n    ...(character.relationships ? Object.keys(character.relationships) : []),\n    \"Suspicious Dragon\", \"Injured Dragon\", \"Young Dragonet\", \"Elder Dragon\",\n    \"Animus Dragon\", \"Prophecy Dragon\", \"Academy Student\", \"Tribal Guard\"\n  ].filter((name, index, arr) => arr.indexOf(name) === index);\n\n  const handleUseArtifact = (artifactId: string, result: string) => {\n    if (!artifactToUse) return;\n    \n    onInventoryAction(\"use_artifact\", artifactId, result);\n    setShowArtifactUsage(false);\n    setArtifactToUse(null);\n  };\n\n  const handleGiveItem = () => {\n    if (!selectedItem) return;\n    \n    const npcName = selectedNPC === \"custom\" ? customNPCName : selectedNPC;\n    if (!npcName.trim()) return;\n\n    const result = InventorySystem.giveItemToNPC(character, gameData, selectedItem.id, npcName);\n    onGiveItem(selectedItem.id, npcName, result.result);\n    \n    setSelectedItem(null);\n    setSelectedNPC(\"\");\n    setCustomNPCName(\"\");\n    onClose();\n  };\n\n  const handleInventoryAction = (action: string) => {\n    if (!selectedItem) return;\n\n    if (action === \"use_artifact\") {\n      setArtifactToUse(selectedItem);\n      setShowArtifactUsage(true);\n      return;\n    }\n\n    let result = \"\";\n    \n    switch (action) {\n      case \"tear_up\":\n        result = `You tear up the ${selectedItem.name}, destroying it completely. The pieces scatter in the wind...`;\n        break;\n      case \"hide_mundane\":\n        result = `You carefully hide the ${selectedItem.name} using your natural stealth and cunning...`;\n        break;\n      case \"hide_animus\":\n        if (character.isAnimus) {\n          result = `Your animus magic wraps around the ${selectedItem.name}, rendering it completely invisible to all eyes...`;\n        } else {\n          result = \"You don't have animus magic to hide items this way.\";\n        }\n        break;\n      case \"examine\":\n        result = `You carefully examine the ${selectedItem.name}. ${selectedItem.description}`;\n        if (selectedItem.enchantments && selectedItem.enchantments.length > 0) {\n          result += ` You sense magical enchantments: ${selectedItem.enchantments.join(\", \")}.`;\n        }\n        break;\n      case \"activate\":\n        if (selectedItem.isActive) {\n          result = `You activate the ${selectedItem.name}, feeling its power surge through you...`;\n        } else {\n          result = `The ${selectedItem.name} cannot be activated in its current state.`;\n        }\n        break;\n      default:\n        result = `You attempt to ${action} the ${selectedItem.name}.`;\n    }\n\n    onInventoryAction(action, selectedItem.id, result);\n    setActionResult(result);\n  };\n\n  const getItemActions = (item: InventoryItem): string[] => {\n    const actions = [\"examine\"];\n    \n    // Basic actions for all items\n    if (item.canGiveAway !== false) {\n      actions.push(\"give\");\n    }\n    \n    // Destructible items\n    if (item.type === \"scroll\" || item.type === \"treasure\") {\n      actions.push(\"tear_up\");\n    }\n    \n    // Hideable items\n    if (item.type === \"scroll\" || item.type === \"magical_artifact\" || item.type === \"enchanted_object\") {\n      actions.push(\"hide_mundane\");\n      if (character.isAnimus) {\n        actions.push(\"hide_animus\");\n      }\n    }\n    \n    // Activatable items\n    if (item.isActive || item.type === \"enchanted_object\") {\n      actions.push(\"activate\");\n    }\n    \n    // Magical artifacts can be used with their special options\n    if (item.type === \"magical_artifact\") {\n      actions.push(\"use_artifact\");\n    }\n    \n    return actions;\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case \"give\": return <Gift className=\"w-4 h-4\" />;\n      case \"tear_up\": return <Trash2 className=\"w-4 h-4\" />;\n      case \"hide_mundane\": return <EyeOff className=\"w-4 h-4\" />;\n      case \"hide_animus\": return <Wand2 className=\"w-4 h-4\" />;\n      case \"examine\": return <Eye className=\"w-4 h-4\" />;\n      case \"activate\": return <Sparkles className=\"w-4 h-4\" />;\n      case \"use_artifact\": return <Wand2 className=\"w-4 h-4\" />;\n      default: return <Package className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getActionLabel = (action: string) => {\n    switch (action) {\n      case \"give\": return \"Give Away\";\n      case \"tear_up\": return \"Tear Up\";\n      case \"hide_mundane\": return \"Hide Carefully\";\n      case \"hide_animus\": return \"Hide with Magic\";\n      case \"examine\": return \"Examine Closely\";\n      case \"activate\": return \"Activate\";\n      case \"use_artifact\": return \"Use Powers\";\n      default: return action;\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"scroll\": return \"📜\";\n      case \"treasure\": return \"💎\";\n      case \"magical_artifact\": return \"✨\";\n      case \"enchanted_object\": return \"🔮\";\n      case \"weapon\": return \"⚔️\";\n      case \"tool\": return \"🔧\";\n      default: return \"📦\";\n    }\n  };\n\n  const getRarityColor = (rarity?: string) => {\n    switch (rarity) {\n      case \"legendary\": return \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\";\n      case \"rare\": return \"bg-purple-500/20 text-purple-300 border-purple-500/30\";\n      case \"uncommon\": return \"bg-blue-500/20 text-blue-300 border-blue-500/30\";\n      case \"common\": return \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n      default: return \"bg-slate-500/20 text-slate-300 border-slate-500/30\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] bg-black/90 border-purple-500/30 text-white overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-xl text-purple-300 flex items-center\">\n            <Package className=\"w-5 h-5 mr-2\" />\n            Inventory Management\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"inventory\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-black/50\">\n            <TabsTrigger value=\"inventory\" className=\"data-[state=active]:bg-purple-600/30\">View Items</TabsTrigger>\n            <TabsTrigger value=\"give\" className=\"data-[state=active]:bg-purple-600/30\">Give Items</TabsTrigger>\n          </TabsList>\n          \n          {/* View Items Tab */}\n          <TabsContent value=\"inventory\" className=\"mt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Item Selection */}\n              <div>\n                <h3 className=\"font-semibold text-purple-300 mb-3 flex items-center\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Select Item\n                </h3>\n                <div className=\"h-64 overflow-y-auto pr-4\">\n                  <div className=\"space-y-2\">\n                    {!gameData.inventory || gameData.inventory.length === 0 ? (\n                      <p className=\"text-slate-400 text-sm\">No items in inventory.</p>\n                    ) : (\n                      gameData.inventory.map((item) => (\n                        <Card\n                          key={item.id}\n                          className={`cursor-pointer transition-all duration-200 ${\n                            selectedItem?.id === item.id\n                              ? \"bg-purple-600/30 border-purple-400\"\n                              : \"bg-black/40 border-purple-500/20 hover:border-purple-500/40\"\n                          }`}\n                          onClick={() => setSelectedItem(item)}\n                        >\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex items-start space-x-3\">\n                              <span className=\"text-2xl\">{getTypeIcon(item.type)}</span>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <h4 className=\"font-medium text-sm\">{item.name}</h4>\n                                  {item.rarity && (\n                                    <Badge className={getRarityColor(item.rarity)}>\n                                      {item.rarity}\n                                    </Badge>\n                                  )}\n                                </div>\n                                <p className=\"text-xs text-slate-400 mt-1\">\n                                  {item.description}\n                                </p>\n                                {item.enchantments && item.enchantments.length > 0 && (\n                                  <div className=\"mt-2\">\n                                    <p className=\"text-xs text-purple-300 flex items-center\">\n                                      <Sparkles className=\"w-3 h-3 mr-1\" />\n                                      Enchantments:\n                                    </p>\n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                                      {item.enchantments.map((enchantment, index) => (\n                                        <Badge\n                                          key={index}\n                                          className=\"text-xs bg-purple-500/20 text-purple-300\"\n                                        >\n                                          {enchantment}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions for Selected Item */}\n              <div>\n                <h3 className=\"font-semibold text-purple-300 mb-3\">\n                  Available Actions\n                </h3>\n                {selectedItem ? (\n                  <div className=\"space-y-2\">\n                    {getItemActions(selectedItem).map((action) => (\n                      <Button\n                        key={action}\n                        variant=\"outline\"\n                        className=\"w-full justify-start text-left\"\n                        onClick={() => handleInventoryAction(action)}\n                      >\n                        {getActionIcon(action)}\n                        <span className=\"ml-2\">{getActionLabel(action)}</span>\n                      </Button>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-slate-400 text-sm\">Select an item to see available actions.</p>\n                )}\n                \n                {actionResult && (\n                  <div className=\"mt-4 bg-green-900/20 border border-green-500/30 rounded-lg p-3\">\n                    <p className=\"text-green-300 text-sm\">{actionResult}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n          \n          {/* Give Items Tab */}\n          <TabsContent value=\"give\" className=\"mt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Item Selection for Giving */}\n              <div>\n                <h3 className=\"font-semibold text-purple-300 mb-3 flex items-center\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Select Item to Give\n                </h3>\n                <ScrollArea className=\"h-64 pr-4\">\n                  <div className=\"space-y-2\">\n                    {giveableItems.length === 0 ? (\n                      <p className=\"text-slate-400 text-sm\">No items available to give away.</p>\n                    ) : (\n                      giveableItems.map((item) => (\n                        <Card\n                          key={item.id}\n                          className={`cursor-pointer transition-all duration-200 ${\n                            selectedItem?.id === item.id\n                              ? \"bg-purple-600/30 border-purple-400\"\n                              : \"bg-black/40 border-purple-500/20 hover:border-purple-500/40\"\n                          }`}\n                          onClick={() => setSelectedItem(item)}\n                        >\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex items-start space-x-3\">\n                              <span className=\"text-2xl\">{getTypeIcon(item.type)}</span>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <h4 className=\"font-medium text-sm\">{item.name}</h4>\n                                  {item.rarity && (\n                                    <Badge className={getRarityColor(item.rarity)}>\n                                      {item.rarity}\n                                    </Badge>\n                                  )}\n                                </div>\n                                <p className=\"text-xs text-slate-400 mt-1\">\n                                  {item.description}\n                                </p>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </ScrollArea>\n              </div>\n\n              {/* NPC Selection */}\n              <div>\n                <h3 className=\"font-semibold text-purple-300 mb-3\">\n                  Select Dragon to Give To\n                </h3>\n                <ScrollArea className=\"h-64\">\n                  <div className=\"space-y-2\">\n                    {potentialNPCs.map((npc) => (\n                      <Button\n                        key={npc}\n                        variant=\"ghost\"\n                        className={`w-full text-left justify-start ${\n                          selectedNPC === npc\n                            ? \"bg-purple-600/30 text-purple-300\"\n                            : \"text-slate-300 hover:bg-purple-500/20\"\n                        }`}\n                        onClick={() => {\n                          setSelectedNPC(npc);\n                          setCustomNPCName(\"\");\n                        }}\n                      >\n                        {npc}\n                        {character.relationships && character.relationships[npc] && (\n                          <Badge className=\"ml-2 text-xs bg-green-500/20 text-green-300\">\n                            Known\n                          </Badge>\n                        )}\n                      </Button>\n                    ))}\n                    <Button\n                      variant=\"ghost\"\n                      className={`w-full text-left justify-start ${\n                        selectedNPC === \"custom\"\n                          ? \"bg-purple-600/30 text-purple-300\"\n                          : \"text-slate-300 hover:bg-purple-500/20\"\n                      }`}\n                      onClick={() => setSelectedNPC(\"custom\")}\n                    >\n                      Custom Dragon Name...\n                    </Button>\n                    \n                    {selectedNPC === \"custom\" && (\n                      <input\n                        type=\"text\"\n                        placeholder=\"Enter dragon name...\"\n                        className=\"w-full px-3 py-2 bg-black/50 border border-purple-500/30 rounded text-white placeholder-slate-400\"\n                        value={customNPCName}\n                        onChange={(e) => setCustomNPCName(e.target.value)}\n                      />\n                    )}\n                  </div>\n                </ScrollArea>\n                \n                <div className=\"mt-4\">\n                  <Button\n                    onClick={handleGiveItem}\n                    disabled={\n                      !selectedItem ||\n                      (selectedNPC === \"\" && customNPCName === \"\") ||\n                      (selectedNPC === \"custom\" && !customNPCName.trim())\n                    }\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:text-gray-400\"\n                  >\n                    Give Item\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n          \n\n        </Tabs>\n\n        <div className=\"flex justify-end space-x-2 pt-4 mt-4 border-t border-purple-500/20\">\n          <Button variant=\"outline\" onClick={onClose} className=\"px-6\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n      \n      {artifactToUse && (\n        <ArtifactUsageModal\n          isOpen={showArtifactUsage}\n          onClose={() => {\n            setShowArtifactUsage(false);\n            setArtifactToUse(null);\n          }}\n          artifact={artifactToUse}\n          character={character}\n          onUseArtifact={handleUseArtifact}\n        />\n      )}\n    </Dialog>\n  );\n}","size_bytes":18901},"client/src/lib/comprehensive-scenario-database.ts":{"content":"import { Character, GameData, Scenario } from \"@shared/schema\";\n\ninterface EnhancedScenarioTemplate {\n  id: string;\n  type: 'ANIMUS' | 'MINDREADING' | 'PROPHECY' | 'WARS' | 'LEARNING' | 'NORMAL';\n  title: string;\n  description: string;\n  narrativeText: string[];\n  weight: number; // How likely this scenario is to appear\n  requirements?: (character: Character) => boolean;\n  choices: {\n    id: string;\n    text: string;\n    description: string;\n    soulCost: number;\n    sanityCost: number;\n    consequences: string[];\n    corruption?: boolean;\n    requirements?: string[];\n  }[];\n}\n\n// Comprehensive scenario database merged from all attached files\nexport const COMPREHENSIVE_SCENARIOS: EnhancedScenarioTemplate[] = [\n  // Animus Power Scenarios (from attached files)\n  {\n    id: \"animus_first_discovery\",\n    type: \"ANIMUS\",\n    title: \"First Animus Power Discovery\",\n    description: \"A dragon discovers their Animus power for the first time in a heated battle\",\n    narrativeText: [\n      \"The battle rages around you, scales clashing against claws, fire against fire.\",\n      \"Suddenly, in a moment of desperation, you feel something stir within you—a power unlike anything you've felt before.\",\n      \"Energy courses through your veins as your Animus magic awakens for the first time.\",\n      \"The magic erupts from you uncontrolled, and you realize with both wonder and terror that you are animus.\"\n    ],\n    weight: 3,\n    requirements: (character) => character.isAnimus && character.age <= 5,\n    choices: [\n      {\n        id: \"control_power\",\n        text: \"Try to control the magical energy\",\n        description: \"Focus on controlling the power surge\",\n        soulCost: 2,\n        sanityCost: 0,\n        consequences: [\"learned_control\", \"power_stabilized\"]\n      },\n      {\n        id: \"let_power_rage\",\n        text: \"Let the power rage uncontrolled\",\n        description: \"Allow the magic to flow freely without restraint\",\n        soulCost: 8,\n        sanityCost: 5,\n        consequences: [\"massive_damage\", \"power_revealed\", \"enemies_defeated\"],\n        corruption: true\n      },\n      {\n        id: \"try_to_suppress\",\n        text: \"Try to suppress the awakening magic\",\n        description: \"Attempt to push the power back down\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"magic_suppressed\", \"internal_conflict\", \"missed_opportunity\"]\n      }\n    ]\n  },\n  \n  {\n    id: \"animus_power_backfire\",\n    type: \"ANIMUS\",\n    title: \"Magic Backfires in Combat\",\n    description: \"Your Animus power suddenly backfires during a fight\",\n    narrativeText: [\n      \"You channel your animus magic, preparing to turn the tide of battle.\",\n      \"But something goes wrong—the magic twists against itself, writhing like a living thing.\",\n      \"The spell backfires spectacularly, and you feel the dark energy recoiling through your soul.\",\n      \"Your opponents pause, sensing the magical disturbance, as you struggle to regain control.\"\n    ],\n    weight: 2,\n    requirements: (character) => character.isAnimus && character.soulPercentage < 70,\n    choices: [\n      {\n        id: \"retreat_and_meditate\",\n        text: \"Retreat to calm yourself and meditate\",\n        description: \"Pull back from combat to stabilize your magic\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"magic_stabilized\", \"tactical_retreat\", \"wisdom_gained\"]\n      },\n      {\n        id: \"push_through_backfire\",\n        text: \"Push through the magical feedback\",\n        description: \"Force the magic to work despite the backfire\",\n        soulCost: 12,\n        sanityCost: 10,\n        consequences: [\"power_through\", \"dangerous_precedent\", \"soul_damage\"],\n        corruption: true\n      },\n      {\n        id: \"seek_immediate_help\",\n        text: \"Call for help from allies\",\n        description: \"Ask other dragons to assist you\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"received_help\", \"magic_contained\", \"vulnerability_revealed\"]\n      }\n    ]\n  },\n\n  {\n    id: \"heal_ally_carefully\",\n    type: \"ANIMUS\",\n    title: \"Healing Without Harm\",\n    description: \"A dragon with Animus magic must heal an ally without harming them\",\n    narrativeText: [\n      \"Your closest friend lies wounded before you, their breathing shallow and labored.\",\n      \"You have the power to heal them instantly with animus magic, but you know the risks.\",\n      \"One wrong move, one moment of lost concentration, and your healing could become a curse.\",\n      \"Your hands hover over their wounds as you prepare to channel the most delicate magic you've ever attempted.\"\n    ],\n    weight: 2,\n    requirements: (character) => character.isAnimus,\n    choices: [\n      {\n        id: \"careful_healing\",\n        text: \"Use small, careful bursts of healing magic\",\n        description: \"Channel magic slowly and precisely\",\n        soulCost: 3,\n        sanityCost: 0,\n        consequences: [\"successful_healing\", \"friend_saved\", \"precise_control_learned\"]\n      },\n      {\n        id: \"powerful_healing\",\n        text: \"Pour all your power into healing them\",\n        description: \"Use maximum power to ensure complete healing\",\n        soulCost: 15,\n        sanityCost: 5,\n        consequences: [\"complete_healing\", \"soul_cost_high\", \"magical_exhaustion\"],\n        corruption: true\n      },\n      {\n        id: \"refuse_to_heal\",\n        text: \"Refuse to use magic, seek mundane healing\",\n        description: \"Find a healer or use traditional medicine\",\n        soulCost: 0,\n        sanityCost: 20,\n        consequences: [\"soul_preserved\", \"friend_at_risk\", \"guilt_burden\"]\n      }\n    ]\n  },\n\n  // Wars and Battles Scenarios\n  {\n    id: \"tribal_war_choice\",\n    type: \"WARS\",\n    title: \"Choose Your Side\",\n    description: \"Two tribes declare war, and your clan must choose a side\",\n    narrativeText: [\n      \"The great hall falls silent as messengers from both the SkyWings and SeaWings await your clan's decision.\",\n      \"War has been declared, and neutrality is no longer an option.\",\n      \"Your clan leader looks to you—your voice carries weight in this decision that will reshape alliances across Pyrrhia.\",\n      \"The choice you make today will determine which dragons live and which dragons die.\"\n    ],\n    weight: 3,\n    requirements: (character) => character.age >= 7,\n    choices: [\n      {\n        id: \"support_skywings\",\n        text: \"Advise supporting the SkyWings\",\n        description: \"Side with the martial might of the SkyWings\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"skywing_alliance\", \"seawing_enmity\", \"military_strength\"]\n      },\n      {\n        id: \"support_seawings\",\n        text: \"Advise supporting the SeaWings\", \n        description: \"Side with the diplomatic SeaWings\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"seawing_alliance\", \"skywing_enmity\", \"diplomatic_advantage\"]\n      },\n      {\n        id: \"propose_mediation\",\n        text: \"Propose attempting to mediate the conflict\",\n        description: \"Try to broker peace between the warring tribes\",\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: [\"peace_attempt\", \"respect_from_both\", \"dangerous_neutrality\"]\n      },\n      {\n        id: \"animus_intervention\",\n        text: \"Suggest using animus magic to end the war quickly\",\n        description: \"Use magical power to force a resolution\",\n        soulCost: 20,\n        sanityCost: 0,\n        consequences: [\"magical_resolution\", \"political_upheaval\", \"power_feared\"],\n        corruption: true,\n        requirements: [\"character.isAnimus\"]\n      }\n    ]\n  },\n\n  {\n    id: \"village_under_siege\",\n    type: \"WARS\", \n    title: \"Army at the Gates\",\n    description: \"A dragon army surrounds your village\",\n    narrativeText: [\n      \"The thunder of wings fills the sky as hundreds of enemy dragons circle your village.\",\n      \"From the watchtower, you can see their organized formations—this is no raiding party.\",\n      \"The villagers look to the defenders with fear in their eyes, knowing that conventional defenses may not be enough.\",\n      \"You realize that creative tactics and courage will be needed to save your home.\"\n    ],\n    weight: 2,\n    choices: [\n      {\n        id: \"guerrilla_tactics\",\n        text: \"Use terrain and ambush tactics\",\n        description: \"Fight smart using the landscape to your advantage\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"tactical_victory\", \"minimal_casualties\", \"strategic_thinking\"]\n      },\n      {\n        id: \"direct_assault\",\n        text: \"Launch a direct counter-attack\", \n        description: \"Meet force with force in open battle\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"costly_victory\", \"heavy_casualties\", \"brave_stand\"]\n      },\n      {\n        id: \"magical_defense\",\n        text: \"Use animus magic to defend the village\",\n        description: \"Create magical barriers and weapons\",\n        soulCost: 12,\n        sanityCost: 0,\n        consequences: [\"magical_victory\", \"village_saved\", \"power_displayed\"],\n        requirements: [\"character.isAnimus\"]\n      },\n      {\n        id: \"negotiate_surrender\",\n        text: \"Attempt to negotiate terms of surrender\",\n        description: \"Try to minimize bloodshed through diplomacy\",\n        soulCost: 0,\n        sanityCost: 25,\n        consequences: [\"peaceful_resolution\", \"village_spared\", \"honor_questioned\"]\n      }\n    ]\n  },\n\n  // Mind Reading Scenarios\n  {\n    id: \"sudden_mind_reading\",\n    type: \"MINDREADING\",\n    title: \"Unexpected Thought Intrusion\",\n    description: \"A dragon suddenly knows what another is thinking\",\n    narrativeText: [\n      \"Without warning, thoughts that aren't your own flood into your mind.\",\n      \"You can hear them as clearly as spoken words—fears, secrets, plans, emotions.\",\n      \"The dragon in front of you has no idea that their mental walls have crumbled before your unexpected ability.\",\n      \"The power is intoxicating, but you realize this violation of privacy comes with serious moral implications.\"\n    ],\n    weight: 2,\n    requirements: (character) => character.tribalPowers.includes('Mind Reading') || character.specialPowers.includes('Enhanced Mind Reading'),\n    choices: [\n      {\n        id: \"respect_privacy\",\n        text: \"Immediately stop reading their thoughts\",\n        description: \"Respect their mental privacy and withdraw\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"ethical_choice\", \"power_controlled\", \"trust_maintained\"]\n      },\n      {\n        id: \"gather_information\",\n        text: \"Continue reading to gather useful information\",\n        description: \"Use this opportunity to learn their secrets\",\n        soulCost: 0,\n        sanityCost: 12,\n        consequences: [\"information_gained\", \"privacy_violated\", \"guilt_acquired\"]\n      },\n      {\n        id: \"manipulate_thoughts\",\n        text: \"Try to influence or change their thoughts\",\n        description: \"Attempt to alter their thinking patterns\",\n        soulCost: 8,\n        sanityCost: 20,\n        consequences: [\"mind_manipulation\", \"dangerous_precedent\", \"ethical_corruption\"],\n        corruption: true,\n        requirements: [\"character.specialPowers.includes('Enhanced Mind Reading')\"]\n      }\n    ]\n  },\n\n  {\n    id: \"multiple_thoughts_chaos\",\n    type: \"MINDREADING\", \n    title: \"Mental Cacophony\",\n    description: \"You hear multiple thoughts at once from different dragons\",\n    narrativeText: [\n      \"The marketplace buzzes with activity, but for you, it's a nightmare of overlapping voices.\",\n      \"Dozens of dragons' thoughts crash into your mind simultaneously—worries about crops, excitement about festivals, dark secrets, petty grievances.\",\n      \"The mental noise threatens to overwhelm you completely, leaving you dizzy and disoriented.\",\n      \"You must find a way to regain control before you collapse from the psychic overload.\"\n    ],\n    weight: 2,\n    requirements: (character) => character.tribalPowers.includes('Mind Reading') || character.specialPowers.includes('Enhanced Mind Reading'),\n    choices: [\n      {\n        id: \"focus_on_one\",\n        text: \"Focus intensely on one dragon's thoughts\",\n        description: \"Block out the noise by concentrating on a single mind\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"mental_focus\", \"information_gained\", \"exhaustion\"]\n      },\n      {\n        id: \"retreat_mentally\",\n        text: \"Retreat from the mental noise entirely\",\n        description: \"Shut down your mind reading ability temporarily\",\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: [\"peace_restored\", \"ability_suppressed\", \"missed_opportunities\"]\n      },\n      {\n        id: \"embrace_chaos\",\n        text: \"Try to process all the thoughts simultaneously\",\n        description: \"Attempt to handle the full mental assault\",\n        soulCost: 0,\n        sanityCost: 25,\n        consequences: [\"mental_overload\", \"expanded_awareness\", \"psychological_damage\"],\n        corruption: true\n      }\n    ]\n  },\n\n  // Prophecy Scenarios\n  {\n    id: \"cryptic_battle_prophecy\",\n    type: \"PROPHECY\",\n    title: \"Vision of Coming Battle\",\n    description: \"You receive a cryptic prophecy about an upcoming battle\",\n    narrativeText: [\n      \"The vision hits you like lightning—flashes of scales and fire, the sound of clashing talons, the taste of blood in the air.\",\n      \"Through the prophetic haze, you see dragons you recognize fighting desperately against an unseen enemy.\",\n      \"The prophecy speaks in riddles: 'When moon meets sun in dragon's eye, the false king's crown shall crack and die.'\",\n      \"You have knowledge of what's coming, but interpreting it correctly could mean the difference between victory and catastrophe.\"\n    ],\n    weight: 2,\n    requirements: (character) => character.tribalPowers.includes('Prophecy (rare)') || character.specialPowers.includes('Enhanced Prophecy') || character.specialPowers.includes('Foresight'),\n    choices: [\n      {\n        id: \"warn_everyone\",\n        text: \"Warn everyone about the coming battle\",\n        description: \"Share your vision to prepare for the conflict\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"warning_given\", \"preparation_time\", \"prophecy_revealed\"]\n      },\n      {\n        id: \"interpret_carefully\",\n        text: \"Study the prophecy to understand its true meaning\",\n        description: \"Analyze the riddle before taking action\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"deeper_understanding\", \"strategic_advantage\", \"time_invested\"]\n      },\n      {\n        id: \"act_on_prophecy\",\n        text: \"Take immediate action based on your interpretation\",\n        description: \"Act decisively on what you think it means\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"bold_action\", \"potential_misinterpretation\", \"fate_altered\"]\n      },\n      {\n        id: \"use_magic_to_change_fate\",\n        text: \"Use animus magic to try changing the prophesied outcome\",\n        description: \"Attempt to alter destiny itself with magic\",\n        soulCost: 25,\n        sanityCost: 10,\n        consequences: [\"fate_challenged\", \"magical_interference\", \"cosmic_consequences\"],\n        corruption: true,\n        requirements: [\"character.isAnimus\"]\n      }\n    ]\n  },\n\n  // Learning and Normal Life Scenarios\n  {\n    id: \"hidden_library_discovery\",\n    type: \"LEARNING\",\n    title: \"Ancient Knowledge Found\",\n    description: \"You find a hidden scroll in a library containing forbidden knowledge\",\n    narrativeText: [\n      \"While researching in the depths of the old library, your claw catches on a loose stone.\",\n      \"Behind it, you discover a hidden compartment containing ancient scrolls that seem to pulse with dark energy.\",\n      \"The writing is in old Dragon script, describing animus techniques that have been banned for centuries.\",\n      \"As you read, you realize this knowledge could make you incredibly powerful—or incredibly dangerous.\"\n    ],\n    weight: 2,\n    choices: [\n      {\n        id: \"study_forbidden_knowledge\",\n        text: \"Study the forbidden techniques carefully\",\n        description: \"Learn the dangerous magical arts described\",\n        soulCost: 5,\n        sanityCost: 10,\n        consequences: [\"forbidden_knowledge\", \"dangerous_power\", \"moral_corruption\"],\n        corruption: true\n      },\n      {\n        id: \"report_to_authorities\",\n        text: \"Report the discovery to the librarians\",\n        description: \"Let the proper authorities handle the forbidden texts\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"responsible_choice\", \"knowledge_secured\", \"trust_earned\"]\n      },\n      {\n        id: \"destroy_scrolls\",\n        text: \"Destroy the scrolls to keep them from anyone\",\n        description: \"Burn the dangerous knowledge to protect everyone\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"knowledge_destroyed\", \"protection_achieved\", \"history_lost\"]\n      },\n      {\n        id: \"secretly_copy_knowledge\",\n        text: \"Secretly copy the knowledge for yourself\",\n        description: \"Make your own copies before reporting the find\",\n        soulCost: 3,\n        sanityCost: 15,\n        consequences: [\"secret_knowledge\", \"deception\", \"personal_advantage\"],\n        corruption: true\n      }\n    ]\n  },\n\n  {\n    id: \"dragon_offers_friendship\",\n    type: \"NORMAL\",\n    title: \"Unexpected Friendship\",\n    description: \"A dragon from another tribe offers genuine friendship\",\n    narrativeText: [\n      \"You're sitting alone in the courtyard when a dragon you've never seen before approaches.\",\n      \"They're clearly from a different tribe—their scales shimmer with unfamiliar colors.\",\n      \"'I've been watching you,' they say with a friendly smile. 'You seem like someone I'd like to know better.'\",\n      \"In a world where inter-tribal relationships can be complicated, this gesture of friendship feels both welcome and risky.\"\n    ],\n    weight: 4,\n    choices: [\n      {\n        id: \"accept_friendship\",\n        text: \"Welcome their friendship openly\",\n        description: \"Accept their offer and get to know them\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"new_friendship\", \"inter_tribal_bond\", \"social_growth\"]\n      },\n      {\n        id: \"cautious_acceptance\",\n        text: \"Accept but remain cautious\",\n        description: \"Be friendly but keep your guard up\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"guarded_friendship\", \"trust_issues\", \"safety_maintained\"]\n      },\n      {\n        id: \"politely_decline\",\n        text: \"Politely decline their friendship\",\n        description: \"Kindly refuse to avoid complications\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"missed_opportunity\", \"safety_prioritized\", \"isolation\"]\n      },\n      {\n        id: \"push_them_away_rudely\",\n        text: \"Rudely push them away\",\n        description: \"Be hostile to make them leave you alone\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"enemy_made\", \"reputation_damaged\", \"cruelty_shown\"],\n        corruption: true\n      }\n    ]\n  },\n\n  // Complex Multi-Path Scenarios\n  {\n    id: \"immortality_request\",\n    type: \"ANIMUS\",\n    title: \"The Ultimate Request\",\n    description: \"A desperate dragon asks you to enchant them immortal\",\n    narrativeText: [\n      \"The old dragon before you trembles with age, their once-proud wings now brittle and worn.\",\n      \"'Please,' they whisper, tears in their ancient eyes. 'I've lived a good life, but I'm not ready to die.'\",\n      \"'I have grandchildren I want to see grow up, knowledge I haven't finished sharing.'\",\n      \"You have the power to grant their wish—but immortality is perhaps the most dangerous magic of all.\"\n    ],\n    weight: 1,\n    requirements: (character) => character.isAnimus && character.age >= 10,\n    choices: [\n      {\n        id: \"grant_immortality\",\n        text: \"Grant their wish for immortality\",\n        description: \"Use animus magic to make them immortal\",\n        soulCost: 30,\n        sanityCost: 0,\n        consequences: [\"immortality_granted\", \"massive_soul_loss\", \"god_like_power\"],\n        corruption: true\n      },\n      {\n        id: \"grant_extended_life\",\n        text: \"Grant them a few more healthy years instead\",\n        description: \"Give them time without full immortality\",\n        soulCost: 10,\n        sanityCost: 0,\n        consequences: [\"life_extended\", \"compromise_made\", \"gratitude_earned\"]\n      },\n      {\n        id: \"refuse_kindly\",\n        text: \"Gently refuse and explain the dangers\",\n        description: \"Help them understand why you can't do this\",\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: [\"wisdom_shared\", \"request_denied\", \"understanding_reached\"]\n      },\n      {\n        id: \"make_them_understand_death\",\n        text: \"Use magic to make them accept death peacefully\",\n        description: \"Alter their mind to remove their fear of dying\",\n        soulCost: 15,\n        sanityCost: 5,\n        consequences: [\"mind_altered\", \"peace_given\", \"ethical_violation\"],\n        corruption: true\n      }\n    ]\n  },\n\n  // Additional scenarios from the scenario files, formatted for the comprehensive database\n  {\n    id: \"rare_herbs_discovery\",\n    type: \"NORMAL\",\n    title: \"Forest Treasures\",\n    description: \"You wander into a forest and find rare medicinal herbs\",\n    narrativeText: [\n      \"The ancient forest is quiet except for the whisper of leaves in the wind.\",\n      \"Among the twisted roots of an enormous tree, you spot something unusual—herbs that glow faintly with inner light.\",\n      \"These are healing herbs, incredibly rare and valuable, used to treat the most serious injuries.\",\n      \"But you also know that taking them depletes this grove's natural magic.\"\n    ],\n    weight: 3,\n    choices: [\n      {\n        id: \"collect_all_herbs\",\n        text: \"Collect all the herbs you can find\",\n        description: \"Gather every valuable herb for maximum benefit\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"wealth_gained\", \"herbs_collected\", \"grove_depleted\"]\n      },\n      {\n        id: \"take_only_what_you_need\",\n        text: \"Take only a few herbs, leaving the rest\",\n        description: \"Practice restraint and conservation\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"moderate_gain\", \"conservation\", \"grove_preserved\"]\n      },\n      {\n        id: \"leave_herbs_untouched\",\n        text: \"Leave the herbs untouched\",\n        description: \"Respect the forest's natural balance\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"nature_respected\", \"opportunity_missed\", \"karma_gained\"]\n      },\n      {\n        id: \"enchant_herbs_to_regrow\",\n        text: \"Use magic to make the herbs regrow faster\",\n        description: \"Enhance the grove's natural regeneration\",\n        soulCost: 5,\n        sanityCost: 0,\n        consequences: [\"grove_enhanced\", \"sustainable_harvesting\", \"magical_intervention\"],\n        requirements: [\"character.isAnimus\"]\n      }\n    ]\n  },\n\n  // New Custom Action Required Scenarios\n  {\n    id: \"suspicious_ancient_door\",\n    title: \"The Sealed Chamber\",\n    description: \"You discover an ancient door with strange markings that pulses with magical energy\",\n    narrativeText: [\n      \"Deep in the academy's forgotten tunnels, you find a door unlike any other.\",\n      \"Ancient runes cover its surface, glowing faintly with inner power.\",\n      \"The air around it hums with magical energy, and you sense something important lies beyond.\",\n      \"But the door has no handle, no obvious way to open it—only those mysterious symbols.\"\n    ],\n    choices: [\n      {\n        id: \"study_runes\",\n        text: \"Study the runes carefully\",\n        description: \"Examine the ancient markings for clues\",\n        consequences: [\"You learn the runes speak of ancient animus magic\"],\n        soulCost: 0,\n        sanityCost: 0\n      },\n      {\n        id: \"force_open\",\n        text: \"Try to force the door open\",\n        description: \"Use physical force to breach the sealed chamber\",\n        consequences: [\"The door resists, and magical energy crackles around you\"],\n        soulCost: 0,\n        sanityCost: 5\n      }\n    ],\n    locations: [\"Jade Mountain Academy\"],\n    categories: [\"mystery\", \"magic\"],\n    customActionRequired: true,\n    rarity: \"rare\"\n  },\n\n  {\n    id: \"injured_dragon_complex\",\n    title: \"Life or Death Decision\",\n    description: \"A critically injured dragon needs immediate help, but saving them might expose your abilities\",\n    narrativeText: [\n      \"You come across a dragon collapsed in the hallway, breathing shallowly.\",\n      \"Their injuries are severe—internal bleeding, broken bones, possibly dying.\",\n      \"Other dragons are panicking, calling for healers, but they might not arrive in time.\",\n      \"You could save them with your powers, but doing so openly would reveal your secret abilities to everyone.\"\n    ],\n    choices: [\n      {\n        id: \"heal_openly\",\n        text: \"Heal them with magic, regardless of consequences\",\n        description: \"Use your animus power to save their life\",\n        consequences: [\"The dragon lives, but your animus powers are exposed\"],\n        soulCost: 3,\n        sanityCost: 0\n      },\n      {\n        id: \"conventional_help\",\n        text: \"Try to help with conventional methods\",\n        description: \"Apply first aid and basic medical care\",\n        consequences: [\"You do what you can, but it might not be enough\"],\n        soulCost: 0,\n        sanityCost: 10\n      }\n    ],\n    location: [\"Any\"],\n    categories: [\"crisis\", \"moral\"],\n    customActionRequired: true,\n    rarity: \"uncommon\"\n  },\n\n  {\n    id: \"tribal_artifact_dispute\",\n    title: \"The Contested Relic\",\n    description: \"Two tribes are on the verge of war over an ancient artifact, and you might be the key to peace\",\n    narrativeText: [\n      \"The tension in the great hall is palpable as representatives from two rival tribes face off.\",\n      \"Between them sits an ancient artifact—a crystal orb that supposedly holds great tribal power.\",\n      \"Both sides claim it belongs to their tribe, both have legitimate historical claims.\",\n      \"War seems inevitable unless someone can find a solution that satisfies both parties.\"\n    ],\n    choices: [\n      {\n        id: \"suggest_sharing\",\n        text: \"Suggest they share custody of the artifact\",\n        description: \"Propose a compromise to prevent war\",\n        consequences: [\"Both tribes are skeptical but consider the proposal\"],\n        soulCost: 0,\n        sanityCost: 5\n      },\n      {\n        id: \"research_history\",\n        text: \"Offer to research the true historical ownership\",\n        description: \"Investigate to find the rightful owner\",\n        consequences: [\"You begin investigating the artifact's origins\"],\n        soulCost: 0,\n        sanityCost: 0\n      }\n    ],\n    location: [\"Any\"],\n    categories: [\"political\", \"tribal\"],\n    customActionRequired: true,\n    rarity: \"rare\"\n  },\n\n  {\n    id: \"prophecy_intervention\",\n    title: \"Changing Fate\",\n    description: \"You witness a prophecy beginning to unfold and must decide whether to intervene\",\n    narrativeText: [\n      \"The pieces of a dark prophecy you once heard are starting to come together before your eyes.\",\n      \"A dragon you know is about to make a choice that will lead to exactly what was foretold—tragedy.\",\n      \"You could warn them, change their path, potentially alter the course of fate itself.\",\n      \"But prophecies exist for a reason, and changing them might have unforeseen consequences.\"\n    ],\n    choices: [\n      {\n        id: \"warn_them\",\n        text: \"Warn them about the prophecy\",\n        description: \"Intervene to change fate itself\",\n        consequences: [\"You alter fate, but the future becomes uncertain\"],\n        soulCost: 0,\n        sanityCost: 15\n      },\n      {\n        id: \"let_fate_unfold\",\n        text: \"Let events unfold as prophesied\",\n        description: \"Allow destiny to proceed unchanged\",\n        consequences: [\"The prophecy comes to pass as predicted\"],\n        soulCost: 0,\n        sanityCost: 20\n      }\n    ],\n    location: [\"Any\"],\n    categories: [\"prophecy\", \"moral\"],\n    customActionRequired: true,\n    rarity: \"very_rare\"\n  }\n];\n\n// Function to get random scenarios based on character and game state\nexport function getRandomScenarios(character: Character, gameData: Partial<GameData>, count: number = 10): EnhancedScenarioTemplate[] {\n  const availableScenarios = COMPREHENSIVE_SCENARIOS.filter(scenario => {\n    // Check requirements\n    if (scenario.requirements && !scenario.requirements(character)) {\n      return false;\n    }\n    \n    // Filter by type based on character abilities\n    if (scenario.type === 'ANIMUS' && !character.isAnimus) {\n      return false;\n    }\n    \n    if (scenario.type === 'MINDREADING' && \n        !character.tribalPowers.includes('Mind Reading') && \n        !character.specialPowers.includes('Enhanced Mind Reading')) {\n      return false;\n    }\n    \n    if (scenario.type === 'PROPHECY' && \n        !character.tribalPowers.includes('Prophecy (rare)') && \n        !character.specialPowers.includes('Enhanced Prophecy') &&\n        !character.specialPowers.includes('Foresight')) {\n      return false;\n    }\n    \n    return true;\n  });\n  \n  // Weight-based selection\n  const weightedScenarios: EnhancedScenarioTemplate[] = [];\n  availableScenarios.forEach(scenario => {\n    for (let i = 0; i < scenario.weight; i++) {\n      weightedScenarios.push(scenario);\n    }\n  });\n  \n  // Shuffle and return requested count\n  const shuffled = weightedScenarios.sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n}\n\n// Convert enhanced scenario to standard scenario format\nexport function convertToStandardScenario(template: EnhancedScenarioTemplate, gameData: Partial<GameData>): Scenario {\n  return {\n    id: template.id,\n    title: template.title,\n    description: template.description,\n    narrativeText: template.narrativeText,\n    choices: template.choices.map(choice => ({\n      ...choice,\n      requirements: choice.requirements || []\n    })),\n    type: template.type.toLowerCase() as any,\n    location: gameData.location || \"Unknown Location\",\n    timeOfDay: gameData.timeInfo || \"Midday\",\n    weather: \"Clear skies\"\n  };\n}\n\nexport { EnhancedScenarioTemplate };","size_bytes":30507},"client/src/lib/intelligent-action-processor.ts":{"content":"import { Character, GameData, InventoryItem, Scenario, Choice } from \"@shared/schema\";\nimport { generateEnhancedScenario } from \"./enhanced-scenario-system\";\nimport { generateScenario } from \"./scenario-generator-final\";\n\ntype ActionType = 'social' | 'magical' | 'combat' | 'item_usage' | 'exploration' | 'stealth' | 'diplomatic';\n\ninterface ItemUsageContext {\n  triggersEnchantment: boolean;\n  enchantmentComplexity: 'simple' | 'moderate' | 'complex';\n  expectedEffect: string;\n  itemRelevant: boolean;\n}\n\ninterface ActionAnalysis {\n  actionType: ActionType;\n  magicalNature: boolean;\n  destructive: boolean;\n  complexity: 'simple' | 'moderate' | 'complex';\n  consumesItem: boolean;\n  itemContext?: ItemUsageContext;\n  rawAction: string;\n}\n\nexport interface ProcessedCustomAction {\n  actionResult: string;\n  nextScenario: Scenario;\n  consequences: string[];\n  itemConsumed?: boolean;\n  soulCost: number;\n  sanityCost: number;\n  achievementUnlocked?: string;\n}\n\nexport class IntelligentActionProcessor {\n  \n  static processCustomAction(\n    action: string,\n    character: Character,\n    gameData: GameData,\n    selectedItem?: InventoryItem\n  ): ProcessedCustomAction {\n    \n    // Analyze the action to understand intent\n    const actionAnalysis = this.analyzeAction(action, selectedItem);\n    \n    // Generate contextual result based on action analysis\n    const actionResult = this.generateContextualResult(actionAnalysis, character, gameData, selectedItem);\n    \n    // Determine consequences based on action type and character state\n    const consequences = this.determineConsequences(actionAnalysis, character, selectedItem);\n    \n    // Calculate costs based on action complexity and magical nature\n    const costs = this.calculateActionCosts(actionAnalysis, character, selectedItem);\n    \n    // Generate next scenario that continues the story based on what happened\n    const nextScenario = this.generateFollowUpScenario(actionAnalysis, actionResult, character, gameData);\n    \n    // Check for achievements\n    const achievement = this.checkForAchievements(actionAnalysis, character);\n    \n    return {\n      actionResult,\n      nextScenario,\n      consequences,\n      itemConsumed: actionAnalysis.consumesItem,\n      soulCost: costs.soulCost,\n      sanityCost: costs.sanityCost,\n      achievementUnlocked: achievement\n    };\n  }\n\n  private static analyzeAction(action: string, item?: InventoryItem): ActionAnalysis {\n    const lowerAction = action.toLowerCase();\n    \n    // Detect action type based on keywords and context\n    let actionType: ActionType = 'social';\n    let magicalNature = false;\n    let destructive = false;\n    let consumesItem = false;\n    let complexity: 'simple' | 'moderate' | 'complex' = 'simple';\n    \n    // Magic-related keywords\n    if (this.containsKeywords(lowerAction, ['enchant', 'spell', 'magic', 'animus', 'curse', 'bewitch'])) {\n      actionType = 'magical';\n      magicalNature = true;\n      complexity = 'moderate';\n    }\n    \n    // Combat/violence keywords\n    else if (this.containsKeywords(lowerAction, ['attack', 'fight', 'kill', 'destroy', 'battle', 'strike', 'claw', 'bite'])) {\n      actionType = 'combat';\n      destructive = true;\n    }\n    \n    // Item usage keywords\n    else if (this.containsKeywords(lowerAction, ['use', 'activate', 'break', 'smash', 'trigger', 'open', 'read']) && item) {\n      actionType = 'item_usage';\n      if (this.containsKeywords(lowerAction, ['break', 'smash', 'destroy', 'shatter'])) {\n        destructive = true;\n        consumesItem = true;\n      }\n    }\n    \n    // Exploration keywords\n    else if (this.containsKeywords(lowerAction, ['explore', 'search', 'investigate', 'look', 'examine', 'scout'])) {\n      actionType = 'exploration';\n    }\n    \n    // Stealth keywords\n    else if (this.containsKeywords(lowerAction, ['sneak', 'hide', 'camouflage', 'invisible', 'stealth'])) {\n      actionType = 'stealth';\n    }\n    \n    // Diplomatic keywords\n    else if (this.containsKeywords(lowerAction, ['talk', 'speak', 'negotiate', 'convince', 'persuade', 'ask', 'tell'])) {\n      actionType = 'diplomatic';\n    }\n    \n    // Check for catastrophic actions\n    if (this.containsKeywords(lowerAction, ['plague', 'apocalypse', 'genocide', 'destroy world', 'kill everyone', 'end all life'])) {\n      complexity = 'complex';\n      destructive = true;\n      magicalNature = true;\n    }\n    \n    // Analyze item context if present\n    let itemContext: ItemUsageContext | undefined;\n    if (item) {\n      itemContext = this.analyzeItemUsage(action, item);\n      if (itemContext.triggersEnchantment) {\n        magicalNature = true;\n        complexity = itemContext.enchantmentComplexity;\n      }\n    }\n    \n    return {\n      actionType,\n      magicalNature,\n      destructive,\n      complexity,\n      consumesItem,\n      itemContext,\n      rawAction: action\n    };\n  }\n  \n  private static analyzeItemUsage(action: string, item: InventoryItem): ItemUsageContext {\n    const lowerAction = action.toLowerCase();\n    const itemName = item.name.toLowerCase();\n    const enchantments = item.enchantments.map(e => e.toLowerCase());\n    \n    // Check if action would trigger enchantments\n    let triggersEnchantment = false;\n    let enchantmentComplexity: 'simple' | 'moderate' | 'complex' = 'simple';\n    let expectedEffect = '';\n    \n    // Look for breaking/activation keywords that would trigger enchanted effects\n    if (this.containsKeywords(lowerAction, ['break', 'activate', 'use', 'trigger', 'smash', 'shatter']) && enchantments.length > 0) {\n      triggersEnchantment = true;\n      \n      // Analyze enchantment for complexity and effects\n      for (const enchantment of enchantments) {\n        if (this.containsKeywords(enchantment, ['plague', 'death', 'kill', 'destroy', 'apocalypse'])) {\n          enchantmentComplexity = 'complex';\n          expectedEffect = `The ${item.name} unleashes its dark enchantment: ${enchantment}`;\n        } else if (this.containsKeywords(enchantment, ['curse', 'harm', 'poison', 'pain'])) {\n          enchantmentComplexity = 'moderate';\n          expectedEffect = `The ${item.name} activates its harmful magic: ${enchantment}`;\n        } else {\n          expectedEffect = `The ${item.name} triggers its enchantment: ${enchantment}`;\n        }\n      }\n    }\n    \n    return {\n      triggersEnchantment,\n      enchantmentComplexity,\n      expectedEffect,\n      itemRelevant: lowerAction.includes(itemName) || this.containsKeywords(lowerAction, ['use', 'with'])\n    };\n  }\n  \n  private static generateContextualResult(\n    analysis: ActionAnalysis,\n    character: Character,\n    gameData: GameData,\n    item?: InventoryItem\n  ): string {\n    // Enhanced contextual responses that work for ALL scenario types\n    const location = gameData?.location || 'unknown location';\n    const characterName = character?.name || 'the dragon';\n    const rawAction = analysis.rawAction;\n    \n    // Get current scenario context if available\n    const currentScenario = gameData?.currentScenario;\n    const scenarioType = currentScenario?.type || 'normal';\n    \n    // Generate result based on action type with comprehensive responses\n    let baseResult: string;\n    \n    // If using an enchanted item with specific effects\n    if (analysis.itemContext?.triggersEnchantment && item) {\n      return this.generateEnchantedItemResult(analysis, character, gameData, item);\n    }\n    \n    // Generate result based on action type with enhanced scenario awareness\n    switch (analysis.actionType) {\n      case 'magical':\n        baseResult = this.generateMagicalResult(analysis, character, gameData);\n        break;\n      \n      case 'combat':\n        baseResult = this.generateCombatResult(analysis, character, gameData);\n        break;\n      \n      case 'item_usage':\n        baseResult = this.generateItemUsageResult(analysis, character, gameData, item);\n        break;\n      \n      case 'exploration':\n        baseResult = this.generateExplorationResult(analysis, character, gameData);\n        break;\n      \n      case 'stealth':\n        baseResult = this.generateStealthResult(analysis, character, gameData);\n        break;\n      \n      case 'diplomatic':\n        baseResult = this.generateDiplomaticResult(analysis, character, gameData);\n        break;\n      \n      default:\n        baseResult = this.generateSocialResult(analysis, character, gameData);\n        break;\n    }\n    \n    // Add scenario-specific context to ALL action results\n    return this.addScenarioContextToResult(baseResult, scenarioType, currentScenario, analysis, character);\n  }\n  \n  private static generateEnchantedItemResult(\n    analysis: ActionAnalysis,\n    character: Character,\n    gameData: GameData,\n    item: InventoryItem\n  ): string {\n    \n    const enchantmentEffect = analysis.itemContext!.expectedEffect;\n    \n    // Handle catastrophic enchantments (like plague sticks)\n    if (analysis.complexity === 'complex' && this.containsKeywords(enchantmentEffect.toLowerCase(), ['plague', 'death', 'kill'])) {\n      return `You ${analysis.rawAction.toLowerCase()}. ${enchantmentEffect}\n      \nThe moment the ${item.name} breaks, a sickly green mist erupts from the fragments. The ancient curse contained within spreads rapidly across the land.\n\nWithin hours, reports flood in from across Pyrrhia - dragons are falling ill with a mysterious plague. The symptoms are unlike anything seen before: scales turning black, breathing becoming labored, and an unnatural weakness spreading through entire tribes.\n\nYou realize with horror that your action has unleashed devastation upon the world. The plague spreads faster than wildfire, claiming roughly half the population of each tribe before scholars and healers can even begin to understand it.\n\nThe guilt weighs heavily on your soul as you watch the consequences of your choice unfold. Entire families are torn apart, kingdoms fall into chaos, and the balance of power across both continents shifts dramatically.\n\nWhat have you done?`;\n    }\n    \n    // Handle moderate enchantments\n    if (analysis.complexity === 'moderate') {\n      return `You ${analysis.rawAction.toLowerCase()}. ${enchantmentEffect}\n      \nThe magical energies stored within the ${item.name} burst forth as intended. The enchantment activates with a shimmer of otherworldly light.\n\n${this.generateMagicalConsequenceNarrative(character, gameData, 'moderate')}`;\n    }\n    \n    // Handle simple enchantments\n    return `You ${analysis.rawAction.toLowerCase()}. ${enchantmentEffect}\n    \nThe ${item.name} glows briefly as its magic activates. ${this.generateMagicalConsequenceNarrative(character, gameData, 'simple')}`;\n  }\n  \n  private static generateMagicalResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    if (!character.isAnimus) {\n      return `You attempt to ${analysis.rawAction.toLowerCase()}, but you lack animus magic. Your efforts produce no magical effect, though your determination is noted by those around you.`;\n    }\n    \n    const corruption = character.soulCorruptionStage;\n    const magicalPower = this.getMagicalPowerLevel(character);\n    \n    if (analysis.complexity === 'complex') {\n      return `You channel your animus magic to ${analysis.rawAction.toLowerCase()}. \n      \nThe immense power flows through you, but such magic comes at a terrible cost. You feel a significant piece of your soul tear away as the spell takes effect.\n\n${this.generateMagicalConsequenceNarrative(character, gameData, 'complex')}\n\nOther dragons nearby sense the disturbance in magical energies. Your power level has not gone unnoticed.`;\n    }\n    \n    return `You use your animus magic to ${analysis.rawAction.toLowerCase()}. The magic flows through you with ${corruption === 'Normal' ? 'pure energy' : 'dark, twisted power'}.\n\n${this.generateMagicalConsequenceNarrative(character, gameData, analysis.complexity)}`;\n  }\n  \n  private static generateCombatResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    const tribalPowers = character.tribalPowers.join(', ');\n    \n    return `You ${analysis.rawAction.toLowerCase()}!\n\nUsing your ${character.tribe} abilities${tribalPowers ? ` (${tribalPowers})` : ''}, you engage in combat. Your ${character.strength >= 15 ? 'powerful' : character.strength >= 10 ? 'adequate' : 'limited'} physical capabilities serve you ${character.strength >= 15 ? 'well' : character.strength >= 10 ? 'adequately' : 'poorly'}.\n\n${this.generateCombatOutcome(character, gameData, analysis.destructive)}`;\n  }\n  \n  private static generateItemUsageResult(analysis: ActionAnalysis, character: Character, gameData: GameData, item?: InventoryItem): string {\n    if (!item) {\n      return `You attempt to ${analysis.rawAction.toLowerCase()}, but you don't have the necessary item to complete this action.`;\n    }\n    \n    if (analysis.consumesItem) {\n      return `You ${analysis.rawAction.toLowerCase()}.\n\nThe ${item.name} ${this.containsKeywords(analysis.rawAction.toLowerCase(), ['break', 'smash', 'shatter']) ? 'breaks apart' : 'is consumed'} in the process. ${item.description}\n\n${this.generateItemUsageConsequence(item, character, gameData)}`;\n    }\n    \n    return `You ${analysis.rawAction.toLowerCase()}.\n\nThe ${item.name} proves useful for your task. ${item.description}\n\n${this.generateItemUsageConsequence(item, character, gameData)}`;\n  }\n  \n  private static generateExplorationResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    const location = gameData.location;\n    const discoveries = [\n      \"a hidden passage behind ancient tapestries\",\n      \"mysterious scratches on the wall that might be a code\",\n      \"a loose stone that conceals a small chamber\",\n      \"old scrolls tucked away in forgotten corners\",\n      \"evidence of someone else having been here recently\"\n    ];\n    \n    const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];\n    \n    return `You ${analysis.rawAction.toLowerCase()} in ${location}.\n\nYour careful investigation reveals ${discovery}. Your ${character.intelligence >= 15 ? 'keen intellect' : 'observational skills'} help you notice details others might miss.\n\n${this.generateExplorationConsequence(discovery, character, gameData)}`;\n  }\n  \n  private static generateStealthResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    const hasStealthPowers = (character.tribalPowers || []).includes('Color-changing scales') || \n                           (character.tribalPowers || []).includes('Night camouflage');\n    \n    if (hasStealthPowers) {\n      return `You ${analysis.rawAction.toLowerCase()}.\n\nYour natural ${character.tribe} stealth abilities make you nearly invisible. Moving like a shadow, you successfully avoid detection.\n\n${this.generateStealthConsequence(true, character, gameData)}`;\n    }\n    \n    const stealthSuccess = character.intelligence >= 12;\n    return `You attempt to ${analysis.rawAction.toLowerCase()}.\n\n${stealthSuccess ? \n  'Your careful movements and timing allow you to remain undetected.' : \n  'Despite your best efforts, you make too much noise and risk being discovered.'}\n\n${this.generateStealthConsequence(stealthSuccess, character, gameData)}`;\n  }\n  \n  private static generateDiplomaticResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    const charisma = character.charisma;\n    const tribe = character.tribe;\n    \n    return `You ${analysis.rawAction.toLowerCase()}.\n\nYour ${charisma >= 15 ? 'compelling words and natural charm' : charisma >= 10 ? 'earnest approach' : 'awkward but sincere attempt'} ${charisma >= 10 ? 'resonates with' : 'fails to fully convince'} your audience.\n\nAs a ${tribe} dragon, your tribal background ${this.getDiplomaticAdvantage(tribe)} in this conversation.\n\n${this.generateDiplomaticConsequence(charisma >= 10, character, gameData)}`;\n  }\n  \n  private static generateSocialResult(analysis: ActionAnalysis, character: Character, gameData: GameData): string {\n    return `You ${analysis.rawAction.toLowerCase()}.\n\nYour action draws various reactions from those around you. Some dragons ${character.charisma >= 12 ? 'seem impressed by your initiative' : 'watch with curiosity'}.\n\n${this.generateSocialConsequence(character, gameData)}`;\n  }\n  \n  // Add scenario-specific context to make custom actions more immersive\n  private static addScenarioContextToResult(\n    baseResult: string,\n    scenarioType: string,\n    currentScenario: any,\n    analysis: ActionAnalysis,\n    character: Character\n  ): string {\n    const scenarioSpecificAdditions = {\n      'magical': `\\n\\nThe magical energies in the air seem to respond to your action, creating ripples of power that extend beyond what you intended.`,\n      'prophetic': `\\n\\nYour action triggers a brief flash of prophetic insight - you glimpse potential futures branching from this moment.`,\n      'tribal': `\\n\\nOther dragons of your tribe take notice of your actions, their reactions varying based on tribal customs and your standing among them.`,\n      'political': `\\n\\nYour choice here could have far-reaching political implications for the relationships between tribes.`,\n      'romantic': `\\n\\nThe romantic tension in the air shifts as your actions change the dynamics of the relationships around you.`,\n      'learning': `\\n\\nThis experience teaches you something new about yourself and the world around you, adding to your growing wisdom.`,\n      'combat': `\\n\\nThe sounds of battle echo around you as your actions influence the tide of conflict.`,\n      'mystery': `\\n\\nYour action reveals new clues about the mysteries surrounding this place, but also raises additional questions.`\n    };\n    \n    // Add scenario-specific context if available\n    const additionalContext = scenarioSpecificAdditions[scenarioType as keyof typeof scenarioSpecificAdditions] || \n      `\\n\\nThe consequences of your action ripple outward, affecting the world around you in ways both seen and unseen.`;\n    \n    // Add Wings of Fire lore context based on character's situation\n    let loreContext = '';\n    if (character.isAnimus && analysis.magicalNature) {\n      loreContext = `\\n\\nAs an animus dragon, you feel the familiar yet dangerous pull of unlimited power. Every use of magic leaves its mark on your soul.`;\n    } else if ((character.tribalPowers || []).includes('Mind Reading') && scenarioType === 'social') {\n      loreContext = `\\n\\nYour mind reading abilities pick up the emotional responses of those around you, giving you insight into their true feelings about your actions.`;\n    }\n    \n    return baseResult + additionalContext + loreContext;\n  }\n\n  private static generateFollowUpScenario(\n    analysis: ActionAnalysis,\n    actionResult: string,\n    character: Character,\n    gameData: GameData\n  ): Scenario {\n    \n    // Create a scenario that directly follows from the action taken\n    let scenarioType: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic' = 'mundane';\n    \n    if (analysis.magicalNature || analysis.complexity === 'complex') {\n      scenarioType = 'magical';\n    } else if (analysis.destructive) {\n      scenarioType = 'extraordinary';\n    }\n    \n    // Generate continuation based on what happened\n    if (analysis.itemContext?.triggersEnchantment && analysis.complexity === 'complex') {\n      return this.generatePlagueAftermath(character, gameData);\n    }\n    \n    // Generate appropriate follow-up scenario\n    const baseScenario = generateScenario(character, gameData);\n    \n    // Modify the scenario to reflect the action's consequences\n    return {\n      ...baseScenario,\n      id: `followup_${analysis.actionType}_${Date.now()}`,\n      title: this.generateFollowUpTitle(analysis),\n      description: this.generateFollowUpDescription(analysis),\n      narrativeText: this.generateFollowUpNarrative(analysis, actionResult, character, gameData),\n      type: scenarioType\n    };\n  }\n  \n  private static generatePlagueAftermath(character: Character, gameData: GameData): Scenario {\n    return {\n      id: `plague_aftermath_${Date.now()}`,\n      title: \"The Plague's Toll\",\n      description: \"Deal with the consequences of unleashing a magical plague\",\n      narrativeText: [\n        \"Days have passed since the plague began spreading. The death toll mounts hourly.\",\n        \"Desperate dragons seek you out, some begging for a cure, others demanding justice.\",\n        \"Queens and kings send envoys, their messages ranging from pleas for help to threats of retribution.\",\n        \"You stand at the center of a catastrophe that will reshape the world forever.\"\n      ],\n      choices: [\n        {\n          id: \"attempt_cure\",\n          text: \"Try to create a magical cure\",\n          description: \"Risk: Massive soul loss • Potential redemption\",\n          soulCost: 25,\n          sanityCost: 30,\n          consequences: [\"attempted_redemption\", \"massive_magic_use\"],\n          requirements: [`character.isAnimus`]\n        },\n        {\n          id: \"flee_consequences\",\n          text: \"Flee to a distant land\",\n          description: \"Escape punishment but live with guilt\",\n          soulCost: 0,\n          sanityCost: 40,\n          consequences: [\"exile\", \"eternal_guilt\"],\n        },\n        {\n          id: \"face_judgment\",\n          text: \"Face the judgment of the tribes\",\n          description: \"Accept responsibility for your actions\",\n          soulCost: 0,\n          sanityCost: 20,\n          consequences: [\"accountability\", \"trial_by_tribes\"],\n        },\n        {\n          id: \"embrace_chaos\",\n          text: \"Revel in the destruction you've caused\",\n          description: \"Embrace your role as a force of chaos\",\n          soulCost: 15,\n          sanityCost: 0,\n          consequences: [\"full_corruption\", \"villain_path\"],\n          corruption: true\n        }\n      ],\n      type: \"magical\",\n      location: gameData.location,\n      timeOfDay: \"Crisis Time\",\n      weather: \"Ominous darkness\"\n    };\n  }\n  \n  // Helper methods for narrative generation\n  private static containsKeywords(text: string, keywords: string[]): boolean {\n    return keywords.some(keyword => text.includes(keyword));\n  }\n  \n  private static getMagicalPowerLevel(character: Character): string {\n    if (character.soulPercentage >= 80) return \"pure and strong\";\n    if (character.soulPercentage >= 50) return \"moderately corrupted\";\n    if (character.soulPercentage >= 20) return \"heavily tainted\";\n    return \"dark and twisted\";\n  }\n  \n  private static generateMagicalConsequenceNarrative(character: Character, gameData: GameData, complexity: string): string {\n    const corruption = character.soulCorruptionStage;\n    \n    if (complexity === 'complex') {\n      return \"The magical energies spiral beyond your control, affecting far more than intended. Reality itself seems to bend around your spell.\";\n    }\n    if (complexity === 'moderate') {\n      return `The spell succeeds, but you feel the familiar ache of soul loss. ${corruption !== 'Normal' ? 'The darkness within whispers approvingly.' : ''}`;\n    }\n    return \"The magic flows smoothly, accomplishing your goal with minimal strain.\";\n  }\n  \n  private static generateCombatOutcome(character: Character, gameData: GameData, destructive: boolean): string {\n    const success = character.strength >= 12;\n    if (destructive && success) {\n      return \"Your attack proves devastatingly effective. Your opponent is seriously injured.\";\n    }\n    if (success) {\n      return \"You emerge victorious from the confrontation, having proven your combat prowess.\";\n    }\n    return \"The fight doesn't go as planned. You struggle against your opponent's superior skill.\";\n  }\n  \n  private static generateItemUsageConsequence(item: InventoryItem, character: Character, gameData: GameData): string {\n    if (item.type === 'magical_artifact') {\n      return \"The artifact's magic resonates with the ambient magical energies around you.\";\n    }\n    if (item.type === 'enchanted_object') {\n      return \"The enchanted item fulfills its intended purpose, though you sense its power has changed you somehow.\";\n    }\n    return \"The item serves its purpose well, proving its value in this situation.\";\n  }\n  \n  private static generateExplorationConsequence(discovery: string, character: Character, gameData: GameData): string {\n    return `This discovery could prove significant. Your exploration skills have served you well, and you make note of what you've found for future reference.`;\n  }\n  \n  private static generateStealthConsequence(success: boolean, character: Character, gameData: GameData): string {\n    if (success) {\n      return \"Your stealth pays off, allowing you to observe or move without interference. You've gained valuable information or position.\";\n    }\n    return \"Your attempt at stealth partially fails, but you manage to avoid the worst consequences through quick thinking.\";\n  }\n  \n  private static getDiplomaticAdvantage(tribe: string): string {\n    const advantages: Record<string, string> = {\n      'NightWing': 'adds an air of mystery and intelligence',\n      'SeaWing': 'lends credibility through your tribe\\'s diplomatic reputation',\n      'SkyWing': 'commands respect through your tribe\\'s martial tradition',\n      'RainWing': 'brings a calming, peaceful energy',\n      'SandWing': 'provides sharp wit and cunning insight',\n      'IceWing': 'commands attention through regal bearing',\n      'MudWing': 'offers grounded, practical wisdom'\n    };\n    return advantages[tribe] || 'influences the conversation in subtle ways';\n  }\n  \n  private static generateDiplomaticConsequence(success: boolean, character: Character, gameData: GameData): string {\n    if (success) {\n      return \"Your diplomatic approach opens new possibilities and strengthens relationships with those involved.\";\n    }\n    return \"While not entirely successful, your diplomatic attempt prevents the situation from escalating into conflict.\";\n  }\n  \n  private static generateSocialConsequence(character: Character, gameData: GameData): string {\n    return \"Your social interaction has subtle effects on your relationships and standing within the community.\";\n  }\n  \n  private static generateFollowUpTitle(analysis: ActionAnalysis): string {\n    if (analysis.complexity === 'complex') return \"Dealing with the Aftermath\";\n    if (analysis.destructive) return \"Consequences of Violence\";\n    if (analysis.magicalNature) return \"Magical Repercussions\";\n    return \"What Happens Next\";\n  }\n  \n  private static generateFollowUpDescription(analysis: ActionAnalysis): string {\n    return `The results of your action to ${analysis.rawAction.toLowerCase()} create new challenges and opportunities.`;\n  }\n  \n  private static generateFollowUpNarrative(analysis: ActionAnalysis, actionResult: string, character: Character, gameData: GameData): string[] {\n    return [\n      \"Time passes after your recent action.\",\n      \"The consequences begin to unfold in ways you hadn't fully anticipated.\",\n      \"New challenges arise that demand your attention and decision-making.\"\n    ];\n  }\n  \n  private static determineConsequences(analysis: ActionAnalysis, character: Character, item?: InventoryItem): string[] {\n    const consequences: string[] = [];\n    \n    if (analysis.magicalNature) consequences.push('magical_action_taken');\n    if (analysis.destructive) consequences.push('destructive_behavior');\n    if (analysis.consumesItem && item) consequences.push(`item_consumed_${item.id}`);\n    if (analysis.complexity === 'complex') consequences.push('major_action_consequences');\n    \n    return consequences;\n  }\n  \n  private static calculateActionCosts(analysis: ActionAnalysis, character: Character, item?: InventoryItem): { soulCost: number; sanityCost: number } {\n    let soulCost = 0;\n    let sanityCost = 0;\n    \n    if (analysis.magicalNature && character.isAnimus) {\n      switch (analysis.complexity) {\n        case 'simple': soulCost = Math.floor(Math.random() * 3) + 1; break;\n        case 'moderate': soulCost = Math.floor(Math.random() * 8) + 3; break;\n        case 'complex': soulCost = Math.floor(Math.random() * 20) + 15; break;\n      }\n    }\n    \n    if (analysis.destructive) {\n      sanityCost = Math.floor(Math.random() * 15) + 5;\n    }\n    \n    // Item-triggered effects have their own costs\n    if (analysis.itemContext?.triggersEnchantment && item?.soulCostToCreate) {\n      soulCost += Math.floor(item.soulCostToCreate * 0.3); // Partial cost for activation\n    }\n    \n    return { soulCost, sanityCost };\n  }\n  \n  private static checkForAchievements(analysis: ActionAnalysis, character: Character): string | undefined {\n    if (analysis.complexity === 'complex' && analysis.magicalNature) {\n      return \"World Shaper - Performed magic with global consequences\";\n    }\n    if (analysis.actionType === 'magical' && character.soulPercentage < 10) {\n      return \"Dark Magician - Used magic while heavily corrupted\";\n    }\n    return undefined;\n  }\n}\n\n// Supporting interfaces\ninterface ActionAnalysis {\n  actionType: ActionType;\n  magicalNature: boolean;\n  destructive: boolean;\n  complexity: 'simple' | 'moderate' | 'complex';\n  consumesItem: boolean;\n  itemContext?: ItemUsageContext;\n  rawAction: string;\n}\n\ninterface ItemUsageContext {\n  triggersEnchantment: boolean;\n  enchantmentComplexity: 'simple' | 'moderate' | 'complex';\n  expectedEffect: string;\n  itemRelevant: boolean;\n}\n\n// ActionType already defined at the top of file","size_bytes":29396},"client/src/lib/special-events-system.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\nimport { AnimusArtifactSystem } from \"./animus-artifact-system\";\nimport { SpecialPowerScenarioSystem } from \"./special-power-scenarios\";\nimport { LocationSystem } from \"./location-system\";\n\nexport interface SpecialEvent {\n  id: string;\n  type: 'artifact_discovery' | 'mindreading_event' | 'prophecy_event';\n  scenario: Scenario;\n  timestamp: number;\n}\n\nexport interface SpecialEventState {\n  lastArtifactEventTurn: number;\n  lastMindreadingEventTurn: number;\n  lastProphecyEventTurn: number;\n  artifactsDiscovered: number;\n  maxArtifactsPerGame: number;\n}\n\nexport class SpecialEventsSystem {\n  private static readonly ARTIFACT_COOLDOWN_TURNS = 2; // 2 turns between artifacts (original setting)\n  private static readonly MINDREADING_COOLDOWN_TURNS = 10; // 10 turns  \n  private static readonly PROPHECY_COOLDOWN_TURNS = 10; // 10 turns\n  private static readonly ARTIFACT_BASE_CHANCE = 0.05; // 5% chance per turn (original setting)\n  private static readonly SPECIAL_POWER_BASE_CHANCE = 0.12; // 12% chance per turn\n  private static readonly MAX_ARTIFACTS_PER_GAME = 3; // Maximum 3 artifacts per playthrough\n  \n  private static eventState: SpecialEventState = {\n    lastArtifactEventTurn: 0,\n    lastMindreadingEventTurn: 0,\n    lastProphecyEventTurn: 0,\n    artifactsDiscovered: 0,\n    maxArtifactsPerGame: this.MAX_ARTIFACTS_PER_GAME\n  };\n  \n  // Load event state from game data if available\n  static initializeEventState(gameData: GameData): void {\n    const stored = (gameData as any).specialEventState;\n    if (stored) {\n      this.eventState = { ...this.eventState, ...stored };\n    }\n    \n    // Reset artifacts discovered count for new games\n    if (this.eventState.artifactsDiscovered >= this.MAX_ARTIFACTS_PER_GAME) {\n      console.log('Maximum artifacts reached - no more will spawn this game');\n    }\n  }\n  \n  // Save event state to game data\n  static saveEventState(gameData: GameData): void {\n    (gameData as any).specialEventState = { ...this.eventState };\n  }\n  \n  // Method to increment artifacts discovered counter\n  static incrementArtifactsDiscovered(): void {\n    this.eventState.artifactsDiscovered++;\n    console.log(`Artifacts discovered count incremented to: ${this.eventState.artifactsDiscovered}`);\n  }\n  \n  // Method to reset artifacts discovered for new games\n  static resetArtifactsDiscovered(): void {\n    this.eventState.artifactsDiscovered = 0;\n    this.eventState.lastArtifactEventTurn = 0;\n    console.log('Artifacts discovered count reset to 0 for new game');\n  }\n  \n  // Method to reset all event state for new games\n  static resetAllEventState(): void {\n    this.eventState = {\n      lastArtifactEventTurn: 0,\n      lastMindreadingEventTurn: 0,\n      lastProphecyEventTurn: 0,\n      artifactsDiscovered: 0,\n      maxArtifactsPerGame: this.MAX_ARTIFACTS_PER_GAME\n    };\n    console.log('All special event state reset for new game');\n  }\n  \n  static checkForSpecialEvent(character: Character, gameData: GameData): SpecialEvent | null {\n    const currentTurn = gameData.turn;\n    \n    console.log(`Checking special events at turn ${currentTurn}:`);\n    console.log(`- Character abilities: ${character.tribalPowers.join(', ')}, ${character.specialPowers.join(', ')}`);\n    console.log(`- Artifacts discovered: ${this.eventState.artifactsDiscovered}/${this.MAX_ARTIFACTS_PER_GAME}`);\n    console.log(`- Last artifact turn: ${this.eventState.lastArtifactEventTurn}`);\n    console.log(`- Last mindreading turn: ${this.eventState.lastMindreadingEventTurn}`);\n    console.log(`- Last prophecy turn: ${this.eventState.lastProphecyEventTurn}`);\n    \n    // Check what types of events this character can have\n    const hasMindreading = character.tribalPowers.some(p => p.toLowerCase().includes('mind')) ||\n                          character.specialPowers.some(p => p.toLowerCase().includes('mind'));\n    const hasProphecy = character.tribalPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('future') || p.toLowerCase().includes('sight')) ||\n                       character.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight') || p.toLowerCase().includes('future'));\n    \n    console.log(`- Has mindreading: ${hasMindreading}, Has prophecy: ${hasProphecy}`);\n    \n    // Collect eligible event types\n    const eligibleEvents = [];\n    \n    // Re-enable artifact discovery for all players at all locations\n    if (this.canTriggerArtifactEvent(currentTurn) && this.eventState.artifactsDiscovered < this.MAX_ARTIFACTS_PER_GAME) {\n      eligibleEvents.push('artifact');\n      console.log('Artifact discovery enabled - added to eligible events');\n    }\n    \n    // Only check mindreading if character has the ability\n    if (hasMindreading && this.canTriggerMindreadingEvent(character, currentTurn)) {\n      eligibleEvents.push('mindreading');\n    }\n    \n    // Only check prophecy if character has the ability\n    if (hasProphecy && this.canTriggerProphecyEvent(character, currentTurn)) {\n      eligibleEvents.push('prophecy');\n    }\n    \n    console.log(`Eligible events: ${eligibleEvents.join(', ')}`);\n    \n    // Try each eligible event type\n    for (const eventType of eligibleEvents) {\n      let event = null;\n      \n      switch (eventType) {\n        case 'artifact':\n          console.log('Attempting to generate artifact event...');\n          event = this.tryGenerateArtifactEvent(character, gameData, currentTurn);\n          if (event) {\n            this.eventState.lastArtifactEventTurn = currentTurn;\n            // Don't increment discovered count until actually collected\n            console.log('Artifact event generated successfully!');\n            return event;\n          }\n          break;\n          \n        case 'mindreading':\n          console.log('Attempting to generate mindreading event...');\n          event = this.tryGenerateMindreadingEvent(character, gameData, currentTurn);\n          if (event) {\n            this.eventState.lastMindreadingEventTurn = currentTurn;\n            console.log('Mindreading event generated successfully!');\n            return event;\n          }\n          break;\n          \n        case 'prophecy':\n          console.log('Attempting to generate prophecy event...');\n          event = this.tryGenerateProphecyEvent(character, gameData, currentTurn);\n          if (event) {\n            this.eventState.lastProphecyEventTurn = currentTurn;\n            console.log('Prophecy event generated successfully!');\n            return event;\n          }\n          break;\n      }\n    }\n    \n    console.log('No special events triggered this turn');\n    return null;\n  }\n  \n  private static canTriggerArtifactEvent(currentTurn: number): boolean {\n    // Reduced cooldown and allow artifacts more frequently\n    const hasPassedCooldown = (currentTurn - this.eventState.lastArtifactEventTurn) >= Math.max(3, this.ARTIFACT_COOLDOWN_TURNS / 2);\n    return hasPassedCooldown || currentTurn % 10 === 0; // Always allow on multiples of 10\n  }\n  \n  private static canTriggerMindreadingEvent(character: Character, currentTurn: number): boolean {\n    const hasMindreading = character.tribalPowers.some(p => p.toLowerCase().includes('mind')) ||\n                          character.specialPowers.some(p => p.toLowerCase().includes('mind'));\n    // Only check on turns divisible by 10\n    if (currentTurn % 10 === 0 && hasMindreading) {\n      return (currentTurn - this.eventState.lastMindreadingEventTurn) >= this.MINDREADING_COOLDOWN_TURNS;\n    }\n    return false;\n  }\n  \n  private static canTriggerProphecyEvent(character: Character, currentTurn: number): boolean {\n    const hasProphecy = character.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) ||\n                       character.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight'));\n    // Only check on turns divisible by 10\n    if (currentTurn % 10 === 0 && hasProphecy) {\n      return (currentTurn - this.eventState.lastProphecyEventTurn) >= this.PROPHECY_COOLDOWN_TURNS;\n    }\n    return false;\n  }\n  \n  private static tryGenerateArtifactEvent(character: Character, gameData: GameData, turn: number): SpecialEvent | null {\n    const currentLocation = LocationSystem.getCurrentLocation(gameData);\n    if (!currentLocation) return null;\n    \n    // Base chance modified by location exploration and character traits\n    let chance = this.ARTIFACT_BASE_CHANCE * 3; // Significantly increase base chance\n    \n    // Higher chance for first time in location\n    const visitedBefore = gameData.explorationLog && gameData.explorationLog.some(log => log.location === currentLocation.name);\n    if (!visitedBefore) {\n      chance *= 2;\n    }\n    \n    // Higher chance for curious characters\n    if (character.traits && character.traits.includes('Curious')) {\n      chance *= 1.5;\n    }\n    \n    // Higher chance for animus dragons\n    if (character.isAnimus) {\n      chance *= 2;\n    }\n    \n    // Guarantee discovery every 10th turn (if under limit)\n    const isEvery10Turns = turn % 10 === 0;\n    \n    // Random chance based on calculated probability or guarantee\n    const shouldGenerate = isEvery10Turns || Math.random() < Math.min(0.9, chance);\n      \n    console.log(`Artifact generation - Turn: ${turn}, Location: ${currentLocation.name}, Chance: ${(chance * 100).toFixed(1)}%, Should generate: ${shouldGenerate}`);\n    console.log(`Current artifacts discovered: ${this.eventState.artifactsDiscovered}/${this.MAX_ARTIFACTS_PER_GAME}`);\n    \n    if (shouldGenerate) {\n      const artifact = AnimusArtifactSystem.generateArtifactDiscovery(character, gameData);\n      if (!artifact) return null;\n    \n      // Create scenario for artifact discovery with collection choices\n      const scenario: Scenario = {\n        id: `artifact_discovery_${artifact.id}`,\n        title: `Discovery: ${artifact.name}`,\n        description: `You have discovered a mysterious animus artifact!`,\n        narrativeText: [\n          `While exploring ${currentLocation.name}, you stumble upon something extraordinary...`,\n          artifact.discoveryScenario,\n          `The artifact radiates ${artifact.cursed ? 'dark' : 'ancient'} magical energy. What do you do?`\n        ],\n        choices: [\n          {\n            id: `collect_${artifact.id}`,\n            text: `Collect the ${artifact.name}`,\n            description: \"Take the artifact and add it to your inventory\",\n            soulCost: 0,\n            sanityCost: 2,\n            consequences: [`You carefully collect the ${artifact.name}`],\n            corruption: false\n          },\n          {\n            id: `examine_${artifact.id}`,\n            text: \"Examine it closely but don't touch\",\n            description: \"Study the artifact without collecting it\",\n            soulCost: 0,\n            sanityCost: 1,\n            consequences: [\"You study the artifact carefully but choose not to take it\"],\n            corruption: false\n          },\n          {\n            id: `ignore_${artifact.id}`,\n            text: \"Leave it alone\",\n            description: \"Walk away from the dangerous artifact\",\n            soulCost: 0,\n            sanityCost: 0,\n            consequences: [\"You decide the artifact is too dangerous and leave it behind\"],\n            corruption: false\n          }\n        ],\n        type: 'magical',\n        location: currentLocation.name,\n        timeOfDay: 'afternoon',\n        weather: 'mysterious'\n      };\n      \n      // Store artifact data for potential collection\n      (gameData as any).pendingArtifact = artifact;\n      console.log(`Stored pending artifact: ${artifact.name} with ID: ${artifact.id}`);\n      \n      // Create a better scenario that includes the artifact's usage options as future choices\n      const usagePreview = artifact.usageOptions.slice(0, 2).map(opt => \n        `• ${opt.text}: ${opt.outcome.substring(0, 80)}...`\n      ).join('\\n');\n      \n      return {\n        id: `artifact_${artifact.id}`,\n        type: 'artifact_discovery',\n        scenario,\n        timestamp: turn\n      };\n    }\n    \n    return null;\n  }\n  \n  private static tryGenerateMindreadingEvent(character: Character, gameData: GameData, turn: number): SpecialEvent | null {\n    // For every 10th turn, increase chance significantly\n    const isEvery10Turns = turn % 10 === 0;\n    const chance = isEvery10Turns ? this.SPECIAL_POWER_BASE_CHANCE * 4 : this.SPECIAL_POWER_BASE_CHANCE;\n    \n    if (Math.random() > chance) return null;\n    \n    const mindreadingScenario = SpecialPowerScenarioSystem.getRandomScenario(character, 'mindreading');\n    if (!mindreadingScenario) return null;\n    \n    const scenario: Scenario = {\n      id: mindreadingScenario.id,\n      title: mindreadingScenario.title,\n      description: \"Your mind reading abilities have revealed something unexpected...\",\n      narrativeText: [\n        \"Your telepathic senses suddenly sharpen, picking up thoughts you weren't expecting...\",\n        mindreadingScenario.prompt,\n        \"The mental connection feels strong. How do you proceed?\"\n      ],\n      choices: mindreadingScenario.options.map(option => ({\n        id: option.id,\n        text: option.text,\n        description: `${option.outcome.substring(0, 100)}...`,\n        soulCost: option.soulCost,\n        sanityCost: option.sanityCost,\n        consequences: option.consequences,\n        corruption: option.corruption,\n        requiresModal: 'mindreading'\n      })),\n      type: 'tribal',\n      location: gameData.location,\n      timeOfDay: 'evening',\n      weather: 'tense'\n    };\n    \n    return {\n      id: `mindreading_${mindreadingScenario.id}`,\n      type: 'mindreading_event',\n      scenario,\n      timestamp: turn\n    };\n  }\n  \n  private static tryGenerateProphecyEvent(character: Character, gameData: GameData, turn: number): SpecialEvent | null {\n    // For every 10th turn, increase chance significantly\n    const isEvery10Turns = turn % 10 === 0;\n    const chance = isEvery10Turns ? this.SPECIAL_POWER_BASE_CHANCE * 4 : this.SPECIAL_POWER_BASE_CHANCE;\n    \n    if (Math.random() > chance) return null;\n    \n    const prophecyScenario = SpecialPowerScenarioSystem.getRandomScenario(character, 'prophecy');\n    if (!prophecyScenario) return null;\n    \n    const scenario: Scenario = {\n      id: prophecyScenario.id,\n      title: prophecyScenario.title,\n      description: \"A vision of the future comes to you unbidden...\",\n      narrativeText: [\n        \"Your prophetic abilities activate without warning, showing you glimpses of what may come to pass...\",\n        prophecyScenario.prompt,\n        \"The vision fades, but its meaning weighs heavily on your mind. What path will you choose?\"\n      ],\n      choices: prophecyScenario.options.map(option => ({\n        id: option.id,\n        text: option.text,\n        description: `${option.outcome.substring(0, 100)}...`,\n        soulCost: option.soulCost,\n        sanityCost: option.sanityCost,\n        consequences: option.consequences,\n        corruption: option.corruption,\n        requiresModal: 'prophecy'\n      })),\n      type: 'prophetic',\n      location: gameData.location,\n      timeOfDay: 'night',\n      weather: 'ominous'\n    };\n    \n    return {\n      id: `prophecy_${prophecyScenario.id}`,\n      type: 'prophecy_event',\n      scenario,\n      timestamp: turn\n    };\n  }\n  \n  static processSpecialEventChoice(\n    event: SpecialEvent,\n    choiceId: string,\n    character: Character,\n    gameData: GameData\n  ): {\n    newCharacter: Character;\n    newGameData: GameData;\n    outcome: string;\n    consequences: string[];\n  } {\n    const choice = event.scenario.choices.find(c => c.id === choiceId);\n    if (!choice) {\n      throw new Error(`Invalid choice ${choiceId} for special event ${event.id}`);\n    }\n    \n    switch (event.type) {\n      case 'artifact_discovery':\n        // Extract artifact ID from event ID (format: artifact_discovery_<id>)\n        const artifactId = event.id.replace('artifact_discovery_', '');\n        const artifact = AnimusArtifactSystem.getArtifactById(artifactId);\n        if (artifact && (choiceId.startsWith('collect_') || choiceId === 'claim_artifact' || choiceId === 'take_artifact' || choiceId === 'collect_artifact')) {\n          // Collect the artifact - add to inventory\n          const newCharacter = { ...character };\n          const newGameData = { ...gameData };\n          \n          // Add artifact to inventory\n          if (!newGameData.inventory) newGameData.inventory = [];\n          newGameData.inventory.push({\n            id: artifact.id,\n            name: artifact.name,\n            type: 'magical_artifact',\n            description: artifact.description,\n            enchantments: [artifact.cursed ? 'Cursed' : 'Blessed'],\n            rarity: 'legendary',\n            isActive: true,\n            canGiveAway: false\n          });\n          \n          // Update event state\n          this.eventState.artifactsDiscovered += 1;\n          this.eventState.lastArtifactEventTurn = gameData.turn;\n          \n          // Apply soul corruption if cursed\n          if (artifact.cursed) {\n            newCharacter.soulPercentage = Math.max(0, character.soulPercentage - 15);\n          }\n          \n          newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - choice.sanityCost);\n          \n          return {\n            newCharacter,\n            newGameData,\n            outcome: `You have successfully collected the ${artifact.name}! It has been added to your inventory.`,\n            consequences: [`You carefully collect the ${artifact.name}`, `The artifact's power resonates with your being`]\n          };\n        } else if (artifact) {\n          // Handle other choices (examine, ignore)\n          const newCharacter = { ...character };\n          const newGameData = { ...gameData };\n          \n          newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - choice.sanityCost);\n          \n          return {\n            newCharacter,\n            newGameData,\n            outcome: choice.description,\n            consequences: choice.consequences\n          };\n        }\n        break;\n        \n      case 'mindreading_event':\n      case 'prophecy_event':\n        const scenarioType = event.type === 'mindreading_event' ? 'mindreading' : 'prophecy';\n        const specialScenario = SpecialPowerScenarioSystem.getApplicableScenarios(character, scenarioType)\n          .find(s => s.id === event.scenario.id);\n        if (specialScenario) {\n          return SpecialPowerScenarioSystem.processSpecialPowerChoice(specialScenario, choiceId, character, gameData);\n        }\n        break;\n    }\n    \n    // Fallback processing\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n    \n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - choice.soulCost);\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - choice.sanityCost);\n    \n    return {\n      newCharacter,\n      newGameData,\n      outcome: choice.description,\n      consequences: choice.consequences\n    };\n  }\n  \n  static resetEventState(): void {\n    this.eventState = {\n      lastArtifactEventTurn: 0,\n      lastMindreadingEventTurn: 0,\n      lastProphecyEventTurn: 0,\n      artifactsDiscovered: 0,\n      maxArtifactsPerGame: this.MAX_ARTIFACTS_PER_GAME\n    };\n  }\n  \n  static getEventState(): SpecialEventState {\n    return { ...this.eventState };\n  }\n  \n  static isSpecialEventAvailable(character: Character): boolean {\n    const now = Date.now();\n    \n    // Check if any special event type is available\n    if (this.canTriggerArtifactEvent(now) && this.eventState.artifactsDiscovered < this.MAX_ARTIFACTS_PER_GAME) {\n      return true;\n    }\n    \n    if (this.canTriggerMindreadingEvent(character, now)) {\n      return true;\n    }\n    \n    if (this.canTriggerProphecyEvent(character, now)) {\n      return true;\n    }\n    \n    return false;\n  }\n\n}","size_bytes":19951},"client/src/lib/animus-artifact-system.ts":{"content":"import { InventoryItem, Character, GameData } from \"@shared/schema\";\nimport { LocationSystem, Location } from \"./location-system\";\n\nexport interface AnimusArtifact extends InventoryItem {\n  discoveryLocation: string;\n  rarity: \"common\" | \"uncommon\" | \"rare\" | \"legendary\" | \"mythical\";\n  discoveryScenario: string;\n  usageOptions: ArtifactOption[];\n  isDiscovered: boolean;\n  cursed: boolean;\n  powerLevel: \"minor\" | \"moderate\" | \"major\" | \"catastrophic\";\n}\n\nexport interface ArtifactOption {\n  id: string;\n  text: string;\n  outcome: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  corruption: boolean;\n}\n\nexport const ANIMUS_ARTIFACTS: AnimusArtifact[] = [\n  {\n    id: \"necklace_whispers\",\n    name: \"Necklace of Whispers\",\n    description: \"A golden necklace humming with faint voices buried in ancient SeaWing ruins. The metal feels warm against your scales, and shadows seem to bend toward it.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Voice Detection\", \"Lie Detection\", \"Paranoia Curse\"],\n    rarity: \"uncommon\",\n    discoveryLocation: \"Sea Kingdom\",\n    discoveryScenario: \"You find a golden necklace humming with faint voices buried in ancient SeaWing ruins. The metal feels warm against your scales, and shadows seem to bend toward it.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"wear_necklace\",\n        text: \"Wear it and embrace the voices\",\n        outcome: \"You begin hearing every cruel thought dragons have about you, driving you toward paranoid isolation but granting you the ability to detect lies and hidden intentions.\",\n        soulCost: 3,\n        sanityCost: 8,\n        consequences: [\"Gained lie detection ability\", \"Became paranoid and isolated\", \"Can sense hidden intentions\"],\n        corruption: true\n      },\n      {\n        id: \"sell_necklace\", \n        text: \"Sell it to a merchant\",\n        outcome: \"You gain quick wealth but the necklace curses its next owner with madness, and they eventually return seeking revenge against you.\",\n        soulCost: 1,\n        sanityCost: 2,\n        consequences: [\"Gained wealth\", \"Created a vengeful enemy\", \"Spread cursed artifact\"],\n        corruption: false\n      },\n      {\n        id: \"hide_necklace\",\n        text: \"Hide it in your hoard\",\n        outcome: \"The voices follow you at night, slowly eroding your sanity as they whisper secrets of the dead, but you learn valuable information about hidden treasures.\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"Learn treasure locations\", \"Suffer recurring nightmares\", \"Voices whisper constantly\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"albatross_quill\",\n    name: \"Albatross' Lost Quill\",\n    description: \"A silver quill said to have belonged to Albatross himself, found clutched in a skeleton's talons deep underwater. It pulses with residual animus magic.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Prophetic Writing\", \"Soul Binding\", \"Ancient Magic\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Sea Kingdom\",\n    discoveryScenario: \"You stumble upon a silver quill said to have belonged to Albatross himself, found clutched in a skeleton's talons deep underwater. It pulses with residual animus magic.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"catastrophic\",\n    usageOptions: [\n      {\n        id: \"write_name_quill\",\n        text: \"Write your name with it\",\n        outcome: \"You bind yourself to endless writing, your claws moving against your will until you collapse from exhaustion, but the words you write become prophecies.\",\n        soulCost: 5,\n        sanityCost: 10,\n        consequences: [\"Gained prophetic writing ability\", \"Lost control of your claws\", \"Collapse from exhaustion\"],\n        corruption: true\n      },\n      {\n        id: \"write_enemy_quill\",\n        text: \"Write an enemy's name\",\n        outcome: \"Their fate twists violently as misfortune after misfortune befalls them, but the quill demands more names and you become addicted to its power.\",\n        soulCost: 8,\n        sanityCost: 5,\n        consequences: [\"Enemy suffers misfortunes\", \"Became addicted to the quill's power\", \"Quill demands more victims\"],\n        corruption: true\n      },\n      {\n        id: \"snap_quill\",\n        text: \"Snap the quill in half\",\n        outcome: \"You feel a surge of animus magic lash back at you, scarring your soul permanently but freeing you from the temptation of its dark power.\",\n        soulCost: 15,\n        sanityCost: 3,\n        consequences: [\"Soul permanently scarred\", \"Freed from dark temptation\", \"Destroyed dangerous artifact\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"mirror_endless_selves\",\n    name: \"Mirror of Endless Selves\", \n    description: \"A polished obsidian mirror that shows not your reflection, but what you could become if corrupted by unlimited animus power. Your reflection smiles while you frown.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Power Corruption\", \"Future Sight\", \"Soul Manipulation\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Ice Kingdom\",\n    discoveryScenario: \"A polished obsidian mirror that shows not your reflection, but what you could become if corrupted by unlimited animus power. Your reflection smiles while you frown.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"touch_mirror\",\n        text: \"Touch the mirror's surface\",\n        outcome: \"You gain temporary animus powers for one day, but they burn away a cherished memory forever, leaving you more callous.\",\n        soulCost: 4,\n        sanityCost: 6,\n        consequences: [\"Gained temporary animus powers\", \"Lost a cherished memory\", \"Became more callous\"],\n        corruption: true\n      },\n      {\n        id: \"stare_mirror\",\n        text: \"Stare into it for hours\",\n        outcome: \"Your ambition grows insatiable, and you begin plotting to seize power at any cost, but gain insight into your enemies' weaknesses.\",\n        soulCost: 2,\n        sanityCost: 8,\n        consequences: [\"Ambition became insatiable\", \"Plot to seize power\", \"Gained insight into enemies\"],\n        corruption: true\n      },\n      {\n        id: \"smash_mirror\",\n        text: \"Smash it with your tail\",\n        outcome: \"The shards embed themselves in your scales, still whispering temptations of power, but you resist corruption at the cost of constant pain.\",\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: [\"Shards embedded in scales\", \"Constant pain\", \"Resisted corruption\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"mirror_endless_selves\",\n    name: \"Mirror of Endless Selves\",\n    description: \"A polished obsidian mirror that shows not your reflection, but what you could become if corrupted by unlimited animus power. Your reflection smiles while you frown.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Corruption Vision\", \"Power Temptation\", \"Memory Drain\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Ice Kingdom\",\n    discoveryScenario: \"A polished obsidian mirror that shows not your reflection, but what you could become if corrupted by unlimited animus power. Your reflection smiles while you frown.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"touch_mirror\",\n        text: \"Touch the mirror's surface\",\n        outcome: \"You gain temporary animus powers for one day, but they burn away a cherished memory forever, leaving you more callous.\",\n        soulCost: 5,\n        sanityCost: 3,\n        consequences: [\"Gained temporary animus powers\", \"Lost a cherished memory\", \"Became more callous\"],\n        corruption: true\n      },\n      {\n        id: \"stare_mirror\",\n        text: \"Stare into it for hours\",\n        outcome: \"Your ambition grows insatiable, and you begin plotting to seize power at any cost, but gain insight into your enemies' weaknesses.\",\n        soulCost: 2,\n        sanityCost: 6,\n        consequences: [\"Ambition became insatiable\", \"Gained knowledge of enemy weaknesses\", \"Began plotting for power\"],\n        corruption: true\n      },\n      {\n        id: \"smash_mirror\",\n        text: \"Smash it with your tail\",\n        outcome: \"The shards embed themselves in your scales, still whispering temptations of power, but you resist corruption at the cost of constant pain.\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"Shards embedded in scales\", \"Constant whispers of temptation\", \"Resisted major corruption\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"singing_stone_tides\",\n    name: \"Singing Stone of Tides\",\n    description: \"A carved aquamarine gemstone that hums ancient SeaWing war songs. When held underwater, it glows like captured sunlight.\",\n    type: \"magical_artifact\", \n    enchantments: [\"Voice Enhancement\", \"Leadership Aura\", \"Suspicion Curse\"],\n    rarity: \"uncommon\",\n    discoveryLocation: \"Sea Kingdom\",\n    discoveryScenario: \"A carved aquamarine gemstone that hums ancient SeaWing war songs. When held underwater, it glows like captured sunlight.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"minor\",\n    usageOptions: [\n      {\n        id: \"keep_close\",\n        text: \"Keep it close to your heart\",\n        outcome: \"The songs empower your voice and presence, making others naturally want to follow you, but other dragons grow suspicious of your influence.\",\n        soulCost: 1,\n        sanityCost: 0,\n        consequences: [\"Enhanced charisma and leadership\", \"Others follow you naturally\", \"Some dragons become suspicious\"],\n        corruption: false\n      },\n      {\n        id: \"sell_stone\",\n        text: \"Sell it to the highest bidder\",\n        outcome: \"Rival dragons fight bloody wars to claim it from each other, and you're blamed for starting the conflict.\",\n        soulCost: 2,\n        sanityCost: 3,\n        consequences: [\"Started wars over the stone\", \"Blamed for the conflict\", \"Multiple dragons became enemies\"],\n        corruption: false\n      },\n      {\n        id: \"return_ocean\",\n        text: \"Drop it back into the ocean\",\n        outcome: \"It grows louder in your mind, the songs echoing in your skull even on dry land, but sea creatures begin to aid you.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Songs echo in your mind constantly\", \"Sea creatures become allies\", \"Mental connection to ocean\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"crown_conquered_bones\",\n    name: \"Crown of Conquered Bones\",\n    description: \"A circlet carved from the bones of dragons Albatross once killed, each bone inscribed with their dying words. It radiates cold power.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Command Aura\", \"Life Drain\", \"Death Whispers\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Old Night Kingdom\",\n    discoveryScenario: \"A circlet carved from the bones of dragons Albatross once killed, each bone inscribed with their dying words. It radiates cold power.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"catastrophic\",\n    usageOptions: [\n      {\n        id: \"wear_meetings\",\n        text: \"Wear it during important meetings\",\n        outcome: \"Others feel compelled to obey your words, but your own body grows weaker with each command as the crown drains your life force.\",\n        soulCost: 6,\n        sanityCost: 2,\n        consequences: [\"Others compelled to obey\", \"Life force gradually drains\", \"Commands become more powerful\"],\n        corruption: true\n      },\n      {\n        id: \"hide_hoard\",\n        text: \"Hide it in your treasure hoard\",\n        outcome: \"You hear constant whispers of conquest and domination in your sleep, gradually making you more ruthless and ambitious.\",\n        soulCost: 3,\n        sanityCost: 5,\n        consequences: [\"Whispers of conquest in sleep\", \"Became more ruthless\", \"Increased ambition\"],\n        corruption: true\n      },\n      {\n        id: \"sell_collector\",\n        text: \"Sell it to a collector\",\n        outcome: \"The buyer returns within days, their eyes hollow and their voice not quite their own, and they're now utterly loyal to you whether you want it or not.\",\n        soulCost: 4,\n        sanityCost: 3,\n        consequences: [\"Created a hollow-eyed servant\", \"Buyer became unnaturally loyal\", \"Spread dangerous artifact\"],\n        corruption: true\n      }\n    ]\n  },\n  {\n    id: \"compass_lost_souls\",\n    name: \"Compass of Lost Souls\", \n    description: \"A golden compass whose needle points not north, but toward the dragon you've wronged most deeply. It belonged to a guilt-ridden animus seeking redemption.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Guilt Detection\", \"Soul Navigation\", \"Redemption Path\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Old Night Kingdom\",\n    discoveryScenario: \"A golden compass whose needle points not north, but toward the dragon you've wronged most deeply. It belonged to a guilt-ridden animus seeking redemption.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"follow_compass\",\n        text: \"Follow where it points\",\n        outcome: \"You're led into increasingly dangerous territory as it guides you toward your victim, but each step heals a small part of your guilt.\",\n        soulCost: -2,\n        sanityCost: 4,\n        consequences: [\"Led into dangerous territory\", \"Healed guilt gradually\", \"Found path to redemption\"],\n        corruption: false\n      },\n      {\n        id: \"ignore_pull\",\n        text: \"Ignore its pull\",\n        outcome: \"The needle spins frantically, and you feel a growing weight of unresolved guilt crushing your chest, affecting your ability to sleep or eat.\",\n        soulCost: 0,\n        sanityCost: 6,\n        consequences: [\"Unresolved guilt weighs heavily\", \"Difficulty sleeping and eating\", \"Needle spins frantically\"],\n        corruption: false\n      },\n      {\n        id: \"destroy_compass\",\n        text: \"Destroy it completely\",\n        outcome: \"All your past victims appear to you in dreams, demanding justice you can never give, but you're free from the compass's compulsion.\",\n        soulCost: 5,\n        sanityCost: 8,\n        consequences: [\"Past victims haunt dreams\", \"Free from compulsion\", \"Justice can never be given\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"scales_truth_lies\",\n    name: \"Scales of Truth and Lies\",\n    description: \"A set of golden weighing scales that glow when touched. Whatever truth you place on one side must be balanced with a lie on the other to function.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Truth Detection\", \"Lie Creation\", \"Balance Magic\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Jade Mountain Academy\",\n    discoveryScenario: \"A set of golden weighing scales that glow when touched. Whatever truth you place on one side must be balanced with a lie on the other to function.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"expose_enemies\",\n        text: \"Use them to expose enemies\",\n        outcome: \"Every truth you reveal forces you to spread an equally damaging lie about yourself, slowly destroying your reputation.\",\n        soulCost: 3,\n        sanityCost: 4,\n        consequences: [\"Revealed enemy truths\", \"Forced to spread lies about yourself\", \"Reputation slowly destroyed\"],\n        corruption: true\n      },\n      {\n        id: \"keep_hidden\",\n        text: \"Keep them hidden as insurance\",\n        outcome: \"The temptation to use them grows stronger each day, eating at your conscience as you watch injustices you could expose.\",\n        soulCost: 1,\n        sanityCost: 3,\n        consequences: [\"Temptation grows daily\", \"Conscience eaten by inaction\", \"Witnessed injustices\"],\n        corruption: false\n      },\n      {\n        id: \"sell_judge\",\n        text: \"Sell them to a judge\",\n        outcome: \"Justice in the kingdom becomes twisted as truth and falsehood become equally weighted in all legal proceedings.\",\n        soulCost: 8,\n        sanityCost: 2,\n        consequences: [\"Justice system became twisted\", \"Truth and lies equally weighted\", \"Legal proceedings corrupted\"],\n        corruption: true\n      }\n    ]\n  },\n  {\n    id: \"crown_conquered_bones\",\n    name: \"Crown of Conquered Bones\",\n    description: \"A circlet carved from the bones of dragons Albatross once killed, each bone inscribed with their dying words. It radiates cold power.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Command Aura\", \"Life Drain\", \"Whispers of Conquest\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Scorpion Den\",\n    discoveryScenario: \"A circlet carved from the bones of dragons Albatross once killed, each bone inscribed with their dying words. It radiates cold power.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"wear_meetings\",\n        text: \"Wear it during important meetings\",\n        outcome: \"Others feel compelled to obey your words, but your own body grows weaker with each command as the crown drains your life force.\",\n        soulCost: 4,\n        sanityCost: 2,\n        consequences: [\"Others compelled to obey\", \"Life force drained with each command\", \"Body grows weaker\"],\n        corruption: true\n      },\n      {\n        id: \"hide_hoard\",\n        text: \"Hide it in your treasure hoard\",\n        outcome: \"You hear constant whispers of conquest and domination in your sleep, gradually making you more ruthless and ambitious.\",\n        soulCost: 1,\n        sanityCost: 6,\n        consequences: [\"Whispers of conquest in dreams\", \"Became more ruthless\", \"Ambition increased\"],\n        corruption: true\n      },\n      {\n        id: \"sell_collector\",\n        text: \"Sell it to a collector\",\n        outcome: \"The buyer returns within days, their eyes hollow and their voice not quite their own, and they're now utterly loyal to you whether you want it or not.\",\n        soulCost: 3,\n        sanityCost: 4,\n        consequences: [\"Buyer became mind-controlled servant\", \"Gained unwilling loyal follower\", \"Spread cursed artifact\"],\n        corruption: true\n      }\n    ]\n  },\n\n  // Adding more artifacts for broader distribution across all locations\n  {\n    id: \"crystal_shard_memories\",\n    name: \"Crystal Shard of Memories\",\n    description: \"A jagged crystal that glows with trapped memories of ancient IceWing royalty. Touching it reveals glimpses of forgotten palace secrets.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Memory Viewing\", \"Royal Secrets\", \"Frost Curse\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Ice Kingdom\",\n    discoveryScenario: \"Deep in the IceWing palace, you discover a jagged crystal glowing with trapped memories. Each facet shows glimpses of ancient royal secrets.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"view_memories\",\n        text: \"Peer into the royal memories\",\n        outcome: \"You see secret IceWing plots and betrayals, gaining political knowledge but becoming cold and calculating like the ancient royals.\",\n        soulCost: 3,\n        sanityCost: 2,\n        consequences: [\"Gained knowledge of IceWing political secrets\", \"Became cold and calculating\", \"Learned ancient palace layouts\"],\n        corruption: true\n      },\n      {\n        id: \"shatter_crystal\",\n        text: \"Shatter the crystal\",\n        outcome: \"The memories explode outward, freezing your emotions temporarily but freeing you from the royal curse.\",\n        soulCost: 1,\n        sanityCost: 4,\n        consequences: [\"Emotions temporarily frozen\", \"Freed from royal influence\", \"Crystal destroyed\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"wind_rider_crown\",\n    name: \"Crown of the Wind Riders\",\n    description: \"A circlet of polished steel and eagle feathers that once belonged to legendary SkyWing aerial commanders. It hums with the power of the high winds.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Flight Enhancement\", \"Wind Control\", \"Battle Fury\"],\n    rarity: \"uncommon\",\n    discoveryLocation: \"Sky Kingdom\",\n    discoveryScenario: \"Hidden in an abandoned SkyWing watchtower, you find a crown of steel and eagle feathers that belonged to legendary aerial commanders.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"minor\",\n    usageOptions: [\n      {\n        id: \"wear_crown\",\n        text: \"Wear the crown into battle\",\n        outcome: \"Your flight speed doubles and you can command wind currents, but you become aggressive and seek out conflicts.\",\n        soulCost: 2,\n        sanityCost: 1,\n        consequences: [\"Flight speed doubled\", \"Can control wind currents\", \"Became more aggressive\"],\n        corruption: false\n      },\n      {\n        id: \"gift_crown\",\n        text: \"Gift it to a SkyWing warrior\",\n        outcome: \"They become your loyal ally, grateful for the honor, but other SkyWings grow jealous of their new abilities.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Gained loyal SkyWing ally\", \"Created jealous enemies\", \"Spread powerful artifact\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"mud_brothers_shield\",\n    name: \"Shield of the Mud Brothers\",\n    description: \"A large shield made from hardened mud and reeds, enchanted to protect entire sibling groups. It bears the names of fallen MudWing heroes.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Sibling Protection\", \"Mud Armor\", \"Heroic Sacrifice\"],\n    rarity: \"uncommon\",\n    discoveryLocation: \"Mud Kingdom\",\n    discoveryScenario: \"In an old MudWing military camp, you discover a shield made of hardened mud bearing the names of fallen heroes who died protecting their siblings.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"use_protection\",\n        text: \"Use it to protect loved ones\",\n        outcome: \"All dragons you care about become harder to harm, but you feel compelled to throw yourself into danger to save others.\",\n        soulCost: 1,\n        sanityCost: 0,\n        consequences: [\"Loved ones protected from harm\", \"Compelled to heroic sacrifice\", \"Became more selfless\"],\n        corruption: false\n      },\n      {\n        id: \"study_names\",\n        text: \"Study the heroes' names inscribed on it\",\n        outcome: \"You learn combat techniques from MudWing legends but become obsessed with achieving similar glory through battle.\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Learned legendary combat techniques\", \"Became obsessed with battle glory\", \"Gained tactical knowledge\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"desert_mirage_chalice\",\n    name: \"Chalice of Desert Mirages\",\n    description: \"A golden cup that creates realistic illusions when filled with sand. It was crafted by ancient SandWing sorcerers to confuse enemies in the endless dunes.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Illusion Creation\", \"Desert Navigation\", \"Thirst Curse\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Sand Kingdom\",\n    discoveryScenario: \"Buried in shifting dunes, you uncover a golden chalice that shimmers with heat mirages. Ancient SandWing runes warn of its deceptive power.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"create_illusions\",\n        text: \"Use it to create desert mirages\",\n        outcome: \"You can create convincing illusions to confuse enemies, but you start to lose track of what's real and what's illusion.\",\n        soulCost: 2,\n        sanityCost: 5,\n        consequences: [\"Can create convincing illusions\", \"Difficulty distinguishing reality\", \"Enemies become confused\"],\n        corruption: true\n      },\n      {\n        id: \"navigate_desert\",\n        text: \"Use it to navigate the desert\",\n        outcome: \"The chalice reveals hidden oases and safe paths through the dunes, but you become dependent on it for direction.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Can find hidden oases\", \"Always know desert paths\", \"Became dependent on artifact\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"outlaw_coin_pouch\",\n    name: \"Outlaw's Endless Coin Pouch\",\n    description: \"A leather pouch that always contains exactly enough coins for what you need, but the money comes from stealing from other dragons without them knowing.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Infinite Wealth\", \"Silent Theft\", \"Guilt Manifestation\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Scorpion Den\",\n    discoveryScenario: \"Hidden in the wall of an old gambling den, you find a leather pouch that always seems to have the perfect amount of coins for any purchase.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"use_coins\",\n        text: \"Use the coins to buy what you need\",\n        outcome: \"You always have enough money for anything, but you gradually realize it's being stolen from innocent dragons, haunting your conscience.\",\n        soulCost: 4,\n        sanityCost: 6,\n        consequences: [\"Always have enough money\", \"Money stolen from innocents\", \"Haunted by victims' suffering\"],\n        corruption: true\n      },\n      {\n        id: \"return_money\",\n        text: \"Try to return the stolen money\",\n        outcome: \"The pouch fights back, creating confusion and chaos as you attempt to give away its cursed coins, but your conscience feels lighter.\",\n        soulCost: 1,\n        sanityCost: 3,\n        consequences: [\"Created confusion and chaos\", \"Conscience feels lighter\", \"Partially broke the curse\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"rainbow_bridge_feather\",\n    name: \"Feather of the Rainbow Bridge\",\n    description: \"A color-shifting feather that changes hue with your emotions. It belonged to a legendary RainWing who could bridge any divide between dragons.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Emotion Reading\", \"Peace Aura\", \"Color Camouflage\"],\n    rarity: \"uncommon\",\n    discoveryLocation: \"Rainforest Kingdom\",\n    discoveryScenario: \"High in the canopy, you discover a feather that shifts through every color imaginable, left by a RainWing peacemaker who ended countless conflicts.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"minor\",\n    usageOptions: [\n      {\n        id: \"mediate_conflicts\",\n        text: \"Use it to resolve conflicts between others\",\n        outcome: \"You become incredibly good at stopping fights and making peace, but you absorb all the negative emotions you resolve.\",\n        soulCost: 0,\n        sanityCost: 4,\n        consequences: [\"Excellent at conflict resolution\", \"Absorbed others' negative emotions\", \"Became a natural mediator\"],\n        corruption: false\n      },\n      {\n        id: \"perfect_camouflage\",\n        text: \"Use it for perfect camouflage\",\n        outcome: \"You can become completely invisible by matching any environment, but you start to feel invisible in social situations too.\",\n        soulCost: 1,\n        sanityCost: 3,\n        consequences: [\"Perfect camouflage ability\", \"Feel socially invisible\", \"Difficulty maintaining relationships\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"nightwing_prophecy_scroll\",\n    name: \"Scroll of False Prophecies\",\n    description: \"An ancient scroll that writes prophecies about the reader's future, but half of them are lies designed to manipulate the reader into dark paths.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Future Sight\", \"False Visions\", \"Destiny Manipulation\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"NightWing Village\",\n    discoveryScenario: \"Hidden in the new NightWing settlement, you find a scroll covered in prophecies written in silver ink that seems to respond to your presence.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"read_prophecies\",\n        text: \"Read your own prophecies\",\n        outcome: \"You see potential futures, some glorious and some terrible, but can't tell which are real, driving you to make increasingly desperate choices.\",\n        soulCost: 3,\n        sanityCost: 7,\n        consequences: [\"Can see potential futures\", \"Can't distinguish truth from lies\", \"Making desperate choices\"],\n        corruption: true\n      },\n      {\n        id: \"burn_scroll\",\n        text: \"Burn the lying scroll\",\n        outcome: \"As it burns, you feel a weight lift from your destiny, but you also lose any glimpse into what your future might hold.\",\n        soulCost: 2,\n        sanityCost: 1,\n        consequences: [\"Freed from manipulative prophecies\", \"Lost all future sight\", \"Destiny became truly your own\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"student_wisdom_tome\",\n    name: \"Tome of Infinite Wisdom\",\n    description: \"A book that contains the answer to any question, but each question asked ages the reader by one year and makes them more isolated from others.\",\n    type: \"magical_artifact\",\n    enchantments: [\"All Knowledge\", \"Age Acceleration\", \"Social Isolation\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Jade Mountain Academy\",\n    discoveryScenario: \"In the deepest part of the academy library, you discover a book that seems to know every secret in the world, but reading it feels strangely lonely.\",\n    isActive: false,\n    canGiveAway: false,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"catastrophic\",\n    usageOptions: [\n      {\n        id: \"seek_knowledge\",\n        text: \"Ask it important questions\",\n        outcome: \"You gain incredible wisdom and knowledge about anything you desire, but each question ages you and makes others find you harder to relate to.\",\n        soulCost: 2,\n        sanityCost: 4,\n        consequences: [\"Gained incredible wisdom\", \"Aged rapidly\", \"Became socially isolated\"],\n        corruption: true\n      },\n      {\n        id: \"close_book\",\n        text: \"Close the book forever\",\n        outcome: \"You give up infinite knowledge to preserve your connections with others and your natural lifespan, choosing ignorance over isolation.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Preserved social connections\", \"Gave up infinite knowledge\", \"Chose relationships over wisdom\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"hivewing_control_mask\",\n    name: \"Mask of the Mind Controller\",\n    description: \"A chitin mask decorated with HiveWing patterns that allows the wearer to control other dragons' minds, but slowly replaces their personality with Queen Wasp's.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Mind Control\", \"Personality Replacement\", \"Hive Connection\"],\n    rarity: \"legendary\",\n    discoveryLocation: \"Jewel Hive\",\n    discoveryScenario: \"In Queen Wasp's abandoned chambers, you find a mask of polished chitin that pulses with the power to control minds, bearing her personal insignia.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"catastrophic\",\n    usageOptions: [\n      {\n        id: \"control_minds\",\n        text: \"Use it to control others\",\n        outcome: \"You can force any dragon to obey your commands, but your own thoughts become increasingly similar to Queen Wasp's tyrannical mindset.\",\n        soulCost: 8,\n        sanityCost: 5,\n        consequences: [\"Can control other dragons' minds\", \"Personality becoming like Queen Wasp\", \"Thoughts turning tyrannical\"],\n        corruption: true\n      },\n      {\n        id: \"destroy_mask\",\n        text: \"Destroy the tyrannical mask\",\n        outcome: \"You shatter the mask but its fragments embed in your scales, giving you resistance to mind control while causing constant pain.\",\n        soulCost: 3,\n        sanityCost: 6,\n        consequences: [\"Immune to mind control\", \"Fragments embedded in scales\", \"Constant physical pain\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"silk_rebellion_banner\",\n    name: \"Banner of the Silk Rebellion\",\n    description: \"A silk banner woven with the hopes and dreams of enslaved SilkWings. It inspires revolution but marks the bearer as an enemy of the HiveWings.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Revolution Inspiration\", \"Hope Restoration\", \"Enemy Marking\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Cicada Hive\",\n    discoveryScenario: \"Hidden in a silk production facility, you discover a banner woven with silvery thread that seems to shimmer with the dreams of freedom.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: false,\n    powerLevel: \"moderate\",\n    usageOptions: [\n      {\n        id: \"inspire_rebellion\",\n        text: \"Raise the banner to inspire rebels\",\n        outcome: \"Oppressed dragons everywhere feel hope and begin to resist their oppressors, but you become a prime target for HiveWing assassins.\",\n        soulCost: 0,\n        sanityCost: 4,\n        consequences: [\"Inspired widespread rebellion\", \"Gave hope to oppressed dragons\", \"Became target for assassins\"],\n        corruption: false\n      },\n      {\n        id: \"keep_hidden\",\n        text: \"Keep it hidden for safety\",\n        outcome: \"You preserve the banner's power for a crucial moment, but the weight of unfulfilled hope begins to crush your spirit.\",\n        soulCost: 2,\n        sanityCost: 5,\n        consequences: [\"Preserved banner for crucial moment\", \"Crushed by weight of unfulfilled hope\", \"Waiting for perfect opportunity\"],\n        corruption: false\n      }\n    ]\n  },\n\n  {\n    id: \"leafwing_poison_vial\",\n    name: \"Vial of Living Poison\",\n    description: \"A glass vial containing a swirling green poison that moves like it's alive. It belonged to a LeafWing assassin who used it to fight HiveWing oppression.\",\n    type: \"magical_artifact\",\n    enchantments: [\"Living Poison\", \"Plant Control\", \"Toxic Immunity\"],\n    rarity: \"rare\",\n    discoveryLocation: \"Poison Jungle\",\n    discoveryScenario: \"Deep in the most toxic part of the jungle, you find a vial of living poison abandoned by a LeafWing resistance fighter.\",\n    isActive: false,\n    canGiveAway: true,\n    isDiscovered: false,\n    cursed: true,\n    powerLevel: \"major\",\n    usageOptions: [\n      {\n        id: \"use_poison\",\n        text: \"Use the poison against enemies\",\n        outcome: \"The poison obeys your commands and can eliminate any threat, but it begins to view all other dragons as potential enemies to eliminate.\",\n        soulCost: 5,\n        sanityCost: 3,\n        consequences: [\"Poison obeys your commands\", \"Can eliminate any threat\", \"Poison sees all dragons as enemies\"],\n        corruption: true\n      },\n      {\n        id: \"cure_creation\",\n        text: \"Use it to create antidotes instead\",\n        outcome: \"You become immune to all toxins and can cure any poison, but the vial's darkness slowly seeps into your soul.\",\n        soulCost: 2,\n        sanityCost: 1,\n        consequences: [\"Immune to all toxins\", \"Can cure any poison\", \"Darkness seeping into soul\"],\n        corruption: true\n      }\n    ]\n  }\n];\n\nexport class AnimusArtifactSystem {\n  private static discoveredArtifacts: Set<string> = new Set();\n  private static readonly MAX_ARTIFACTS_PER_GAME = 3; // Maximum 3 artifacts per playthrough\n  \n  static getAvailableArtifactsForLocation(location: string, gameData: GameData): AnimusArtifact[] {\n    // Get artifacts already in inventory to avoid duplicates\n    const inventoryArtifactIds = (gameData.inventory || [])\n      .filter(item => item.type === 'magical_artifact')\n      .map(item => item.id);\n\n    // Allow artifacts to be found at any location, but prefer their discovery location\n    const exactLocationArtifacts = ANIMUS_ARTIFACTS.filter(artifact => \n      artifact.discoveryLocation === location && \n      !inventoryArtifactIds.includes(artifact.id)\n    );\n    \n    // If no exact location matches, allow any undiscovered artifact to be found\n    if (exactLocationArtifacts.length === 0) {\n      const anyLocationArtifacts = ANIMUS_ARTIFACTS.filter(artifact => \n        !inventoryArtifactIds.includes(artifact.id)\n      );\n      console.log(`No artifacts for ${location}, using any available: ${anyLocationArtifacts.length} artifacts`);\n      return anyLocationArtifacts;\n    }\n    \n    console.log(`Found ${exactLocationArtifacts.length} artifacts for ${location}`);\n    return exactLocationArtifacts;\n  }\n  \n  static generateArtifactDiscovery(character: Character, gameData: GameData): AnimusArtifact | null {\n    console.log(\"Attempting to generate artifact discovery...\");\n    \n    // Check current inventory for artifacts instead of internal tracking\n    const currentArtifacts = (gameData.inventory || []).filter(item => item.type === 'magical_artifact').length;\n    console.log(`Current artifacts in inventory: ${currentArtifacts}/${this.MAX_ARTIFACTS_PER_GAME}`);\n    \n    if (currentArtifacts >= this.MAX_ARTIFACTS_PER_GAME) {\n      console.log(\"Max artifacts already collected - no more discoveries\");\n      return null;\n    }\n\n    const currentLocation = LocationSystem.getCurrentLocation(gameData);\n    if (!currentLocation) {\n      console.log(\"No current location found\");\n      return null;\n    }\n\n    // Get artifacts not already in inventory\n    const availableArtifacts = this.getAvailableArtifactsForLocation(currentLocation.name, gameData);\n    const inventoryArtifactIds = (gameData.inventory || [])\n      .filter(item => item.type === 'magical_artifact')\n      .map(item => item.id);\n      \n    console.log(`Available artifacts at ${currentLocation.name}: ${availableArtifacts.length}`);\n    console.log(`Already collected: ${inventoryArtifactIds}`);\n    \n    if (availableArtifacts.length === 0) {\n      console.log(\"No new artifacts available for location\");\n      return null;\n    }\n\n    // Pick a random available artifact for better variety\n    const randomIndex = Math.floor(Math.random() * availableArtifacts.length);\n    const artifact = availableArtifacts[randomIndex];\n    console.log(`Generated artifact: ${artifact.name}`);\n    \n    // Add to discovered set for tracking\n    this.discoveredArtifacts.add(artifact.id);\n    \n    return { ...artifact, isDiscovered: true };\n  }\n  \n  static useArtifact(artifact: AnimusArtifact, optionId: string, character: Character, gameData: GameData): {\n    newCharacter: Character;\n    newGameData: GameData;\n    outcome: string;\n    consequences: string[];\n  } {\n    const option = artifact.usageOptions.find(opt => opt.id === optionId);\n    if (!option) {\n      throw new Error(`Invalid option ${optionId} for artifact ${artifact.id}`);\n    }\n    \n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n    \n    // Apply soul and sanity costs\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - option.soulCost);\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - option.sanityCost);\n    \n    // Update corruption stage if needed\n    if (newCharacter.soulPercentage <= 25 && character.soulPercentage > 25) {\n      newCharacter.soulCorruptionStage = \"Broken\";\n    } else if (newCharacter.soulPercentage <= 50 && character.soulPercentage > 50) {\n      newCharacter.soulCorruptionStage = \"Twisted\";\n    } else if (newCharacter.soulPercentage <= 75 && character.soulPercentage > 75) {\n      newCharacter.soulCorruptionStage = \"Frayed\";\n    }\n    \n    // Remove or modify the artifact based on usage\n    const inventoryIndex = newGameData.inventory.findIndex(item => item.id === artifact.id);\n    if (inventoryIndex !== -1) {\n      if (optionId.includes('destroy') || optionId.includes('smash') || optionId.includes('break') || optionId.includes('melt')) {\n        // Remove artifact if destroyed\n        newGameData.inventory.splice(inventoryIndex, 1);\n      } else {\n        // Mark as used/active\n        newGameData.inventory[inventoryIndex].isActive = true;\n      }\n    }\n    \n    return {\n      newCharacter,\n      newGameData,\n      outcome: option.outcome,\n      consequences: option.consequences\n    };\n  }\n  \n  static getDiscoveredArtifacts(): string[] {\n    return Array.from(this.discoveredArtifacts);\n  }\n  \n  static resetDiscoveredArtifacts(): void {\n    this.discoveredArtifacts.clear();\n  }\n  \n  static isArtifactDiscovered(artifactId: string): boolean {\n    return this.discoveredArtifacts.has(artifactId);\n  }\n  \n  static getArtifactById(id: string): AnimusArtifact | undefined {\n    return ANIMUS_ARTIFACTS.find(artifact => artifact.id === id);\n  }\n\n  static generateArtifactChoices(artifact: AnimusArtifact): {\n    id: string;\n    text: string;\n    description: string;\n    soulCost: number;\n    sanityCost: number;\n    consequences: string[];\n    collectsArtifact: boolean;\n  }[] {\n    return [\n      {\n        id: `collect_${artifact.id}`,\n        text: `Collect the ${artifact.name}`,\n        description: \"Take the artifact and add it to your inventory\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [`You carefully collect the ${artifact.name} and store it safely`],\n        collectsArtifact: true\n      },\n      {\n        id: `examine_${artifact.id}`,\n        text: \"Examine it closely but don't touch\",\n        description: \"Study the artifact without collecting it\",\n        soulCost: 0,\n        sanityCost: 1,\n        consequences: [\"You study the artifact carefully but choose not to take it\"],\n        collectsArtifact: false\n      },\n      {\n        id: `ignore_${artifact.id}`,\n        text: \"Leave it alone\",\n        description: \"Walk away from the dangerous artifact\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"You decide the artifact is too dangerous and leave it behind\"],\n        collectsArtifact: false\n      }\n    ];\n  }\n\n  static collectArtifact(artifact: AnimusArtifact, character: Character, gameData: GameData): {\n    newCharacter: Character;\n    newGameData: GameData;\n    message: string;\n  } {\n    console.log(`COLLECTING ARTIFACT: ${artifact.name} with ID: ${artifact.id}`);\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n\n    // Ensure inventory exists and is an array\n    if (!newGameData.inventory || !Array.isArray(newGameData.inventory)) {\n      console.log(\"Initializing inventory array\");\n      newGameData.inventory = [];\n    }\n\n    // Add artifact to inventory\n    const inventoryItem = {\n      id: artifact.id,\n      name: artifact.name,\n      description: artifact.description,\n      type: artifact.type,\n      enchantments: artifact.enchantments,\n      isActive: false,\n      canGiveAway: artifact.canGiveAway\n    };\n\n    console.log(`Adding artifact to inventory:`, inventoryItem);\n    console.log(`Inventory before push:`, newGameData.inventory);\n    newGameData.inventory.push(inventoryItem);\n    console.log(`Inventory after push:`, newGameData.inventory);\n\n    const message = `You have collected the ${artifact.name}! It has been added to your inventory.`;\n    \n    console.log(`Artifact ${artifact.name} added to inventory. Total items: ${newGameData.inventory.length}`);\n\n    return {\n      newCharacter,\n      newGameData,\n      message\n    };\n  }\n}","size_bytes":44113},"client/src/lib/special-power-scenarios.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\n\nexport interface SpecialPowerScenario {\n  id: string;\n  type: 'mindreading' | 'prophecy';\n  title: string;\n  prompt: string;\n  options: SpecialPowerOption[];\n  requirements: (character: Character) => boolean;\n}\n\nexport interface SpecialPowerOption {\n  id: string;\n  text: string;\n  outcome: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  corruption: boolean;\n}\n\nexport const MINDREADING_SCENARIOS: SpecialPowerScenario[] = [\n  {\n    id: \"mindreading_amplified_battle\",\n    type: \"mindreading\",\n    title: \"Amplified Battle Thoughts\",\n    prompt: \"In the middle of a fierce battle, your mindreading suddenly amplifies beyond your control. You can hear the thoughts of every dragon within miles - allies screaming in pain, enemies plotting kills, the dying calling for loved ones.\",\n    requirements: (c) => (c.tribalPowers || []).some(p => p.toLowerCase().includes('mind')) || (c.specialPowers || []).some(p => p.toLowerCase().includes('mind')),\n    options: [\n      {\n        id: \"push_through\",\n        text: \"Try to push through and use the information to save lives\",\n        outcome: \"You guide your forces to victory and save many lives, but the mental strain leaves you unable to sleep for weeks.\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"Saved many allies in battle\", \"Gained tactical advantage\", \"Suffer severe insomnia\"],\n        corruption: false\n      },\n      {\n        id: \"retreat_battle\",\n        text: \"Retreat from battle to protect your sanity\",\n        outcome: \"You avoid mental damage but your allies suffer heavy casualties. Some call you a coward.\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"Avoided mental strain\", \"Allies suffered casualties\", \"Reputation damaged\"],\n        corruption: false\n      },\n      {\n        id: \"shut_down_powers\",\n        text: \"Attempt to shut down your mind reading entirely\",\n        outcome: \"You succeed but permanently lose your powers. You must learn to live as an ordinary dragon.\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"Lost mind reading powers permanently\", \"Must adapt to life without telepathy\", \"Mental peace restored\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"sibling_secret_reading\",\n    type: \"mindreading\", \n    title: \"Sibling's Mental Betrayal\",\n    prompt: \"You discover that your own sibling has been secretly reading your mind for years, learning all your secrets, fears, and plans. They've used this knowledge to always stay one step ahead of you in everything.\",\n    requirements: (c) => (c.tribalPowers || []).some(p => p.toLowerCase().includes('mind')) || (c.specialPowers || []).some(p => p.toLowerCase().includes('mind')),\n    options: [\n      {\n        id: \"confront_angrily\",\n        text: \"Confront them angrily about the violation of trust\",\n        outcome: \"They break down and reveal they were trying to protect you from threats you never knew existed.\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Learned of hidden threats\", \"Sibling was protecting you\", \"Trust partially restored\"],\n        corruption: false\n      },\n      {\n        id: \"feed_false_thoughts\",\n        text: \"Start feeding them false thoughts to confuse them\",\n        outcome: \"Your deception works, but the mental effort of constantly lying to yourself begins to fracture your personality.\",\n        soulCost: 2,\n        sanityCost: 10,\n        consequences: [\"Successfully deceived sibling\", \"Personality began fracturing\", \"Mental strain increased\"],\n        corruption: true\n      },\n      {\n        id: \"read_their_secrets\",\n        text: \"Pretend you don't know and try to learn their secrets in return\",\n        outcome: \"You discover they're involved in a dangerous conspiracy, but they realize you're reading them and vanish.\",\n        soulCost: 1,\n        sanityCost: 4,\n        consequences: [\"Learned of dangerous conspiracy\", \"Sibling disappeared\", \"Lost family connection\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"locked_mind_request\",\n    type: \"mindreading\",\n    title: \"The Locked Mind\",\n    prompt: \"A dragon approaches you claiming their mind has been 'locked' by an animus spell. They desperately want you to try reading their thoughts to break the enchantment, but you sense something malevolent trapped inside.\",\n    requirements: (c) => (c.tribalPowers || []).some(p => p.toLowerCase().includes('mind')) || (c.specialPowers || []).some(p => p.toLowerCase().includes('mind')),\n    options: [\n      {\n        id: \"break_mental_lock\",\n        text: \"Attempt to break the mental lock despite the danger\",\n        outcome: \"You free them but release an ancient evil consciousness that begins possessing nearby dragons.\",\n        soulCost: 5,\n        sanityCost: 8,\n        consequences: [\"Freed the dragon\", \"Released ancient evil\", \"Evil began possessing others\"],\n        corruption: true\n      },\n      {\n        id: \"refuse_help\",\n        text: \"Refuse to help, fearing what might be unleashed\",\n        outcome: \"The dragon begs and pleads, eventually dying in agony as the lock slowly crushes their mind.\",\n        soulCost: 2,\n        sanityCost: 12,\n        consequences: [\"Dragon died in agony\", \"Haunted by their pleas\", \"Avoided unleashing evil\"],\n        corruption: false\n      },\n      {\n        id: \"read_carefully\",\n        text: \"Try to read around the edges of the lock carefully\",\n        outcome: \"You partially free their memories but become mentally linked to whatever dark entity is trapped inside.\",\n        soulCost: 3,\n        sanityCost: 6,\n        consequences: [\"Partially freed their mind\", \"Mentally linked to dark entity\", \"Constant dark whispers\"],\n        corruption: true\n      }\n    ]\n  },\n  {\n    id: \"diplomatic_assassination_plot\",\n    type: \"mindreading\",\n    title: \"Diplomatic Assassination\",\n    prompt: \"During a peaceful diplomatic meeting, you read the minds of the visiting delegates and realize they're all planning to assassinate your Queen during the feast tonight. However, one of them is having second thoughts about the plan.\",\n    requirements: (c) => (c.tribalPowers || []).some(p => p.toLowerCase().includes('mind')) || (c.specialPowers || []).some(p => p.toLowerCase().includes('mind')),\n    options: [\n      {\n        id: \"alert_guards\",\n        text: \"Alert the guards and have all the delegates arrested immediately\",\n        outcome: \"The assassination is prevented, but the sudden arrest ruins diplomatic relations and starts a war.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Prevented assassination\", \"Diplomatic relations ruined\", \"War started\"],\n        corruption: false\n      },\n      {\n        id: \"turn_hesitant_ally\",\n        text: \"Try to secretly turn the hesitant assassin into an ally\",\n        outcome: \"They agree to help you, but during the battle their former allies kill them, leaving you to face the others alone.\",\n        soulCost: 1,\n        sanityCost: 4,\n        consequences: [\"Gained temporary ally\", \"Ally was killed by conspirators\", \"Must face remaining assassins alone\"],\n        corruption: false\n      },\n      {\n        id: \"public_confrontation\",\n        text: \"Confront all of them publicly during the feast\",\n        outcome: \"The shock of being exposed causes them to panic and attack immediately, turning the feast into a bloodbath.\",\n        soulCost: 0,\n        sanityCost: 8,\n        consequences: [\"Exposed the plot publicly\", \"Feast became violent battle\", \"Many innocents injured\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"dragonet_uncontrolled_powers\",\n    type: \"mindreading\",\n    title: \"The Mind-Reading Dragonet\",\n    prompt: \"You accidentally read the mind of a dragonet and discover they have incredibly powerful but uncontrolled mind reading abilities. They're reading everyone's thoughts constantly and are slowly going insane from the mental noise.\",\n    requirements: (c) => (c.tribalPowers || []).some(p => p.toLowerCase().includes('mind')) || (c.specialPowers || []).some(p => p.toLowerCase().includes('mind')),\n    options: [\n      {\n        id: \"teach_control\",\n        text: \"Try to teach them to control their powers like you learned to\",\n        outcome: \"Your training helps, but other dragons become suspicious of why you're spending so much time with the 'weird' dragonet.\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Helped dragonet control powers\", \"Others became suspicious\", \"Gained young student\"],\n        corruption: false\n      },\n      {\n        id: \"suppress_powers\",\n        text: \"Find an animus to suppress their abilities permanently\",\n        outcome: \"The suppression works, but the dragonet becomes bitter and resentful, feeling you stole part of their identity.\",\n        soulCost: 1,\n        sanityCost: 1,\n        consequences: [\"Powers suppressed permanently\", \"Dragonet became resentful\", \"Prevented mental breakdown\"],\n        corruption: false\n      },\n      {\n        id: \"isolate_dragonet\",\n        text: \"Take them away from populated areas to somewhere quiet\",\n        outcome: \"The isolation helps their sanity, but you're both cut off from dragon society and slowly become outcasts.\",\n        soulCost: 0,\n        sanityCost: 4,\n        consequences: [\"Dragonet's sanity improved\", \"Both became social outcasts\", \"Cut off from dragon society\"],\n        corruption: false\n      }\n    ]\n  }\n];\n\nexport const PROPHECY_SCENARIOS: SpecialPowerScenario[] = [\n  {\n    id: \"three_moons_prophecy\",\n    type: \"prophecy\",\n    title: \"The Child of Two Tribes\",\n    prompt: \"A dying NightWing seer gasps out a prophecy: 'When the three moons align, the child of two tribes will either save the world or destroy it completely.' The next alignment is in three days, and you just discovered your best friend is half SkyWing, half SeaWing.\",\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) || c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight')),\n    options: [\n      {\n        id: \"tell_friend_prepare\",\n        text: \"Tell your friend about the prophecy and help them prepare to be the savior\",\n        outcome: \"The pressure drives your friend to make reckless decisions, accidentally fulfilling the 'destruction' part of the prophecy.\",\n        soulCost: 2,\n        sanityCost: 8,\n        consequences: [\"Friend made reckless decisions\", \"Prophecy fulfilled destructively\", \"World damaged by your actions\"],\n        corruption: false\n      },\n      {\n        id: \"keep_secret\",\n        text: \"Keep the prophecy secret to protect your friend from that burden\",\n        outcome: \"Your friend faces the prophesied moment unprepared and fails to save anyone, leading to catastrophe.\",\n        soulCost: 1,\n        sanityCost: 12,\n        consequences: [\"Friend faced moment unprepared\", \"Failed to prevent catastrophe\", \"Guilt over secrecy\"],\n        corruption: false\n      },\n      {\n        id: \"prevent_participation\",\n        text: \"Try to prevent your friend from being anywhere near the moon alignment\",\n        outcome: \"Your interference actually causes the events that put your friend in the position to either save or destroy the world.\",\n        soulCost: 0,\n        sanityCost: 6,\n        consequences: [\"Interference backfired\", \"Caused the prophesied situation\", \"Friend thrust into destiny\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"betrayal_prophecy_scroll\",\n    type: \"prophecy\",\n    title: \"The Winter Betrayal\",\n    prompt: \"You find an ancient scroll that reads: 'The reader of these words will betray their greatest love before the winter ends.' Winter is just beginning, and you're deeply in love with another dragon.\",\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) || c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight')),\n    options: [\n      {\n        id: \"tell_love_prophecy\",\n        text: \"Tell your love about the prophecy and ask them to help you fight fate\",\n        outcome: \"Your honesty strengthens your bond, but the prophecy twists - you 'betray' them by sacrificing yourself to save them.\",\n        soulCost: 8,\n        sanityCost: 0,\n        consequences: [\"Bond with love strengthened\", \"Self-sacrifice fulfilled prophecy\", \"Saved loved one's life\"],\n        corruption: false\n      },\n      {\n        id: \"break_up_preemptively\",\n        text: \"Break up with them immediately to prevent betraying them\",\n        outcome: \"Your breakup devastates them, and they die of heartbreak before winter ends, making your abandonment the ultimate betrayal.\",\n        soulCost: 3,\n        sanityCost: 15,\n        consequences: [\"Loved one died of heartbreak\", \"Abandonment was the betrayal\", \"Prophecy fulfilled through avoidance\"],\n        corruption: false\n      },\n      {\n        id: \"ignore_prophecy\",\n        text: \"Ignore the prophecy and act normally\",\n        outcome: \"The prophecy fulfills itself when circumstances force you to choose between your love and saving hundreds of other dragons.\",\n        soulCost: 1,\n        sanityCost: 10,\n        consequences: [\"Forced into impossible choice\", \"Had to choose between love and many lives\", \"Prophecy fulfilled inevitably\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"circle_breaking_prophecy\",\n    type: \"prophecy\",\n    title: \"Breaking the Circle\",\n    prompt: \"You receive a vision that shows you standing in a circle of seven stones. A voice whispers: 'Break the circle and break the world, complete the circle and complete the curse.' You find these exact stones the next day.\",\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) || c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight')),\n    options: [\n      {\n        id: \"break_stone_circle\",\n        text: \"Break one of the stones to prevent completing the circle\",\n        outcome: \"The broken stone releases an ancient curse that begins turning dragons to stone across the continent.\",\n        soulCost: 5,\n        sanityCost: 12,\n        consequences: [\"Released ancient curse\", \"Dragons turning to stone\", \"Continent-wide disaster\"],\n        corruption: true\n      },\n      {\n        id: \"complete_circle\",\n        text: \"Stand in the center and complete the circle\",\n        outcome: \"You become trapped as the seventh stone, but your sacrifice prevents a curse that would have killed thousands.\",\n        soulCost: 15,\n        sanityCost: 0,\n        consequences: [\"Became trapped as stone\", \"Prevented massive curse\", \"Sacrificed self for thousands\"],\n        corruption: false\n      },\n      {\n        id: \"find_alternate_meaning\",\n        text: \"Try to find another interpretation - maybe 'breaking the circle' means something else\",\n        outcome: \"You realize it means breaking a cycle of revenge in your family, which you do by forgiving an ancient enemy.\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Broke cycle of family revenge\", \"Forgave ancient enemy\", \"Found peaceful solution\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"trust_enemy_prophecy\",\n    type: \"prophecy\",\n    title: \"Trust and Doubt\",\n    prompt: \"A prophecy scroll burns itself after you read: 'Trust the enemy, doubt the friend, or watch both become dust in the end.' The next day, your worst enemy offers to help you, while your best friend seems to be acting suspiciously.\",\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) || c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight')),\n    options: [\n      {\n        id: \"trust_enemy_offer\",\n        text: \"Trust your enemy's offer of help despite your instincts\",\n        outcome: \"Your enemy genuinely wants to make amends, and together you expose your friend's plan to betray you both.\",\n        soulCost: 0,\n        sanityCost: 4,\n        consequences: [\"Enemy genuinely sought redemption\", \"Exposed friend's betrayal\", \"Unlikely alliance formed\"],\n        corruption: false\n      },\n      {\n        id: \"doubt_friend\",\n        text: \"Doubt your friend and investigate their suspicious behavior\",\n        outcome: \"Your suspicion destroys your friendship, but you discover they were planning a surprise party, making you the villain.\",\n        soulCost: 1,\n        sanityCost: 8,\n        consequences: [\"Friendship destroyed by suspicion\", \"Friend was planning surprise\", \"Became the villain\"],\n        corruption: false\n      },\n      {\n        id: \"ignore_prophecy_advice\",\n        text: \"Ignore the prophecy and treat both dragons as you normally would\",\n        outcome: \"Both dragons die in a conflict you could have prevented by following the prophecy's guidance.\",\n        soulCost: 0,\n        sanityCost: 15,\n        consequences: [\"Both dragons died in conflict\", \"Could have prevented deaths\", \"Ignored prophetic guidance\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"keeper_of_secrets\",\n    type: \"prophecy\",\n    title: \"The Keeper's Burden\",\n    prompt: \"A dying dragon whispers a prophecy: 'The keeper of secrets will speak three truths that doom their tribe, but silence will doom the world.' You realize you know three terrible truths that could destroy your tribe if revealed.\",\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy')) || c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight')),\n    options: [\n      {\n        id: \"reveal_three_truths\",\n        text: \"Reveal all three truths to save the world, even if it dooms your tribe\",\n        outcome: \"Your tribe is destroyed but the world is saved, making you a hero to some and a traitor to others.\",\n        soulCost: 10,\n        sanityCost: 20,\n        consequences: [\"Tribe destroyed by revelations\", \"World saved from catastrophe\", \"Became hero and traitor\"],\n        corruption: false\n      },\n      {\n        id: \"stay_silent\",\n        text: \"Stay silent to protect your tribe, even if it dooms the world\",\n        outcome: \"Your tribe survives temporarily, but the world-ending catastrophe eventually destroys them too.\",\n        soulCost: 5,\n        sanityCost: 25,\n        consequences: [\"Tribe survived temporarily\", \"World-ending catastrophe occurred\", \"Everyone died eventually\"],\n        corruption: true\n      },\n      {\n        id: \"gradual_revelation\",\n        text: \"Try to find a way to reveal the truths gradually to minimize damage\",\n        outcome: \"Your partial revelations cause confusion and panic, making both outcomes worse than if you'd chosen one path.\",\n        soulCost: 3,\n        sanityCost: 15,\n        consequences: [\"Caused confusion and panic\", \"Made both outcomes worse\", \"Half-measures failed\"],\n        corruption: false\n      }\n    ]\n  }\n];\n\nexport class SpecialPowerScenarioSystem {\n  static getApplicableScenarios(character: Character, type: 'mindreading' | 'prophecy'): SpecialPowerScenario[] {\n    const scenarios = type === 'mindreading' ? MINDREADING_SCENARIOS : PROPHECY_SCENARIOS;\n    const applicable = scenarios.filter(scenario => scenario.requirements(character));\n    console.log(`Found ${applicable.length} applicable ${type} scenarios for character with powers: ${character.tribalPowers.join(', ')} / ${character.specialPowers.join(', ')}`);\n    return applicable;\n  }\n  \n  static getRandomScenario(character: Character, type: 'mindreading' | 'prophecy'): SpecialPowerScenario | null {\n    const applicable = this.getApplicableScenarios(character, type);\n    if (applicable.length === 0) return null;\n    \n    const randomIndex = Math.floor(Math.random() * applicable.length);\n    return applicable[randomIndex];\n  }\n  \n  static processSpecialPowerChoice(\n    scenario: SpecialPowerScenario,\n    optionId: string,\n    character: Character,\n    gameData: GameData\n  ): {\n    newCharacter: Character;\n    newGameData: GameData;\n    outcome: string;\n    consequences: string[];\n  } {\n    const option = scenario.options.find(opt => opt.id === optionId);\n    if (!option) {\n      throw new Error(`Invalid option ${optionId} for scenario ${scenario.id}`);\n    }\n    \n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n    \n    // Apply soul and sanity costs\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - option.soulCost);\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - option.sanityCost);\n    \n    // Update corruption stage if needed\n    if (newCharacter.soulPercentage <= 25 && character.soulPercentage > 25) {\n      newCharacter.soulCorruptionStage = \"Broken\";\n    } else if (newCharacter.soulPercentage <= 50 && character.soulPercentage > 50) {\n      newCharacter.soulCorruptionStage = \"Twisted\";\n    } else if (newCharacter.soulPercentage <= 75 && character.soulPercentage > 75) {\n      newCharacter.soulCorruptionStage = \"Frayed\";\n    }\n    \n    // Advance turn and update game state\n    newGameData.turn += 1;\n    \n    // Add to history\n    newGameData.history.push({\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: optionId,\n      consequences: option.consequences,\n      soulLoss: option.soulCost,\n      sanityLoss: option.sanityCost\n    });\n    \n    return {\n      newCharacter,\n      newGameData,\n      outcome: option.outcome,\n      consequences: option.consequences\n    };\n  }\n}","size_bytes":21680},"client/src/lib/expanded-scenarios.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\n\nexport interface ExpandedScenario {\n  id: string;\n  title: string;\n  description: string;\n  narrativeText: string[];\n  type: 'normal' | 'mindreading' | 'prophecy' | 'animus' | 'wars' | 'learning';\n  choices: Choice[];\n  requirements?: (character: Character) => boolean;\n  location?: string;\n}\n\n// Helper function to parse scenario requirements\nfunction parseRequirements(typeStr: string): ((character: Character) => boolean) | undefined {\n  switch (typeStr.toLowerCase()) {\n    case 'mindreading':\n      return (c) => c.tribalPowers.some(p => p.toLowerCase().includes('mind')) || c.specialPowers.some(p => p.toLowerCase().includes('mind'));\n    case 'prophecy':\n      return (c) => c.tribalPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('future') || p.toLowerCase().includes('sight')) ||\n                   c.specialPowers.some(p => p.toLowerCase().includes('prophecy') || p.toLowerCase().includes('foresight') || p.toLowerCase().includes('future'));\n    case 'animus':\n      return (c) => c.isAnimus;\n    default:\n      return undefined; // No requirements for normal, wars, learning\n  }\n}\n\n// Auto-generated scenarios from attached file (first 100 as examples)\nconst AUTO_SCENARIOS: ExpandedScenario[] = [\n  {\n    id: \"scenario_1\",\n    title: \"Unexpected Friendship\",\n    description: \"A dragon offers friendship. Do you accept or push them away?\",\n    narrativeText: [\"A dragon approaches you with an earnest expression, offering their friendship.\"],\n    type: 'normal',\n    choices: [\n      { id: \"accept\", text: \"Accept their friendship\", description: \"Welcome this new connection\", soulCost: 0, sanityCost: 0, consequences: [\"Gained new friend\"], corruption: false },\n      { id: \"reject\", text: \"Push them away\", description: \"Reject their offer\", soulCost: 1, sanityCost: 0, consequences: [\"Hurt their feelings\"], corruption: false }\n    ]\n  },\n  {\n    id: \"scenario_2\",\n    title: \"Mental Overload\",\n    description: \"You hear multiple thoughts at once. Do you focus or retreat from the noise?\",\n    narrativeText: [\"Your mind-reading ability suddenly activates, flooding you with multiple thoughts at once.\"],\n    type: 'mindreading',\n    requirements: parseRequirements('mindreading'),\n    choices: [\n      { id: \"focus\", text: \"Focus and filter the thoughts\", description: \"Try to control the mental flood\", soulCost: 0, sanityCost: 5, consequences: [\"Better mind control\"], corruption: false },\n      { id: \"retreat\", text: \"Retreat from the noise\", description: \"Pull back from the mental chaos\", soulCost: 0, sanityCost: 2, consequences: [\"Avoided overload\"], corruption: false }\n    ]\n  },\n  {\n    id: \"scenario_7\",\n    title: \"Immortality Request\",\n    description: \"A dragon asks you to enchant them immortal. Do you grant their wish or refuse?\",\n    narrativeText: [\"A desperate dragon begs you to use your animus magic to make them immortal.\"],\n    type: 'animus',\n    requirements: parseRequirements('animus'),\n    choices: [\n      { id: \"grant\", text: \"Grant immortality\", description: \"Use powerful animus magic\", soulCost: 20, sanityCost: 0, consequences: [\"Massive soul corruption\"], corruption: true },\n      { id: \"refuse\", text: \"Refuse the request\", description: \"Preserve your soul integrity\", soulCost: 0, sanityCost: 3, consequences: [\"Maintained ethics\"], corruption: false }\n    ]\n  }\n];\n\n// Core detailed scenarios\nexport const EXPANDED_SCENARIOS: ExpandedScenario[] = [\n  {\n    id: \"friendship_offer\",\n    title: \"Unexpected Friendship\",\n    description: \"A dragon approaches you with an offer of friendship.\",\n    narrativeText: [\n      \"A dragon you barely know approaches you in the halls of Jade Mountain Academy.\",\n      \"Their expression is earnest but nervous. 'I've been watching you from afar,' they say.\",\n      \"'You seem like someone I'd like to know better. Would you be interested in being friends?'\"\n    ],\n    type: 'normal',\n    choices: [\n      {\n        id: \"accept_friendship\",\n        text: \"Accept their friendship warmly\",\n        description: \"Welcome this new connection into your life\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Gained a new loyal friend\", \"Increased social connections\", \"Built reputation for kindness\"],\n        corruption: false\n      },\n      {\n        id: \"push_away\",\n        text: \"Push them away coldly\",\n        description: \"Reject their offer and maintain your isolation\",\n        soulCost: 1,\n        sanityCost: 0,\n        consequences: [\"Hurt their feelings deeply\", \"Reputation for being antisocial\", \"Missed potential friendship\"],\n        corruption: false\n      },\n      {\n        id: \"cautious_acceptance\",\n        text: \"Accept cautiously\",\n        description: \"Give them a chance but keep your guard up\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Formed cautious friendship\", \"Maintained healthy boundaries\", \"Learned to be more trusting\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"multiple_thoughts\",\n    title: \"Mental Overload\",\n    description: \"Your mind reading ability picks up multiple thoughts at once.\",\n    narrativeText: [\n      \"Suddenly, your mind reading ability activates without warning during a crowded gathering.\",\n      \"Dozens of voices flood your consciousness - fears, secrets, petty thoughts, and deep emotions.\",\n      \"The mental noise threatens to overwhelm your own thoughts entirely.\"\n    ],\n    type: 'mindreading',\n    requirements: (c) => c.tribalPowers.some(p => p.toLowerCase().includes('mind')) || c.specialPowers.some(p => p.toLowerCase().includes('mind')),\n    choices: [\n      {\n        id: \"focus_filter\",\n        text: \"Focus and try to filter the thoughts\",\n        description: \"Attempt to control the mental flood and focus on specific voices\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"Learned better mind reading control\", \"Discovered important secrets\", \"Mental strain from effort\"],\n        corruption: false\n      },\n      {\n        id: \"retreat_noise\",\n        text: \"Retreat from the mental noise\",\n        description: \"Pull back and shut down your mind reading ability\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Avoided mental overload\", \"Missed important information\", \"Powers temporarily weakened\"],\n        corruption: false\n      },\n      {\n        id: \"embrace_chaos\",\n        text: \"Embrace the chaotic thoughts\",\n        description: \"Let all the thoughts flow through you without resistance\",\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: [\"Gained profound empathy\", \"Learned everyone's deepest secrets\", \"Severe mental exhaustion\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"battle_tactics\",\n    title: \"Advanced Combat Knowledge\",\n    description: \"You overhear advanced battle tactics being discussed.\",\n    narrativeText: [\n      \"While studying in a quiet corner of the library, you overhear two older dragons discussing advanced battle tactics.\",\n      \"They're sharing techniques that aren't taught in normal classes - strategies that could make you a formidable warrior.\",\n      \"They haven't noticed you listening. This knowledge could be invaluable in future conflicts.\"\n    ],\n    type: 'learning',\n    choices: [\n      {\n        id: \"learn_tactics\",\n        text: \"Listen carefully and memorize the tactics\",\n        description: \"Absorb this valuable combat knowledge\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Learned advanced battle techniques\", \"Gained tactical advantage\", \"Improved combat skills\"],\n        corruption: false\n      },\n      {\n        id: \"forget_tactics\",\n        text: \"Try to forget what you heard\",\n        description: \"Decide this knowledge is too dangerous to possess\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Maintained moral innocence\", \"Avoided becoming militaristic\", \"Missed strategic advantage\"],\n        corruption: false\n      },\n      {\n        id: \"confront_teachers\",\n        text: \"Reveal yourself and ask to be taught properly\",\n        description: \"Be honest about overhearing and request formal training\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Earned respect for honesty\", \"Gained proper military training\", \"Built relationship with instructors\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"feast_invitation\",\n    title: \"Grand Feast\",\n    description: \"You are invited to a grand feast with important dragons.\",\n    narrativeText: [\n      \"A formal invitation arrives, written on expensive parchment with golden ink.\",\n      \"You're invited to a feast hosted by influential dragons from multiple tribes.\",\n      \"This could be a valuable networking opportunity, but such gatherings can also be politically dangerous.\"\n    ],\n    type: 'normal',\n    choices: [\n      {\n        id: \"join_feast\",\n        text: \"Join the feast and mingle\",\n        description: \"Attend the feast and try to make important connections\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Made important political connections\", \"Learned valuable information\", \"Gained social status\"],\n        corruption: false\n      },\n      {\n        id: \"decline_feast\",\n        text: \"Politely decline the invitation\",\n        description: \"Send your regrets and avoid the political complexity\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Avoided political entanglements\", \"Maintained neutrality\", \"Missed networking opportunities\"],\n        corruption: false\n      },\n      {\n        id: \"sneak_feast\",\n        text: \"Sneak away from the feast after appearing\",\n        description: \"Make a brief appearance then quietly leave\",\n        soulCost: 0,\n        sanityCost: 1,\n        consequences: [\"Avoided commitment while maintaining appearances\", \"Gathered some information\", \"Risked appearing rude\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"darkstalker_dream\",\n    title: \"The Dark Temptation\",\n    description: \"Darkstalker appears to you in a dream, offering forbidden knowledge.\",\n    narrativeText: [\n      \"In your dreams, the massive form of Darkstalker materializes before you.\",\n      \"His ancient eyes gleam with terrible wisdom. 'Young animus,' he purrs, 'I can teach you spells beyond imagination.'\",\n      \"'Magic that could reshape the world itself. All you need do is listen and learn.'\"\n    ],\n    type: 'animus',\n    requirements: (c) => c.isAnimus,\n    choices: [\n      {\n        id: \"accept_knowledge\",\n        text: \"Accept his forbidden teachings\",\n        description: \"Learn powerful but dangerous animus magic\",\n        soulCost: 15,\n        sanityCost: 5,\n        consequences: [\"Gained immense magical power\", \"Learned dangerous spells\", \"Soul deeply corrupted by darkness\"],\n        corruption: true\n      },\n      {\n        id: \"reject_darkstalker\",\n        text: \"Reject his offer completely\",\n        description: \"Turn away from his temptations\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Maintained soul integrity\", \"Resisted corruption\", \"Darkstalker marked you as an enemy\"],\n        corruption: false\n      },\n      {\n        id: \"bargain_carefully\",\n        text: \"Try to bargain for safer knowledge\",\n        description: \"Attempt to gain some power without full corruption\",\n        soulCost: 5,\n        sanityCost: 3,\n        consequences: [\"Gained moderate power\", \"Partially corrupted soul\", \"Darkstalker finds you interesting\"],\n        corruption: true\n      }\n    ]\n  },\n  {\n    id: \"immortality_request\",\n    title: \"The Immortality Plea\",\n    description: \"A desperate dragon begs you to use animus magic to make them immortal.\",\n    narrativeText: [\n      \"A dragon approaches you with tears in their eyes, having learned of your animus abilities.\",\n      \"'Please,' they beg, 'my family is dying of a plague. Make me immortal so I can care for them forever.'\",\n      \"The desperation in their voice is heartbreaking, but immortality magic is among the most soul-corrupting spells.\"\n    ],\n    type: 'animus',\n    requirements: (c) => c.isAnimus,\n    choices: [\n      {\n        id: \"grant_immortality\",\n        text: \"Grant their wish for immortality\",\n        description: \"Cast the immortality spell despite the cost\",\n        soulCost: 20,\n        sanityCost: 0,\n        consequences: [\"Granted immortality\", \"Massive soul corruption\", \"Dragon becomes obsessed with you\"],\n        corruption: true\n      },\n      {\n        id: \"refuse_immortality\",\n        text: \"Refuse to cast such dangerous magic\",\n        description: \"Explain why immortality magic is too dangerous\",\n        soulCost: 0,\n        sanityCost: 5,\n        consequences: [\"Preserved soul integrity\", \"Dragon died with their family\", \"Guilt over refusing help\"],\n        corruption: false\n      },\n      {\n        id: \"offer_alternative\",\n        text: \"Offer to heal their family instead\",\n        description: \"Use less corrupting magic to heal rather than prevent death\",\n        soulCost: 8,\n        sanityCost: 0,\n        consequences: [\"Healed the family plague\", \"Moderate soul cost\", \"Dragon eternally grateful\"],\n        corruption: false\n      }\n    ]\n  }\n];\n\n// Location-specific special scenarios that are rare (3 every 10 minutes)\nexport const LOCATION_SPECIAL_SCENARIOS: ExpandedScenario[] = [\n  {\n    id: \"nightwing_rainwing_architecture\",\n    title: \"Cultural Architecture Dispute\",\n    description: \"The NightWing-RainWing village faces an architectural disagreement.\",\n    narrativeText: [\n      \"The NightWing-RainWing village represents something unprecedented in dragon history - two tribes learning to live as one community.\",\n      \"You witness daily interactions between dragons whose cultures couldn't be more different.\",\n      \"A dispute has arisen over architectural styles for new buildings. Some NightWings want their traditional dark, angular designs while RainWings prefer organic, tree-integrated structures that blend with the forest.\",\n      \"Your input could help shape how this experimental community develops. The decisions made here might serve as a model for inter-tribal cooperation throughout Pyrrhia.\"\n    ],\n    type: 'normal',\n    location: \"NightWing Village\",\n    choices: [\n      {\n        id: \"support_nightwing_style\",\n        text: \"Support traditional NightWing architecture\",\n        description: \"Advocate for the structured, angular NightWing building style\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"NightWings feel validated\", \"RainWings feel dismissed\", \"Village develops NightWing aesthetic\"],\n        corruption: false\n      },\n      {\n        id: \"support_rainwing_style\", \n        text: \"Support organic RainWing integration\",\n        description: \"Advocate for buildings that blend with the forest\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"RainWings feel heard\", \"NightWings feel marginalized\", \"Village maintains forest harmony\"],\n        corruption: false\n      },\n      {\n        id: \"propose_hybrid_design\",\n        text: \"Propose a hybrid architectural style\",\n        description: \"Suggest combining elements from both tribal traditions\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Created new architectural style\", \"Both tribes compromise\", \"Set precedent for cooperation\"],\n        corruption: false\n      },\n      {\n        id: \"suggest_district_system\",\n        text: \"Suggest separate architectural districts\",\n        description: \"Propose different areas for different building styles\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Maintained both traditions\", \"Created some segregation\", \"Practical compromise reached\"],\n        corruption: false\n      }\n    ]\n  },\n  {\n    id: \"ice_kingdom_diplomatic_crisis\",\n    title: \"Ice Kingdom Diplomatic Incident\",\n    description: \"A diplomatic crisis unfolds in the Ice Kingdom's frozen halls.\",\n    narrativeText: [\n      \"The Ice Kingdom's crystalline palace echoes with tension as delegates from warring tribes attempt negotiations.\",\n      \"You witness a heated argument between a SkyWing ambassador and a MudWing representative over territory disputes.\",\n      \"The IceWing queen watches with calculating eyes, clearly planning to use this conflict to her advantage.\",\n      \"Your intervention could either prevent a war or escalate the situation beyond repair.\"\n    ],\n    type: 'normal',\n    location: \"Ice Kingdom\",\n    choices: [\n      {\n        id: \"mediate_dispute\",\n        text: \"Offer to mediate between the tribes\",\n        description: \"Step forward and try to find common ground\",\n        soulCost: 0,\n        sanityCost: 3,\n        consequences: [\"Prevented immediate war\", \"Gained diplomatic reputation\", \"Made enemies of war profiteers\"],\n        corruption: false\n      },\n      {\n        id: \"support_mudwings\",\n        text: \"Publicly support the MudWing claims\",\n        description: \"Take a side in the territorial dispute\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Gained MudWing alliance\", \"Made SkyWing enemies\", \"Influenced territorial outcome\"],\n        corruption: false\n      },\n      {\n        id: \"warn_icewing_queen\",\n        text: \"Privately warn the IceWing queen about the implications\",\n        description: \"Share your concerns about escalation with Queen Glacier\",\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [\"Influenced IceWing policy\", \"Gained royal attention\", \"Potentially prevented larger conflict\"],\n        corruption: false\n      },\n      {\n        id: \"stay_neutral\",\n        text: \"Remain neutral and observe\",\n        description: \"Watch the situation unfold without intervention\",\n        soulCost: 0,\n        sanityCost: 2,\n        consequences: [\"Avoided taking sides\", \"Learned valuable intelligence\", \"Felt guilt over inaction\"],\n        corruption: false\n      }\n    ]\n  }\n];\n\nexport class ExpandedScenarioSystem {\n  private static lastSpecialScenarioTime: number = 0;\n  private static readonly SPECIAL_SCENARIO_COOLDOWN = 10 * 60 * 1000; // 10 minutes in milliseconds\n  private static specialScenariosUsed: number = 0;\n  private static readonly MAX_SPECIAL_SCENARIOS_PER_PERIOD = 3;\n\n  static getRandomExpandedScenario(character: Character, type?: string): ExpandedScenario | null {\n    // Combine all scenarios\n    const allScenarios = [...EXPANDED_SCENARIOS, ...AUTO_SCENARIOS];\n    \n    let eligibleScenarios = allScenarios.filter(scenario => {\n      // Check type filter\n      if (type && scenario.type !== type) return false;\n      \n      // Check requirements\n      if (scenario.requirements && !scenario.requirements(character)) return false;\n      \n      return true;\n    });\n\n    if (eligibleScenarios.length === 0) return null;\n    \n    const randomIndex = Math.floor(Math.random() * eligibleScenarios.length);\n    return eligibleScenarios[randomIndex];\n  }\n\n  static tryGetLocationSpecialScenario(character: Character, location: string): ExpandedScenario | null {\n    const now = Date.now();\n    \n    // Check cooldown and usage limits\n    if (now - this.lastSpecialScenarioTime < this.SPECIAL_SCENARIO_COOLDOWN) {\n      return null;\n    }\n    \n    if (this.specialScenariosUsed >= this.MAX_SPECIAL_SCENARIOS_PER_PERIOD) {\n      return null;\n    }\n\n    // Reset counter if enough time has passed\n    if (now - this.lastSpecialScenarioTime > this.SPECIAL_SCENARIO_COOLDOWN * 2) {\n      this.specialScenariosUsed = 0;\n    }\n\n    // Find scenarios for this location\n    const locationScenarios = LOCATION_SPECIAL_SCENARIOS.filter(scenario => \n      !scenario.location || scenario.location === location\n    );\n\n    if (locationScenarios.length === 0) return null;\n\n    // 15% chance to trigger special scenario\n    if (Math.random() > 0.15) return null;\n\n    const randomIndex = Math.floor(Math.random() * locationScenarios.length);\n    const scenario = locationScenarios[randomIndex];\n\n    // Update tracking\n    this.lastSpecialScenarioTime = now;\n    this.specialScenariosUsed++;\n\n    console.log(`Special location scenario triggered: ${scenario.title} (${this.specialScenariosUsed}/${this.MAX_SPECIAL_SCENARIOS_PER_PERIOD})`);\n\n    return scenario;\n  }\n\n  static resetSpecialScenarioState(): void {\n    this.lastSpecialScenarioTime = 0;\n    this.specialScenariosUsed = 0;\n  }\n\n  static convertToScenario(expandedScenario: ExpandedScenario, gameData: GameData): Scenario {\n    return {\n      id: expandedScenario.id,\n      title: expandedScenario.title,\n      description: expandedScenario.description,\n      narrativeText: expandedScenario.narrativeText,\n      choices: expandedScenario.choices,\n      type: expandedScenario.type as any,\n      location: gameData.location,\n      timeOfDay: 'afternoon',\n      weather: 'clear'\n    };\n  }\n}","size_bytes":20937},"client/src/components/ai-control-overlay.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { SoundtrackSystem } from '@/lib/soundtrack-system';\n\ninterface AIControlOverlayProps {\n  isVisible: boolean;\n}\n\nexport function AIControlOverlay({ isVisible }: AIControlOverlayProps) {\n  const [timeRemaining, setTimeRemaining] = React.useState(0);\n\n  React.useEffect(() => {\n    if (!isVisible) return;\n\n    const interval = setInterval(() => {\n      const remaining = SoundtrackSystem.getAIControlTimeRemaining();\n      setTimeRemaining(remaining);\n    }, 100); // Update more frequently for smooth countdown\n\n    return () => clearInterval(interval);\n  }, [isVisible]);\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center\"\n      data-testid=\"ai-control-overlay\"\n    >\n      <Card className=\"w-full max-w-2xl mx-4 border-4 border-red-500 bg-red-50 dark:bg-red-950\">\n        <CardContent className=\"p-8 text-center space-y-6\">\n          {/* Dramatic Title */}\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold text-red-800 dark:text-red-200 animate-pulse\">\n              🤖 ANIMUS MAGIC CORRUPTION 🤖\n            </h1>\n            <Badge variant=\"destructive\" className=\"text-lg px-4 py-2\" data-testid=\"ai-timer\">\n              {formatTime(timeRemaining)}\n            </Badge>\n          </div>\n\n          {/* Corruption Description */}\n          <div className=\"space-y-4 text-red-700 dark:text-red-300\">\n            <p className=\"text-lg font-semibold\">\n              Your soul has been completely consumed by animus magic!\n            </p>\n            \n            <p className=\"text-base\">\n              The dark power now controls your mind and body. Ancient magic flows through you, \n              making decisions beyond your conscious will. You are a passenger in your own form, \n              watching helplessly as corruption guides your actions.\n            </p>\n\n            <p className=\"text-base italic\">\n              \"This is what happens when dragons delve too deep into animus magic. \n              The power that once served them now rules them entirely.\"\n            </p>\n          </div>\n\n          {/* Visual Effects */}\n          <div className=\"flex justify-center space-x-4\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-bounce\"></div>\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n          </div>\n\n          {/* Status Message */}\n          <div className=\"bg-red-100 dark:bg-red-900 p-4 rounded-lg border-2 border-red-400\">\n            <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n              The AI is making choices for your character. Control will return when the corruption subsides.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3331},"client/src/components/game-over-screen.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skull, Home, RotateCcw, Star } from \"lucide-react\";\n\ninterface GameOverScreenProps {\n  isVisible: boolean;\n  reason: string;\n  allowContinue?: boolean;\n  onNewGame: () => void;\n  onMainMenu: () => void;\n  onContinueCorrupted?: () => void;\n}\n\nexport default function GameOverScreen({ \n  isVisible, \n  reason, \n  allowContinue, \n  onNewGame, \n  onMainMenu,\n  onContinueCorrupted \n}: GameOverScreenProps) {\n  if (!isVisible) return null;\n\n  const isCorruptedSoul = reason.includes(\"soul\") || reason.includes(\"corruption\") || reason.includes(\"AI\");\n\n  return (\n    <div className=\"fixed inset-0 bg-black/95 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-md bg-red-950/90 border-red-500/50 text-center\">\n        <CardHeader>\n          <div className=\"flex justify-center mb-4\">\n            {isCorruptedSoul ? (\n              <div className=\"w-16 h-16 bg-red-600/20 rounded-full flex items-center justify-center\">\n                <div className=\"text-4xl\">💀</div>\n              </div>\n            ) : (\n              <Skull className=\"w-16 h-16 text-red-400\" />\n            )}\n          </div>\n          <CardTitle className=\"text-2xl font-fantasy text-red-300\">\n            {isCorruptedSoul ? \"Soul Consumed\" : \"Game Over\"}\n          </CardTitle>\n          <CardDescription className=\"text-red-200\">\n            {reason}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isCorruptedSoul && (\n            <div className=\"bg-red-900/50 p-4 rounded-lg border border-red-500/30 text-sm text-red-200\">\n              <p className=\"font-semibold mb-2\">🔥 The Darkness Has Won</p>\n              <p>Your animus magic has consumed your soul completely. The dragon you once were is gone, replaced by an instrument of corruption and chaos.</p>\n            </div>\n          )}\n\n          <div className=\"space-y-3\">\n            {allowContinue && onContinueCorrupted && (\n              <Button \n                onClick={onContinueCorrupted}\n                className=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-fantasy\"\n                data-testid=\"button-continue-corrupted\"\n              >\n                <Star className=\"w-4 h-4 mr-2\" />\n                Continue as Corrupted Soul\n              </Button>\n            )}\n            \n            <Button \n              onClick={onNewGame}\n              className=\"w-full bg-green-600 hover:bg-green-700 text-white font-fantasy\"\n              data-testid=\"button-new-game\"\n            >\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Start New Dragon\n            </Button>\n            \n            <Button \n              variant=\"outline\"\n              onClick={onMainMenu}\n              className=\"w-full border-red-400/50 text-red-300 hover:bg-red-500/10\"\n              data-testid=\"button-main-menu\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Return to Main Menu\n            </Button>\n          </div>\n\n          <div className=\"text-xs text-red-400 pt-4 border-t border-red-700\">\n            <p>Every choice has consequences in the world of Pyrrhia</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3395},"client/src/components/soundtrack-controls.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Volume2, VolumeX, Play, Pause } from 'lucide-react';\nimport { SoundtrackSystem } from '@/lib/soundtrack-system';\n\ninterface SoundtrackControlsProps {\n  isVisible?: boolean;\n}\n\nexport function SoundtrackControls({ isVisible = false }: SoundtrackControlsProps) {\n  const [soundtrackState, setSoundtrackState] = React.useState(SoundtrackSystem.getState());\n  const [volume, setVolume] = React.useState(0.3);\n\n  React.useEffect(() => {\n    // Initialize soundtrack system\n    SoundtrackSystem.init();\n    \n    // Update state periodically\n    const interval = setInterval(() => {\n      setSoundtrackState(SoundtrackSystem.getState());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleVolumeChange = (newVolume: number) => {\n    setVolume(newVolume);\n    SoundtrackSystem.setVolume(newVolume);\n  };\n\n  const handleTogglePlayback = () => {\n    SoundtrackSystem.togglePlayback();\n    setSoundtrackState(SoundtrackSystem.getState());\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\" data-testid=\"soundtrack-controls\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Volume2 className=\"w-5 h-5\" />\n          Soundtrack Controls\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Current Track Display */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium\">Now Playing:</span>\n          <Badge variant=\"secondary\" data-testid=\"current-track\">\n            {soundtrackState.currentTrack || 'None'}\n          </Badge>\n        </div>\n\n        {/* AI Control Warning */}\n        {soundtrackState.soul0ControlActive && (\n          <div className=\"bg-red-100 dark:bg-red-900 p-3 rounded-lg border-2 border-red-500\">\n            <div className=\"flex items-center justify-between text-red-800 dark:text-red-200\">\n              <span className=\"font-bold\">🤖 AI CONTROL ACTIVE</span>\n              <Badge variant=\"destructive\" data-testid=\"ai-control-timer\">\n                {formatTime(SoundtrackSystem.getAIControlTimeRemaining())}\n              </Badge>\n            </div>\n            <p className=\"text-sm mt-1 text-red-700 dark:text-red-300\">\n              Your dragon is being controlled by animus magic corruption\n            </p>\n          </div>\n        )}\n\n        {/* Zero Soul Warning */}\n        {SoundtrackSystem.shouldShowZeroSoulWarning() && (\n          <div className=\"bg-yellow-100 dark:bg-yellow-900 p-3 rounded-lg border-2 border-yellow-500\">\n            <div className=\"text-yellow-800 dark:text-yellow-200\">\n              <span className=\"font-bold\">⚠️ SOUL DEPLETED</span>\n              <p className=\"text-sm mt-1\">\n                {SoundtrackSystem.getZeroSoulWarningMessage()}\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Playback Controls */}\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleTogglePlayback}\n            disabled={!soundtrackState.currentTrack}\n            data-testid=\"toggle-playback\"\n          >\n            {soundtrackState.isPlaying ? (\n              <Pause className=\"w-4 h-4\" />\n            ) : (\n              <Play className=\"w-4 h-4\" />\n            )}\n          </Button>\n          \n          <div className=\"flex-1\">\n            <label className=\"text-sm font-medium\">Volume: {Math.round(volume * 100)}%</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.1\"\n              value={volume}\n              onChange={(e) => handleVolumeChange(parseFloat(e.target.value))}\n              className=\"w-full mt-1\"\n              data-testid=\"volume-slider\"\n            />\n          </div>\n        </div>\n\n        {/* Track Info */}\n        {soundtrackState.currentTrack && (\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>Status: {soundtrackState.isPlaying ? 'Playing' : 'Paused'}</div>\n            {soundtrackState.currentTrack.includes('soul') && (\n              <div>Soul-based track active</div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4684},"client/src/lib/soundtrack-system.ts":{"content":"import { Character, GameData } from \"@shared/schema\";\n\nexport interface SoundtrackTrack {\n  id: string;\n  name: string;\n  url: string;\n  type: \"basic\" | \"button\" | \"soul_trigger\" | \"ai_control\" | \"game_over\";\n  soulThreshold?: number;\n  volume: number;\n  loop: boolean;\n  duration?: number;\n}\n\nexport class SoundtrackSystem {\n  private static currentAudio: HTMLAudioElement | null = null;\n  private static currentTrack: string | null = null;\n  private static isMuted: boolean = false;\n  private static volume: number = 0.7;\n  private static aiControlTimer: NodeJS.Timeout | null = null;\n  private static onAIControlStart?: () => void;\n  private static onAIControlEnd?: () => void;\n  private static trackSwitchTimer: NodeJS.Timeout | null = null;\n  private static isTransitioning: boolean = false;\n  private static audioLock: boolean = false;\n\n  private static readonly TRACKS: SoundtrackTrack[] = [\n    // Basic background OSTs (passive)\n    {\n      id: \"basic_ost\",\n      name: \"Basic Academy Ambience\",\n      url: \"/ost/basicost_1755480743859.mp3\",\n      type: \"basic\",\n      volume: 0.4,\n      loop: true\n    },\n    {\n      id: \"basic_ost_2\",\n      name: \"Alternative Academy Theme\",\n      url: \"/ost/basicost2_1755480743857.mp3\",\n      type: \"basic\",\n      volume: 0.4,\n      loop: true\n    },\n    \n    // Button click sound\n    {\n      id: \"button_sound\",\n      name: \"Button Click\",\n      url: \"/ost/buttonsound_1755480743860.mp3\",\n      type: \"button\",\n      volume: 0.6,\n      loop: false\n    },\n    \n    // Soul threshold triggers - URLs properly encoded\n    {\n      id: \"soul_below_40\",\n      name: \"Soul Corruption Warning\",\n      url: \"/ost/ifsoulbelow40%25loopsong_1755480743860.mp3\",\n      type: \"soul_trigger\",\n      soulThreshold: 40,\n      volume: 0.5,\n      loop: true\n    },\n    {\n      id: \"soul_below_20\",\n      name: \"Critical Soul Loss\",\n      url: \"/ost/ifsoulbelow20%25playandloop_1755480787933.mp3\",\n      type: \"soul_trigger\",\n      soulThreshold: 20,\n      volume: 0.6,\n      loop: true\n    },\n    \n    // AI Control (when soul hits 0%)\n    {\n      id: \"soul_0_ai_control\",\n      name: \"AI Takes Control\",\n      url: \"/ost/ifsoul0%25play_1755480787934.mp3\",\n      type: \"ai_control\",\n      soulThreshold: 0,\n      volume: 0.8,\n      loop: false,\n      duration: 133000 // 2 minutes 13 seconds in milliseconds\n    },\n    \n    // Game Over (if animus magic used again after warning)\n    {\n      id: \"animus_death\",\n      name: \"Final Corruption\",\n      url: \"/ost/ifuseanimusmagicagainplay_1755480879926.mp3\",\n      type: \"game_over\",\n      volume: 0.7,\n      loop: false\n    }\n  ];\n\n  static initialize(onAIControlStart?: () => void, onAIControlEnd?: () => void): void {\n    // Set default volume from localStorage if available\n    const savedVolume = localStorage.getItem('wof_game_volume');\n    const savedMuted = localStorage.getItem('wof_game_muted');\n    \n    if (savedVolume) {\n      this.volume = parseFloat(savedVolume);\n    }\n    \n    if (savedMuted) {\n      this.isMuted = savedMuted === 'true';\n    }\n\n    // Set AI control callbacks\n    this.onAIControlStart = onAIControlStart;\n    this.onAIControlEnd = onAIControlEnd;\n\n    // Start with basic academy music\n    this.playTrack('basic_ost');\n  }\n\n  static playTrack(trackId: string, force: boolean = false): void {\n    // Prevent multiple simultaneous audio operations\n    if (this.audioLock && !force) {\n      console.log('Audio operation in progress, skipping track request');\n      return;\n    }\n    \n    if (this.isMuted && !force) return;\n    if (this.currentTrack === trackId && !force) return;\n\n    const track = this.TRACKS.find(t => t.id === trackId);\n    if (!track) {\n      console.warn(`Track not found: ${trackId}`);\n      return;\n    }\n\n    // Set audio lock\n    this.audioLock = true;\n    console.log(`🎵 Starting track transition to: ${track.name}`);\n\n    // CRITICAL: Stop all existing audio completely before starting new track\n    this.stopCurrentTrack();\n    \n    // Add delay to ensure previous audio is fully stopped\n    setTimeout(() => {\n      try {\n        // Create new audio element\n        this.currentAudio = new Audio(track.url);\n        this.currentAudio.volume = this.volume * track.volume;\n        this.currentAudio.loop = track.loop;\n        \n        // Set up error handling\n        this.currentAudio.onerror = (error) => {\n          console.warn(`Audio error for ${track.name}:`, error);\n          console.warn(`Failed URL: ${track.url}`);\n          // Reset state on error\n          this.currentTrack = null;\n          this.currentAudio = null;\n          this.audioLock = false;\n        };\n        \n        // Set up load event\n        this.currentAudio.onloadstart = () => {\n          console.log(`Loading audio: ${track.name} from ${track.url}`);\n        };\n        \n        this.currentAudio.oncanplay = () => {\n          console.log(`Audio ready: ${track.name}`);\n        };\n        \n        // Handle track ending\n        this.currentAudio.onended = () => {\n          console.log(`Track ended: ${track.name}`);\n          if (!track.loop) {\n            this.currentTrack = null;\n            this.currentAudio = null;\n          }\n          this.audioLock = false;\n        };\n        \n        // Handle AI control track specially\n        if (track.type === 'ai_control') {\n          this.handleAIControlTrack(track);\n        }\n        \n        // Play the track with better error handling\n        const playPromise = this.currentAudio.play();\n        if (playPromise) {\n          playPromise\n            .then(() => {\n              console.log(`🎵 Successfully playing: ${track.name}`);\n              this.currentTrack = trackId;\n              this.audioLock = false; // Release lock on success\n            })\n            .catch(error => {\n              console.error(`Failed to play ${track.name}:`, error);\n              console.error(`URL: ${track.url}`);\n              this.currentTrack = null;\n              this.currentAudio = null;\n              this.audioLock = false; // Release lock on failure\n              \n              // Don't cascade failures - just log and reset\n              console.log(\"Track failed to play, audio system reset\");\n            });\n        }\n        \n      } catch (error) {\n        console.error(\"Could not create audio track:\", error);\n        console.error(`Track: ${track.name}, URL: ${track.url}`);\n        this.currentTrack = null;\n        this.currentAudio = null;\n        this.audioLock = false;\n      }\n    }, 300); // Longer delay to ensure clean audio transitions\n  }\n\n  private static handleAIControlTrack(track: SoundtrackTrack): void {\n    console.log('AI Control track starting...');\n    \n    // Trigger AI control mode\n    if (this.onAIControlStart) {\n      this.onAIControlStart();\n    }\n    \n    // Set timer for AI control duration (2 minutes 13 seconds)\n    if (this.aiControlTimer) {\n      clearTimeout(this.aiControlTimer);\n    }\n    \n    this.aiControlTimer = setTimeout(() => {\n      console.log('AI Control duration ended, showing warning...');\n      \n      // Show warning and end AI control\n      if (this.onAIControlEnd) {\n        this.onAIControlEnd();\n      }\n      \n      // Important: Don't automatically switch to another track\n      // Let the game handle the next music choice based on player action\n      console.log('AI Control ended, waiting for next game state update...');\n      \n    }, track.duration || 133000);\n  }\n\n  static stopCurrentTrack(): void {\n    if (this.currentAudio) {\n      console.log(`Stopping current track: ${this.currentTrack}`);\n      this.currentAudio.pause();\n      this.currentAudio.currentTime = 0;\n      // Remove all event listeners to prevent memory leaks\n      this.currentAudio.onloadstart = null;\n      this.currentAudio.oncanplay = null;\n      this.currentAudio.onerror = null;\n      this.currentAudio.onended = null;\n      this.currentAudio = null;\n    }\n    \n    if (this.aiControlTimer) {\n      clearTimeout(this.aiControlTimer);\n      this.aiControlTimer = null;\n    }\n    \n    if (this.trackSwitchTimer) {\n      clearTimeout(this.trackSwitchTimer);\n      this.trackSwitchTimer = null;\n    }\n    \n    this.currentTrack = null;\n  }\n\n  static setMuted(muted: boolean): void {\n    this.isMuted = muted;\n    localStorage.setItem('wof_game_muted', muted.toString());\n    \n    if (muted) {\n      this.stopCurrentTrack();\n    } else {\n      // Resume with basic track\n      this.playTrack('basic_ost');\n    }\n  }\n\n  static setVolume(volume: number): void {\n    this.volume = Math.max(0, Math.min(1, volume));\n    localStorage.setItem('wof_game_volume', this.volume.toString());\n    \n    // Update current track volume\n    if (this.currentAudio) {\n      const currentTrack = this.TRACKS.find(t => t.id === this.currentTrack);\n      if (currentTrack) {\n        this.currentAudio.volume = this.volume * currentTrack.volume;\n      }\n    }\n  }\n\n  static getContextualTrack(character: Character, gameData: GameData): string {\n    // Soul-based track selection (highest priority)\n    if (character.soulPercentage === 0) {\n      return 'soul_0_ai_control';\n    }\n    \n    if (character.soulPercentage <= 20) {\n      return 'soul_below_20';\n    }\n    \n    if (character.soulPercentage <= 40) {\n      return 'soul_below_40';\n    }\n    \n    // Only return basic OST if we're not currently playing a soul track\n    // This prevents interrupting soul tracks when they should stay dominant\n    const currentTrack = this.currentTrack;\n    if (currentTrack === 'soul_below_20' || currentTrack === 'soul_below_40' || currentTrack === 'soul_0_ai_control') {\n      return currentTrack; // Keep playing the current soul track\n    }\n    \n    // Default to basic OST for healthy soul - maintain current basic track if playing\n    if (currentTrack === 'basic_ost' || currentTrack === 'basic_ost_2') {\n      return currentTrack; // Keep current basic track to prevent unnecessary switches\n    }\n    \n    return Math.random() > 0.5 ? 'basic_ost' : 'basic_ost_2';\n  }\n\n  static updateBasedOnGameState(character: Character, gameData: GameData): void {\n    // Prevent rapid track switching with debouncing\n    if (this.isTransitioning) {\n      console.log('Track transition in progress, skipping update');\n      return;\n    }\n\n    const soulPercentage = character.soulPercentage || 100;\n    console.log(`Updating soundtrack for soul: ${soulPercentage}%`);\n    \n    // Determine what track should be playing based on soul percentage\n    let targetTrack = '';\n    \n    if (soulPercentage === 0) {\n      targetTrack = 'soul_0_ai_control';\n    } else if (soulPercentage <= 20) {\n      targetTrack = 'soul_below_20';\n    } else if (soulPercentage <= 40) {\n      targetTrack = 'soul_below_40';\n    } else {\n      // When soul recovers above 40%, always switch to basic music\n      // Don't keep playing soul tracks when soul is healthy\n      targetTrack = Math.random() > 0.5 ? 'basic_ost' : 'basic_ost_2';\n    }\n    \n    // Only change if different from current track and it's a necessary change\n    if (this.currentTrack !== targetTrack) {\n      console.log(`Switching from ${this.currentTrack} to ${targetTrack}`);\n      \n      // Set transitioning flag\n      this.isTransitioning = true;\n      \n      // Clear any existing track switch timer\n      if (this.trackSwitchTimer) {\n        clearTimeout(this.trackSwitchTimer);\n      }\n      \n      // Clear any AI control timer if switching away from AI control\n      if (this.aiControlTimer && targetTrack !== 'soul_0_ai_control') {\n        clearTimeout(this.aiControlTimer);\n        this.aiControlTimer = null;\n        if (this.onAIControlEnd) {\n          this.onAIControlEnd();\n        }\n      }\n      \n      // Stop current track immediately\n      this.stopCurrentTrack();\n      \n      // Play new track with a delay to ensure clean transition\n      this.trackSwitchTimer = setTimeout(() => {\n        this.playTrack(targetTrack, true);\n        \n        // Handle AI control special case - only for 0% soul\n        if (targetTrack === 'soul_0_ai_control') {\n          this.handleAIControlTrack(this.TRACKS.find(t => t.id === targetTrack)!);\n        }\n        \n        // Reset transitioning flag after a longer delay\n        setTimeout(() => {\n          this.isTransitioning = false;\n        }, 1000);\n        \n      }, 500);\n    }\n  }\n\n  static playButtonSound(): void {\n    if (this.isMuted) return;\n    \n    // Play button sound without interrupting background music\n    try {\n      const buttonAudio = new Audio(\"/ost/buttonsound_1755480743860.mp3\");\n      buttonAudio.volume = this.volume * 0.6;\n      buttonAudio.play().catch(error => {\n        console.warn(\"Could not play button sound:\", error);\n      });\n    } catch (error) {\n      console.warn(\"Could not create button audio:\", error);\n    }\n  }\n\n  static playGameOverTrack(): void {\n    console.log('Playing game over track: animus death');\n    // Force stop all other audio and play game over\n    this.isTransitioning = true;\n    this.stopCurrentTrack();\n    \n    setTimeout(() => {\n      this.playTrack('animus_death', true);\n      this.isTransitioning = false;\n    }, 300);\n  }\n\n  static checkSoulThresholds(oldSoul: number, newSoul: number, character: Character, gameData: GameData): boolean {\n    // Check if any soul thresholds were crossed\n    let shouldUpdateMusic = false;\n    \n    // Soul hit 0% - trigger AI control\n    if (oldSoul > 0 && newSoul === 0) {\n      this.playTrack('soul_0_ai_control', true);\n      return true; // AI control started\n    }\n    \n    // Soul dropped below 20%\n    if (oldSoul > 20 && newSoul <= 20) {\n      this.playTrack('soul_below_20', true);\n      shouldUpdateMusic = true;\n    }\n    // Soul dropped below 40%\n    else if (oldSoul > 40 && newSoul <= 40) {\n      this.playTrack('soul_below_40', true);\n      shouldUpdateMusic = true;\n    }\n    \n    // Soul recovered above thresholds - play appropriate track based on current soul level\n    if (oldSoul <= 20 && newSoul > 20 && newSoul <= 40) {\n      this.playTrack('soul_below_40', true);\n      shouldUpdateMusic = true;\n    }\n    else if (oldSoul <= 40 && newSoul > 40) {\n      this.updateBasedOnGameState(character, gameData);\n      shouldUpdateMusic = true;\n    }\n    \n    // If no threshold crossed, only update to contextual track if NOT playing a soul track\n    if (!shouldUpdateMusic) {\n      // Don't interrupt soul tracks unless a new threshold is crossed\n      if (this.currentTrack !== 'soul_below_20' && this.currentTrack !== 'soul_below_40' && this.currentTrack !== 'soul_0_ai_control') {\n        const contextualTrack = this.getContextualTrack(character, gameData);\n        if (this.currentTrack !== contextualTrack) {\n          this.playTrack(contextualTrack, true);\n        }\n      }\n    }\n    \n    return false; // No AI control\n  }\n\n  static playBasicMusic(): void {\n    const basicTracks = ['basic_ost', 'basic_ost_2'];\n    const randomTrack = basicTracks[Math.floor(Math.random() * basicTracks.length)];\n    this.playTrack(randomTrack, true);\n  }\n\n  static isMutedState(): boolean {\n    return this.isMuted;\n  }\n\n  static getCurrentVolume(): number {\n    return this.volume;\n  }\n\n  static isAIControlActive(): boolean {\n    return this.currentTrack === 'soul_0_ai_control' && this.aiControlTimer !== null;\n  }\n}","size_bytes":15241},"client/src/lib/enhanced-animus-artifacts.ts":{"content":"import { InventoryItem, Character, GameData } from \"@shared/schema\";\nimport { Location, LOCATIONS } from \"./location-system\";\n\nexport interface AnimusArtifact extends InventoryItem {\n  discoveryLocation: string;\n  discoveryRequirement?: (character: Character) => boolean;\n  soulCorruptionRisk: number;\n  moralDilemma: string;\n  powerLevel: 'minor' | 'moderate' | 'major' | 'legendary';\n  historicalSignificance: string;\n}\n\n// Comprehensive animus artifacts distributed across all locations\nexport const ANIMUS_ARTIFACTS: AnimusArtifact[] = [\n  // JADE MOUNTAIN ACADEMY\n  {\n    id: \"teachers_scroll\",\n    name: \"Ever-Writing Scroll\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"jade_mountain_academy\",\n    description: \"A scroll that writes down everything spoken in its presence, created by an ancient NightWing animus.\",\n    rarity: \"rare\",\n    effects: [\"Can record conversations and lectures automatically\", \"Reveals hidden knowledge when activated\"],\n    soulCorruptionRisk: 2,\n    powerLevel: \"minor\",\n    moralDilemma: \"This scroll could invade privacy and record private conversations. Do you use it for learning or destroy it?\",\n    historicalSignificance: \"Created by the scholar Truthseeker to preserve important knowledge for future generations.\"\n  },\n  {\n    id: \"founders_compass\",\n    name: \"Founder's Compass\",\n    type: \"magical_artifact\", \n    discoveryLocation: \"jade_mountain_academy\",\n    description: \"A golden compass that always points toward peace and understanding between tribes.\",\n    rarity: \"legendary\",\n    effects: [\"Guides toward peaceful solutions\", \"Reveals the intentions of others\", \"Promotes inter-tribal harmony\"],\n    soulCorruptionRisk: 1,\n    powerLevel: \"major\",\n    moralDilemma: \"This compass could eliminate all conflict, but would also remove free will to choose discord. Should peace be forced?\",\n    historicalSignificance: \"Enchanted by the academy's animus founder to guide future generations toward unity.\"\n  },\n\n  // MUD KINGDOM\n  {\n    id: \"healing_mud_pot\",\n    name: \"Eternal Healing Pot\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"mud_kingdom\", \n    description: \"A clay pot that generates infinite healing mud, able to cure any injury or illness.\",\n    rarity: \"rare\",\n    effects: [\"Provides unlimited healing\", \"Can cure diseases\", \"Regenerates lost limbs\"],\n    soulCorruptionRisk: 3,\n    powerLevel: \"moderate\",\n    moralDilemma: \"Unlimited healing could make dragons reckless or eliminate natural selection. Do you share this freely?\",\n    historicalSignificance: \"Created during the great plague to save thousands of MudWing lives.\"\n  },\n  {\n    id: \"sibling_bond_amulet\",\n    name: \"Sibling Bond Amulet\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"mud_kingdom\",\n    description: \"An amulet that lets MudWings share their fireproof abilities with their siblings permanently.\",\n    rarity: \"uncommon\", \n    effects: [\"Shares fireproof ability with all siblings\", \"Strengthens sibling bonds\", \"Allows shared experiences\"],\n    soulCorruptionRisk: 4,\n    powerLevel: \"minor\",\n    moralDilemma: \"This changes the fundamental nature of MudWing abilities. Is altering natural traits ethical?\",\n    historicalSignificance: \"Made by a bigwings who wanted to protect all their siblings equally.\"\n  },\n\n  // SAND KINGDOM\n  {\n    id: \"desert_oasis_stone\",\n    name: \"Oasis Stone\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"sand_kingdom\",\n    description: \"A blue stone that can create a permanent oasis anywhere in the desert, bringing life to barren lands.\",\n    rarity: \"rare\",\n    effects: [\"Creates permanent water sources\", \"Makes desert bloom\", \"Provides shelter from heat\"],\n    soulCorruptionRisk: 5,\n    powerLevel: \"major\",\n    moralDilemma: \"Creating oases could disrupt desert ecosystems and change territorial boundaries. Do you risk environmental chaos?\",\n    historicalSignificance: \"Forged during the great drought to save the SandWing kingdom from starvation.\"\n  },\n\n  // SCORPION DEN  \n  {\n    id: \"luck_changing_dice\",\n    name: \"Fortune's Dice\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"scorpion_den\",\n    description: \"Enchanted dice that can change luck itself - making the roller incredibly fortunate or cursed.\",\n    rarity: \"uncommon\",\n    effects: [\"Manipulates probability\", \"Can curse or bless others\", \"Influences gambling outcomes\"],\n    soulCorruptionRisk: 6,\n    powerLevel: \"moderate\", \n    moralDilemma: \"Manipulating luck affects everyone around you. Do you use this power knowing it might harm innocent dragons?\",\n    historicalSignificance: \"Created by a desperate gambler who lost everything and wanted to control fate itself.\"\n  },\n  {\n    id: \"truth_revealing_coin\",\n    name: \"Coin of Truth\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"scorpion_den\",\n    description: \"A golden coin that compels absolute honesty from anyone who touches it.\",\n    rarity: \"rare\",\n    effects: [\"Forces truthfulness\", \"Reveals hidden motives\", \"Prevents deception\"],\n    soulCorruptionRisk: 4,\n    powerLevel: \"minor\",\n    moralDilemma: \"Forcing truth eliminates privacy and free will. Should you use this to expose criminals?\",\n    historicalSignificance: \"Made by an information broker to guarantee honest dealings in the lawless den.\"\n  },\n\n  // SKY KINGDOM\n  {\n    id: \"wind_rider_crown\",\n    name: \"Crown of Wind Mastery\", \n    type: \"magical_artifact\",\n    discoveryLocation: \"sky_kingdom\",\n    description: \"A crown that grants perfect control over wind currents and weather patterns.\",\n    rarity: \"legendary\",\n    effects: [\"Controls wind and weather\", \"Perfect flight abilities\", \"Can create storms or calm skies\"],\n    soulCorruptionRisk: 8,\n    powerLevel: \"major\",\n    moralDilemma: \"Weather control affects entire kingdoms. Do you risk creating droughts or floods for personal advantage?\",\n    historicalSignificance: \"Worn by the ancient SkyWing queen who ended the hurricane wars.\"\n  },\n  {\n    id: \"mountain_throne\",\n    name: \"Unshakeable Throne\",\n    type: \"magical_artifact\", \n    discoveryLocation: \"sky_kingdom\",\n    description: \"A throne that makes its occupant completely immune to physical harm and mental manipulation.\",\n    rarity: \"legendary\",\n    effects: [\"Complete invulnerability\", \"Mental protection\", \"Authority enhancement\"],\n    soulCorruptionRisk: 10,\n    powerLevel: \"legendary\",\n    moralDilemma: \"Ultimate protection could corrupt absolutely. Would you become a tyrant if nothing could stop you?\",\n    historicalSignificance: \"Created to protect SkyWing rulers during the age of assassins.\"\n  },\n\n  // SEA KINGDOM\n  {\n    id: \"coral_palace_pearl\",\n    name: \"Pearl of Deep Wisdom\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"sea_kingdom\",\n    description: \"A massive pearl that contains all the knowledge of the ancient SeaWings.\",\n    rarity: \"legendary\",\n    effects: [\"Grants ancient knowledge\", \"Improves intelligence dramatically\", \"Reveals ocean secrets\"],\n    soulCorruptionRisk: 7,\n    powerLevel: \"major\",\n    moralDilemma: \"Ancient knowledge includes dangerous secrets. Should you learn things that were buried for good reasons?\",\n    historicalSignificance: \"Contains the wisdom of every SeaWing scholar who ever lived.\"\n  },\n  {\n    id: \"tide_controlling_conch\",\n    name: \"Conch of the Tides\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"sea_kingdom\", \n    description: \"A magical conch shell that can control ocean tides and underwater currents.\",\n    rarity: \"rare\",\n    effects: [\"Controls tides\", \"Commands sea creatures\", \"Creates underwater pathways\"],\n    soulCorruptionRisk: 5,\n    powerLevel: \"moderate\",\n    moralDilemma: \"Controlling tides affects coastal communities. Do you risk flooding settlements for strategic advantage?\",\n    historicalSignificance: \"Used by SeaWing generals during the naval battles of the succession wars.\"\n  },\n\n  // ICE KINGDOM\n  {\n    id: \"eternal_winter_scepter\",\n    name: \"Scepter of Eternal Winter\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"ice_kingdom\",\n    description: \"A crystal scepter that can bring permanent winter to any location.\",\n    rarity: \"legendary\",\n    effects: [\"Creates permanent winter\", \"Flash-freezes enemies\", \"Controls ice and snow\"],\n    soulCorruptionRisk: 12,\n    powerLevel: \"legendary\",\n    moralDilemma: \"Permanent winter could kill entire ecosystems. Do you use this weapon despite the environmental devastation?\",\n    historicalSignificance: \"Forged during the Great Melting to restore the Ice Kingdom's power.\"\n  },\n  {\n    id: \"ranking_circle_crown\",\n    name: \"Crown of Perfect Rank\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"ice_kingdom\",\n    description: \"A crown that automatically adjusts the wearer's ranking circle to be higher than any IceWing they encounter.\",\n    rarity: \"uncommon\",\n    effects: [\"Highest ranking among IceWings\", \"Social dominance\", \"Command authority\"],\n    soulCorruptionRisk: 6,\n    powerLevel: \"minor\",\n    moralDilemma: \"False ranking undermines IceWing society. Do you cheat your way to power or respect their traditions?\",\n    historicalSignificance: \"Created by an ambitious IceWing who was tired of the ranking system.\"\n  },\n\n  // RAINFOREST KINGDOM\n  {\n    id: \"camouflage_vine\",\n    name: \"Vine of Perfect Concealment\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"rainforest_kingdom\",\n    description: \"A magical vine that grants perfect invisibility to any dragon who wears it.\",\n    rarity: \"rare\",\n    effects: [\"Complete invisibility\", \"Silent movement\", \"Undetectable presence\"],\n    soulCorruptionRisk: 4,\n    powerLevel: \"moderate\", \n    moralDilemma: \"Perfect invisibility enables both protection and harmful spying. How will you use this power?\",\n    historicalSignificance: \"Grown by RainWing botanists during the NightWing occupation for resistance activities.\"\n  },\n  {\n    id: \"fruit_of_knowledge\",\n    name: \"All-Knowing Fruit\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"rainforest_kingdom\",\n    description: \"A magical fruit that grants knowledge of any question asked, but each bite costs memories.\",\n    rarity: \"legendary\",\n    effects: [\"Answers any question\", \"Trades memories for knowledge\", \"Reveals hidden truths\"],\n    soulCorruptionRisk: 9,\n    powerLevel: \"major\",\n    moralDilemma: \"Knowledge at the cost of memories - is wisdom worth losing yourself?\",\n    historicalSignificance: \"Grew from seeds planted by the first NightWing-RainWing hybrid who wanted to bridge both tribes.\"\n  },\n\n  // OLD NIGHT KINGDOM\n  {\n    id: \"prophecy_obsidian\",\n    name: \"Obsidian of Future Sight\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"night_kingdom_old\",\n    description: \"A shard of volcanic glass that shows visions of possible futures, but each vision ages the user.\",\n    rarity: \"legendary\",\n    effects: [\"Shows future possibilities\", \"Prophetic visions\", \"Ages user with each use\"],\n    soulCorruptionRisk: 15,\n    powerLevel: \"legendary\",\n    moralDilemma: \"Seeing the future comes at the cost of your own life force. Is preventing disaster worth aging decades?\",\n    historicalSignificance: \"Formed from the last volcanic eruption, containing the concentrated prophetic power of the lost kingdom.\"\n  },\n  {\n    id: \"mind_reading_crystal\",\n    name: \"Crystal of Infinite Thoughts\", \n    type: \"magical_artifact\",\n    discoveryLocation: \"night_kingdom_old\",\n    description: \"A dark crystal that allows reading the minds of every dragon within miles, but risks mental overload.\",\n    rarity: \"rare\",\n    effects: [\"Mass mind reading\", \"Telepathic communication\", \"Risks insanity from information overload\"],\n    soulCorruptionRisk: 11,\n    powerLevel: \"major\",\n    moralDilemma: \"Reading everyone's thoughts could drive you insane. Do you risk madness for ultimate knowledge?\",\n    historicalSignificance: \"Created by the last mind-reading NightWing before the evacuation.\"\n  },\n\n  // NIGHTWING-RAINWING VILLAGE\n  {\n    id: \"harmony_medallion\",\n    name: \"Medallion of Tribal Harmony\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"rainforest_night_village\",\n    description: \"A medallion that allows the wearer to use abilities from both NightWing and RainWing tribes.\",\n    rarity: \"uncommon\",\n    effects: [\"Dual tribal abilities\", \"Enhanced camouflage AND mind reading\", \"Cultural understanding\"],\n    soulCorruptionRisk: 3,\n    powerLevel: \"moderate\",\n    moralDilemma: \"Mixing tribal abilities could be seen as diluting both cultures. Do you embrace fusion or preserve traditions?\",\n    historicalSignificance: \"Forged to celebrate the first successful NightWing-RainWing cooperation.\"\n  },\n\n  // PANTALA LOCATIONS - JEWEL HIVE\n  {\n    id: \"mind_control_crown\",\n    name: \"Crown of Absolute Control\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"jewel_hive\",\n    description: \"Queen Wasp's backup crown that can control the minds of any HiveWing or SilkWing instantly.\",\n    rarity: \"legendary\", \n    effects: [\"Mind control over HiveWings/SilkWings\", \"Telepathic commands\", \"Absolute obedience\"],\n    soulCorruptionRisk: 20,\n    powerLevel: \"legendary\",\n    moralDilemma: \"Ultimate control over others - do you destroy this evil artifact or use it to free the oppressed?\",\n    historicalSignificance: \"Queen Wasp's secret contingency plan for maintaining absolute power.\"\n  },\n  {\n    id: \"resistance_map\",\n    name: \"Map of Hidden Paths\",\n    type: \"magical_artifact\", \n    discoveryLocation: \"jewel_hive\",\n    description: \"A map that reveals all secret passages and resistance hideouts in every hive.\",\n    rarity: \"rare\",\n    effects: [\"Reveals secret passages\", \"Shows resistance locations\", \"Updates in real time\"],\n    soulCorruptionRisk: 2,\n    powerLevel: \"minor\",\n    moralDilemma: \"This map could help free slaves or help tyrants find rebels. Who do you give it to?\",\n    historicalSignificance: \"Created by a HiveWing sympathizer to aid SilkWing resistance efforts.\"\n  },\n\n  // CICADA HIVE\n  {\n    id: \"silk_mastery_spindle\",\n    name: \"Spindle of Perfect Silk\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"cicada_hive\",\n    description: \"A golden spindle that allows any dragon to create flamesilk, but burns away their natural abilities.\",\n    rarity: \"rare\",\n    effects: [\"Grants flamesilk ability\", \"Removes natural tribal powers\", \"Creates incredibly strong silk\"],\n    soulCorruptionRisk: 7,\n    powerLevel: \"moderate\",\n    moralDilemma: \"Trading your natural abilities for flamesilk - is artificial power worth losing your true self?\",\n    historicalSignificance: \"Hidden by SilkWing rebels who wanted to give everyone flamesilk to fight back.\"\n  },\n\n  // YELLOWJACKET HIVE\n  {\n    id: \"war_generals_blade\",\n    name: \"Blade of Endless Victory\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"yellowjacket_hive\", \n    description: \"A sword that ensures victory in every battle, but each victory demands a greater sacrifice.\",\n    rarity: \"legendary\",\n    effects: [\"Guarantees victory in combat\", \"Increases power with each battle\", \"Demands escalating sacrifices\"],\n    soulCorruptionRisk: 18,\n    powerLevel: \"legendary\",\n    moralDilemma: \"Endless victory seems perfect, but what will you sacrifice to maintain it? Your friends? Your values?\",\n    historicalSignificance: \"Forged by a HiveWing general who conquered everything but lost everyone he cared about.\"\n  },\n\n  // POISON JUNGLE\n  {\n    id: \"nature_speakers_staff\",\n    name: \"Staff of Nature's Voice\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"poison_jungle\",\n    description: \"A living wooden staff that gives the user ultimate leafspeak abilities over all plant life.\",\n    rarity: \"legendary\",\n    effects: [\"Control over all plants\", \"Accelerated growth\", \"Can create plant armies\"],\n    soulCorruptionRisk: 8,\n    powerLevel: \"major\",\n    moralDilemma: \"Ultimate plant control could restore forests or destroy cities. Do you use it for nature or revenge?\",\n    historicalSignificance: \"Grown from the Tree of Life by the first LeafWing to master complete leafspeak.\"\n  },\n  {\n    id: \"poison_immunity_flower\",\n    name: \"Flower of Pure Immunity\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"poison_jungle\",\n    description: \"A crystallized flower that makes the holder immune to all poisons, venoms, and toxins forever.\",\n    rarity: \"rare\",\n    effects: [\"Complete poison immunity\", \"Purifies contaminated areas\", \"Neutralizes venom attacks\"],\n    soulCorruptionRisk: 3,\n    powerLevel: \"moderate\",\n    moralDilemma: \"Immunity to all poisons could save lives or enable dangerous experimentation. How do you use this gift?\",\n    historicalSignificance: \"Preserved by LeafWing healers during the great poisoning to help survivors.\"\n  },\n\n  // VINEGAROON HIVE  \n  {\n    id: \"winter_survival_cloak\",\n    name: \"Cloak of Eternal Warmth\",\n    type: \"magical_artifact\",\n    discoveryLocation: \"vinegaroon_hive\",\n    description: \"A cloak that provides perfect warmth and can melt ice instantly, but slowly drains life force.\",\n    rarity: \"uncommon\",\n    effects: [\"Perfect temperature control\", \"Melts ice and snow\", \"Gradually drains vitality\"],\n    soulCorruptionRisk: 5,\n    powerLevel: \"minor\",\n    moralDilemma: \"Perfect warmth at the cost of life force - do you trade longevity for comfort and power?\",\n    historicalSignificance: \"Made by northern HiveWings who couldn't adapt to the harsh winters.\"\n  }\n];\n\nexport class EnhancedAnimusArtifactSystem {\n  private static discoveredArtifacts = new Set<string>();\n  private static maxArtifactsPerGame = 5; // Increased from 3\n\n  static getAvailableArtifactsForLocation(locationId: string): AnimusArtifact[] {\n    return ANIMUS_ARTIFACTS.filter(artifact => \n      artifact.discoveryLocation === locationId &&\n      !this.discoveredArtifacts.has(artifact.id)\n    );\n  }\n\n  static canDiscoverArtifact(character: Character, locationId: string): boolean {\n    if (this.discoveredArtifacts.size >= this.maxArtifactsPerGame) return false;\n    \n    const availableArtifacts = this.getAvailableArtifactsForLocation(locationId);\n    if (availableArtifacts.length === 0) return false;\n\n    // Higher chance for animus dragons\n    let baseChance = character.isAnimus ? 0.08 : 0.05; // 8% vs 5% chance\n    \n    // Bonus chance based on intelligence and charisma\n    baseChance += (character.intelligence - 15) * 0.01;\n    baseChance += (character.charisma - 15) * 0.005;\n\n    return Math.random() < baseChance;\n  }\n\n  static discoverArtifact(character: Character, locationId: string): AnimusArtifact | null {\n    const availableArtifacts = this.getAvailableArtifactsForLocation(locationId);\n    if (availableArtifacts.length === 0) return null;\n\n    // Filter by discovery requirements\n    const eligibleArtifacts = availableArtifacts.filter(artifact => \n      !artifact.discoveryRequirement || artifact.discoveryRequirement(character)\n    );\n\n    if (eligibleArtifacts.length === 0) return null;\n\n    // Select artifact based on rarity weights\n    const weightedArtifacts = eligibleArtifacts.flatMap(artifact => {\n      let weight = 1;\n      switch (artifact.rarity) {\n        case 'legendary': weight = 1; break;\n        case 'rare': weight = 3; break;\n        case 'uncommon': weight = 6; break;\n        default: weight = 10; break;\n      }\n      return Array(weight).fill(artifact);\n    });\n\n    const selectedArtifact = weightedArtifacts[Math.floor(Math.random() * weightedArtifacts.length)];\n    this.discoveredArtifacts.add(selectedArtifact.id);\n\n    return selectedArtifact;\n  }\n\n  static getAllLocationsWithArtifacts(): { locationId: string; locationName: string; artifactCount: number }[] {\n    const locationCounts = new Map<string, number>();\n    \n    ANIMUS_ARTIFACTS.forEach(artifact => {\n      const count = locationCounts.get(artifact.discoveryLocation) || 0;\n      locationCounts.set(artifact.discoveryLocation, count + 1);\n    });\n\n    return Array.from(locationCounts.entries()).map(([locationId, count]) => {\n      const location = LOCATIONS.find(loc => loc.id === locationId);\n      return {\n        locationId,\n        locationName: location?.name || locationId,\n        artifactCount: count\n      };\n    });\n  }\n\n  static getArtifactMoralDilemmaChoices(artifact: AnimusArtifact): {\n    acceptChoice: string;\n    rejectChoice: string;\n    alternativeChoice?: string;\n  } {\n    const powerLevelDescriptions = {\n      minor: \"small but useful\",\n      moderate: \"significant\", \n      major: \"great and dangerous\",\n      legendary: \"ultimate and corrupting\"\n    };\n\n    return {\n      acceptChoice: `Accept the ${artifact.name} despite its ${powerLevelDescriptions[artifact.powerLevel]} power and moral risks.`,\n      rejectChoice: `Reject the artifact and leave it untouched, avoiding the moral complexity.`,\n      alternativeChoice: `Try to purify or modify the artifact to remove its corrupting influence (requires animus magic).`\n    };\n  }\n\n  static processArtifactDecision(\n    character: Character, \n    artifact: AnimusArtifact, \n    decision: 'accept' | 'reject' | 'purify'\n  ): {\n    soulCostApplied: number;\n    outcome: string;\n    consequenceDescription: string;\n  } {\n    let soulCostApplied = 0;\n    let outcome: string;\n    let consequenceDescription: string;\n\n    switch (decision) {\n      case 'accept':\n        soulCostApplied = artifact.soulCorruptionRisk;\n        outcome = `You claim the ${artifact.name}, feeling its power course through you.`;\n        consequenceDescription = `The artifact's power comes with a price - you feel your soul slightly corrupted by its dark magic.`;\n        break;\n\n      case 'reject':\n        outcome = `You resist the temptation and leave the ${artifact.name} where you found it.`;\n        consequenceDescription = `Your restraint preserves your soul's purity, but you wonder if you'll regret this decision later.`;\n        break;\n\n      case 'purify':\n        if (!character.isAnimus) {\n          soulCostApplied = artifact.soulCorruptionRisk; // Backfires for non-animus\n          outcome = `You attempt to purify the artifact without animus magic, but its corruption overwhelms you instead.`;\n          consequenceDescription = `Your noble attempt backfires catastrophically, corrupting your soul more than simply accepting would have.`;\n        } else {\n          soulCostApplied = Math.max(1, Math.floor(artifact.soulCorruptionRisk / 3)); // Reduced cost\n          outcome = `You successfully purify the ${artifact.name}, removing much of its dark influence.`;\n          consequenceDescription = `Your animus magic cleanses the artifact, though the effort still costs some of your soul's purity.`;\n        }\n        break;\n    }\n\n    return { soulCostApplied, outcome, consequenceDescription };\n  }\n\n  static resetDiscoveryTracking(): void {\n    this.discoveredArtifacts.clear();\n  }\n\n  static getDiscoveryStats(): {\n    totalArtifacts: number;\n    discoveredCount: number;\n    remainingCount: number;\n    locationsWithArtifacts: number;\n  } {\n    return {\n      totalArtifacts: ANIMUS_ARTIFACTS.length,\n      discoveredCount: this.discoveredArtifacts.size,\n      remainingCount: ANIMUS_ARTIFACTS.length - this.discoveredArtifacts.size,\n      locationsWithArtifacts: new Set(ANIMUS_ARTIFACTS.map(a => a.discoveryLocation)).size\n    };\n  }\n}","size_bytes":23224},"client/src/lib/enhanced-diverse-scenarios.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\nimport { EnhancedSocialSystem } from \"./enhanced-social-system\";\nimport { EnhancedAnimusArtifactSystem } from \"./enhanced-animus-artifacts\";\n\ninterface ScenarioTemplate {\n  id: string;\n  type: 'SOCIAL' | 'ACADEMIC' | 'ADVENTURE' | 'MYSTERY' | 'CULTURAL' | 'NATURE' | 'POLITICAL' | 'PERSONAL_GROWTH' | 'ROMANCE' | 'FAMILY' | 'ACHIEVEMENT' | 'CRISIS' | 'DISCOVERY';\n  title: string;\n  baseText: string;\n  variables: string[];\n  requirements?: (character: Character, gameData: GameData) => boolean;\n  generateChoices: (character: Character, gameData: GameData, variables: Record<string, string>) => Choice[];\n  rarity: 'common' | 'uncommon' | 'rare' | 'legendary';\n}\n\nexport class EnhancedDiverseScenarios {\n  private static lastUsedScenarios = new Set<string>();\n  private static maxRecentScenarios = 20; // Prevent repetition\n\n  private static readonly SCENARIO_TEMPLATES: ScenarioTemplate[] = [\n    // SOCIAL SCENARIOS\n    {\n      id: \"friendship_formation\",\n      type: \"SOCIAL\",\n      title: \"New Friendship Opportunity\", \n      baseText: \"{dragonName}, a {tribe} dragon, approaches you with an offer of friendship. They seem {personality} and {motivation}.\",\n      variables: [\"dragonName\", \"tribe\", \"personality\", \"motivation\"],\n      rarity: \"common\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"accept_friend\",\n          text: `Accept ${vars.dragonName}'s friendship warmly`,\n          consequences: [\"friendship_gained\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"cautious_friend\", \n          text: \"Be friendly but cautious about getting too close\",\n          consequences: [\"cautious_relationship\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"reject_friend\",\n          text: `Politely decline ${vars.dragonName}'s friendship offer`,\n          consequences: [\"missed_opportunity\"],\n          soulCost: 0,\n          sanityCost: -2\n        }\n      ]\n    },\n\n    {\n      id: \"group_dynamics\", \n      type: \"SOCIAL\",\n      title: \"Group Social Dynamics\",\n      baseText: \"You overhear a group of {tribe1} and {tribe2} dragons discussing {topic}. The conversation becomes {mood} when they notice you listening.\",\n      variables: [\"tribe1\", \"tribe2\", \"topic\", \"mood\"],\n      rarity: \"common\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"join_discussion\",\n          text: \"Join the conversation and share your perspective\",\n          consequences: [\"social_engagement\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"mediate_tension\",\n          text: \"Try to ease any tension between the different tribes\",\n          consequences: [\"peacemaker_reputation\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"quietly_listen\",\n          text: \"Continue listening without participating\",\n          consequences: [\"information_gained\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // ACADEMIC SCENARIOS\n    {\n      id: \"advanced_studies\",\n      type: \"ACADEMIC\", \n      title: \"Academic Challenge\",\n      baseText: \"Professor {teacherName} offers you a chance to study {subject} - an advanced topic that could {benefit} but requires {sacrifice}.\",\n      variables: [\"teacherName\", \"subject\", \"benefit\", \"sacrifice\"],\n      rarity: \"uncommon\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"accept_studies\",\n          text: `Accept the advanced ${vars.subject} studies`,\n          consequences: [\"intelligence_gain\", \"time_commitment\"],\n          soulCost: 0,\n          sanityCost: 2\n        },\n        {\n          id: \"partial_commitment\",\n          text: \"Agree to study part-time while maintaining other activities\",\n          consequences: [\"balanced_growth\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"decline_studies\", \n          text: \"Decline and focus on your current studies\",\n          consequences: [\"missed_knowledge\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    {\n      id: \"research_discovery\",\n      type: \"ACADEMIC\",\n      title: \"Research Breakthrough\", \n      baseText: \"While studying {researchTopic}, you make a discovery about {finding}. This knowledge could {implication} if shared.\",\n      variables: [\"researchTopic\", \"finding\", \"implication\"],\n      rarity: \"rare\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"publish_discovery\",\n          text: \"Share your discovery with the academic community\",\n          consequences: [\"scholarly_reputation\", \"knowledge_spread\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"selective_sharing\",\n          text: \"Only share with trusted mentors and friends\",\n          consequences: [\"careful_progress\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"keep_secret\",\n          text: \"Keep the discovery secret until you understand it better\",\n          consequences: [\"hidden_knowledge\"],\n          soulCost: 0,\n          sanityCost: 1\n        }\n      ]\n    },\n\n    // ADVENTURE SCENARIOS\n    {\n      id: \"exploration_opportunity\",\n      type: \"ADVENTURE\",\n      title: \"Exploration Adventure\",\n      baseText: \"A group of students is planning to explore {location} during the weekend. They've heard rumors of {discovery} there, but also {danger}.\",\n      variables: [\"location\", \"discovery\", \"danger\"],\n      rarity: \"common\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"join_exploration\",\n          text: \"Join the exploration group\",\n          consequences: [\"adventure_experience\", \"potential_discovery\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"lead_expedition\",\n          text: \"Volunteer to lead and organize the expedition\",\n          consequences: [\"leadership_experience\", \"responsibility\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"stay_safe\",\n          text: \"Stay at the academy where it's safe\",\n          consequences: [\"missed_adventure\"],\n          soulCost: 0,\n          sanityCost: -1\n        }\n      ]\n    },\n\n    // MYSTERY SCENARIOS\n    {\n      id: \"academy_mystery\",\n      type: \"MYSTERY\",\n      title: \"Academy Mystery\",\n      baseText: \"Strange {events} have been occurring around the academy. You notice {clue} that others seem to have missed. The mystery involves {connection}.\",\n      variables: [\"events\", \"clue\", \"connection\"],\n      rarity: \"uncommon\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"investigate_alone\",\n          text: \"Investigate the mystery on your own\",\n          consequences: [\"solo_discovery\", \"personal_risk\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"gather_team\",\n          text: \"Gather friends to help solve the mystery\",\n          consequences: [\"team_investigation\", \"shared_discovery\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"report_authority\",\n          text: \"Report your findings to the academy authorities\",\n          consequences: [\"official_investigation\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // CULTURAL SCENARIOS\n    {\n      id: \"cultural_exchange\",\n      type: \"CULTURAL\",\n      title: \"Cultural Learning\",\n      baseText: \"{cultureDragon} from {tribe} offers to teach you about {culturalAspect}. This could {cultureBenefit} but may {culturalChallenge}.\",\n      variables: [\"cultureDragon\", \"tribe\", \"culturalAspect\", \"cultureBenefit\", \"culturalChallenge\"],\n      rarity: \"common\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"embrace_culture\",\n          text: `Eagerly learn about ${vars.tribe} culture`,\n          consequences: [\"cultural_understanding\", \"friendship_bonus\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"mutual_exchange\",\n          text: `Suggest a mutual exchange - teach about your own tribe too`,\n          consequences: [\"cultural_bridge\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"polite_decline\",\n          text: \"Politely decline, preferring to focus on your own heritage\",\n          consequences: [\"cultural_preservation\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // NATURE SCENARIOS\n    {\n      id: \"nature_encounter\",\n      type: \"NATURE\",\n      title: \"Nature Interaction\", \n      baseText: \"During a flight, you encounter {creature} in {environment}. The {creature} appears {behavior} and {condition}.\",\n      variables: [\"creature\", \"environment\", \"behavior\", \"condition\"],\n      rarity: \"common\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"help_creature\",\n          text: `Help the ${vars.creature}`,\n          consequences: [\"nature_bond\", \"karma_boost\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"observe_respectfully\",\n          text: \"Watch from a respectful distance\", \n          consequences: [\"nature_knowledge\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"avoid_encounter\",\n          text: \"Fly away to avoid any potential conflict\",\n          consequences: [\"safety_first\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // POLITICAL SCENARIOS\n    {\n      id: \"political_discussion\",\n      type: \"POLITICAL\",\n      title: \"Political Awareness\",\n      baseText: \"A heated debate erupts about {politicalIssue} between dragons from different tribes. {opinion1} while {opinion2}. Your perspective could {impact}.\",\n      variables: [\"politicalIssue\", \"opinion1\", \"opinion2\", \"impact\"],\n      rarity: \"uncommon\", \n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"share_opinion\",\n          text: \"Share your honest opinion about the issue\",\n          consequences: [\"political_engagement\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"seek_compromise\",\n          text: \"Try to find common ground between all viewpoints\",\n          consequences: [\"diplomatic_reputation\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"stay_neutral\",\n          text: \"Remain neutral and avoid taking sides\",\n          consequences: [\"political_neutrality\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // PERSONAL GROWTH SCENARIOS\n    {\n      id: \"personal_challenge\",\n      type: \"PERSONAL_GROWTH\",\n      title: \"Personal Challenge\",\n      baseText: \"You face a personal challenge with {challenge}. This difficulty {description} and {emotion}. Overcoming it could {growth}.\",\n      variables: [\"challenge\", \"description\", \"emotion\", \"growth\"],\n      rarity: \"uncommon\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"face_challenge\",\n          text: \"Face the challenge head-on with determination\",\n          consequences: [\"personal_growth\", \"confidence_boost\"],\n          soulCost: 0,\n          sanityCost: 1\n        },\n        {\n          id: \"seek_help\",\n          text: \"Ask friends or mentors for help and guidance\",\n          consequences: [\"support_network\", \"humble_growth\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"gradual_approach\",\n          text: \"Take small steps to gradually overcome the challenge\",\n          consequences: [\"steady_progress\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // ROMANCE SCENARIOS \n    {\n      id: \"romantic_moment\",\n      type: \"ROMANCE\",\n      title: \"Romantic Opportunity\",\n      baseText: \"You find yourself alone with {romantic_interest} during {romantic_setting}. There's {romantic_tension} between you.\",\n      variables: [\"romantic_interest\", \"romantic_setting\", \"romantic_tension\"],\n      requirements: (character, gameData) => character.age >= 4,\n      rarity: \"uncommon\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"express_feelings\",\n          text: `Express your feelings to ${vars.romantic_interest}`,\n          consequences: [\"romantic_confession\"],\n          soulCost: 0,\n          sanityCost: 2\n        },\n        {\n          id: \"enjoy_moment\",\n          text: \"Simply enjoy the moment without pressure\",\n          consequences: [\"romantic_development\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"step_back\",\n          text: \"Maintain appropriate boundaries\",\n          consequences: [\"respectful_distance\"], \n          soulCost: 0,\n          sanityCost: -1\n        }\n      ]\n    },\n\n    // FAMILY SCENARIOS\n    {\n      id: \"family_connection\",\n      type: \"FAMILY\",\n      title: \"Family Matters\",\n      baseText: \"You receive news about {family_member}. They {family_situation} and {family_emotion}. This affects {family_impact}.\",\n      variables: [\"family_member\", \"family_situation\", \"family_emotion\", \"family_impact\"],\n      rarity: \"uncommon\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"support_family\",\n          text: `Offer strong support to your ${vars.family_member}`,\n          consequences: [\"family_bond_strengthened\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"visit_family\",\n          text: \"Request time off to visit your family\",\n          consequences: [\"family_visit\", \"academic_absence\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"emotional_support\",\n          text: \"Send emotional support while maintaining your studies\",\n          consequences: [\"balanced_care\"],\n          soulCost: 0,\n          sanityCost: 1\n        }\n      ]\n    },\n\n    // ACHIEVEMENT SCENARIOS\n    {\n      id: \"achievement_opportunity\", \n      type: \"ACHIEVEMENT\",\n      title: \"Achievement Challenge\",\n      baseText: \"An opportunity arises to {achievement_action} which could lead to {achievement_result}. This requires {achievement_requirement}.\",\n      variables: [\"achievement_action\", \"achievement_result\", \"achievement_requirement\"],\n      rarity: \"rare\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"pursue_achievement\",\n          text: `Fully commit to ${vars.achievement_action}`,\n          consequences: [\"achievement_progress\", \"dedication_required\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"balanced_pursuit\",\n          text: \"Pursue the achievement while maintaining balance\",\n          consequences: [\"moderate_achievement_progress\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"focus_elsewhere\",\n          text: \"Focus on other priorities instead\",\n          consequences: [\"missed_achievement\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    },\n\n    // CRISIS SCENARIOS\n    {\n      id: \"emergency_situation\",\n      type: \"CRISIS\",\n      title: \"Emergency Response\",\n      baseText: \"A {crisis_type} emergency occurs involving {crisis_target}. The situation is {crisis_severity} and requires {crisis_action}.\",\n      variables: [\"crisis_type\", \"crisis_target\", \"crisis_severity\", \"crisis_action\"],\n      rarity: \"rare\",\n      generateChoices: (character, gameData, vars) => [\n        {\n          id: \"heroic_response\",\n          text: \"Take immediate heroic action to help\",\n          consequences: [\"heroic_reputation\", \"personal_risk\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"organized_response\",\n          text: \"Organize others to respond as a group\",\n          consequences: [\"leadership_under_pressure\"],\n          soulCost: 0,\n          sanityCost: 0\n        },\n        {\n          id: \"support_response\",\n          text: \"Provide support to those taking the lead\",\n          consequences: [\"team_support\"],\n          soulCost: 0,\n          sanityCost: 0\n        }\n      ]\n    }\n  ];\n\n  private static readonly VARIABLE_GENERATORS = {\n    // Dragon names by tribe for social interactions\n    dragonName: (character: Character) => EnhancedSocialSystem.generateRandomDragonName(\n      EnhancedSocialSystem.generateRandomTribe(character.tribe)\n    ),\n    \n    tribe: (character: Character) => EnhancedSocialSystem.generateRandomTribe(character.tribe),\n    \n    personality: () => [\n      \"curious and eager to learn\", \"cautious but friendly\", \"outgoing and confident\", \n      \"shy but thoughtful\", \"analytical and precise\", \"creative and imaginative\",\n      \"protective and loyal\", \"adventurous and bold\", \"wise beyond their years\"\n    ][Math.floor(Math.random() * 9)],\n\n    motivation: () => [\n      \"seem genuinely interested in getting to know you\", \"appear to need a study partner\",\n      \"look like they could use a friend\", \"seem to share similar interests with you\",\n      \"appear to admire your achievements\", \"look lonely and isolated\"\n    ][Math.floor(Math.random() * 6)],\n\n    // Academic variables\n    teacherName: () => [\n      \"Starlight\", \"Professor Wisdom\", \"Scholar Ancient\", \"Mentor Brightmind\", \n      \"Teacher Deepthought\", \"Professor Knowall\"\n    ][Math.floor(Math.random() * 6)],\n\n    subject: () => [\n      \"advanced inter-tribal diplomacy\", \"ancient dragon history\", \"advanced magic theory\",\n      \"strategic combat analysis\", \"cultural anthropology\", \"advanced prophecy interpretation\"\n    ][Math.floor(Math.random() * 6)],\n\n    // Adventure variables\n    location: () => [\n      \"the ancient ruins beyond the mountains\", \"a mysterious cave system\",\n      \"the abandoned observatory\", \"the hidden valley\", \"the crystal caves\"\n    ][Math.floor(Math.random() * 5)],\n\n    discovery: () => [\n      \"ancient artifacts\", \"rare crystals\", \"historical scrolls\", \"magical phenomena\",\n      \"undiscovered species\", \"hidden chambers\"\n    ][Math.floor(Math.random() * 6)],\n\n    danger: () => [\n      \"unstable terrain\", \"dangerous wildlife\", \"unpredictable weather\", \n      \"getting lost\", \"ancient traps\", \"toxic gases\"\n    ][Math.floor(Math.random() * 6)],\n\n    // Nature variables  \n    creature: () => [\n      \"injured scavenger\", \"lost dragonet\", \"wounded animal\", \"trapped bird\",\n      \"distressed forest creature\", \"struggling sea life\"\n    ][Math.floor(Math.random() * 6)],\n\n    environment: () => [\n      \"dense forest\", \"rocky mountainside\", \"peaceful meadow\", \"flowing river\",\n      \"coastal shore\", \"desert oasis\"\n    ][Math.floor(Math.random() * 6)]\n  };\n\n  static generateScenario(character: Character, gameData: GameData): Scenario {\n    // Filter out recently used scenarios\n    const availableTemplates = this.SCENARIO_TEMPLATES.filter(template => {\n      // Check requirements\n      if (template.requirements && !template.requirements(character, gameData)) {\n        return false;\n      }\n      \n      // Avoid recent scenarios  \n      if (this.lastUsedScenarios.has(template.id)) {\n        return false;\n      }\n\n      return true;\n    });\n\n    // If we've used too many, clear some old ones\n    if (this.lastUsedScenarios.size > this.maxRecentScenarios) {\n      const oldestScenarios = Array.from(this.lastUsedScenarios).slice(0, 5);\n      oldestScenarios.forEach(id => this.lastUsedScenarios.delete(id));\n    }\n\n    // Select template based on rarity weights\n    const weightedTemplates = availableTemplates.flatMap(template => {\n      let weight = 1;\n      switch (template.rarity) {\n        case 'legendary': weight = 1; break;\n        case 'rare': weight = 2; break; \n        case 'uncommon': weight = 4; break;\n        case 'common': weight = 8; break;\n      }\n      return Array(weight).fill(template);\n    });\n\n    if (weightedTemplates.length === 0) {\n      // Fallback if no templates available\n      this.lastUsedScenarios.clear();\n      return this.generateScenario(character, gameData);\n    }\n\n    const selectedTemplate = weightedTemplates[Math.floor(Math.random() * weightedTemplates.length)];\n    this.lastUsedScenarios.add(selectedTemplate.id);\n\n    // Generate variables for this scenario\n    const variables: Record<string, string> = {};\n    selectedTemplate.variables.forEach(variable => {\n      const generator = this.VARIABLE_GENERATORS[variable as keyof typeof this.VARIABLE_GENERATORS];\n      if (generator) {\n        variables[variable] = generator(character);\n      } else {\n        variables[variable] = `[${variable}]`; // Fallback\n      }\n    });\n\n    // Replace variables in text\n    let scenarioText = selectedTemplate.baseText;\n    Object.entries(variables).forEach(([key, value]) => {\n      scenarioText = scenarioText.replace(new RegExp(`{${key}}`, 'g'), value);\n    });\n\n    // Generate choices\n    const choices = selectedTemplate.generateChoices(character, gameData, variables);\n\n    return {\n      id: `${selectedTemplate.id}_${Date.now()}`,\n      type: selectedTemplate.type,\n      text: scenarioText,\n      choices,\n      location: gameData.location || \"jade_mountain_academy\"\n    };\n  }\n\n  static getScenarioStatistics(): {\n    totalTemplates: number;\n    recentlyUsed: number;\n    availableForReuse: number;\n    typeDistribution: Record<string, number>;\n  } {\n    const typeDistribution: Record<string, number> = {};\n    this.SCENARIO_TEMPLATES.forEach(template => {\n      typeDistribution[template.type] = (typeDistribution[template.type] || 0) + 1;\n    });\n\n    return {\n      totalTemplates: this.SCENARIO_TEMPLATES.length,\n      recentlyUsed: this.lastUsedScenarios.size,\n      availableForReuse: this.SCENARIO_TEMPLATES.length - this.lastUsedScenarios.size,\n      typeDistribution\n    };\n  }\n\n  static resetScenarioHistory(): void {\n    this.lastUsedScenarios.clear();\n  }\n}","size_bytes":21953},"client/src/lib/enhanced-dragonet-system.ts":{"content":"import { Character, Dragonet, RomanticEvent } from \"@shared/schema\";\n\nexport interface DragonetEvent {\n  id: string;\n  dragonetName: string;\n  eventType: \"birth\" | \"first_words\" | \"first_flight\" | \"school_start\" | \"power_manifestation\" | \"coming_of_age\" | \"independence\";\n  description: string;\n  ageOccurred: number;\n  parentReaction?: string;\n}\n\nexport class EnhancedDragonetSystem {\n  private static readonly DRAGONET_NAMES = [\n    // Traditional names\n    \"Ember\", \"Spark\", \"Brook\", \"Pebble\", \"Frost\", \"Leaf\", \"Sky\", \"Ocean\", \"Storm\", \"Dawn\",\n    // Gemstone names\n    \"Ruby\", \"Sapphire\", \"Emerald\", \"Diamond\", \"Opal\", \"Topaz\", \"Garnet\", \"Jade\", \"Crystal\", \"Pearl\",\n    // Nature names\n    \"River\", \"Mountain\", \"Forest\", \"Desert\", \"Glacier\", \"Meadow\", \"Canyon\", \"Valley\", \"Ridge\", \"Falls\",\n    // Weather names\n    \"Thunder\", \"Lightning\", \"Rain\", \"Snow\", \"Wind\", \"Mist\", \"Cloud\", \"Sun\", \"Moon\", \"Star\",\n    // Unique names\n    \"Phoenix\", \"Galaxy\", \"Nova\", \"Comet\", \"Aurora\", \"Cosmos\", \"Nebula\", \"Stellar\", \"Solar\", \"Lunar\"\n  ];\n\n  private static readonly PERSONALITY_TRAITS = [\n    \"Curious\", \"Brave\", \"Gentle\", \"Mischievous\", \"Thoughtful\", \"Energetic\", \"Shy\", \"Bold\", \n    \"Compassionate\", \"Independent\", \"Playful\", \"Serious\", \"Creative\", \"Logical\", \"Empathetic\",\n    \"Adventurous\", \"Cautious\", \"Optimistic\", \"Determined\", \"Patient\", \"Impulsive\", \"Wise\"\n  ];\n\n  static generateDragonetName(): string {\n    return this.DRAGONET_NAMES[Math.floor(Math.random() * this.DRAGONET_NAMES.length)];\n  }\n\n  static canHaveOffspring(character: Character): boolean {\n    return character.age >= 5 && \n           character.mate !== undefined && \n           character.soulPercentage >= 40 && \n           character.sanityPercentage >= 40;\n  }\n\n  static attemptOffspring(character: Character): Dragonet | null {\n    if (!this.canHaveOffspring(character)) return null;\n    if (Math.random() > 0.4) return null; // 40% chance of offspring per attempt\n\n    const mate = character.relationships[character.mate!];\n    if (!mate || mate.type !== 'mate') return null;\n\n    const partnerTribe = this.getTribeFromRelationshipHistory(mate.history) || this.getRandomTribe();\n    const isHybrid = character.tribe !== partnerTribe;\n    \n    const dragonetName = this.generateDragonetName();\n    const inheritedTraits = this.generateInheritedTraits(character, partnerTribe);\n    const isAnimus = this.calculateAnimusInheritance(character, isHybrid);\n\n    const dragonet: Dragonet = {\n      name: dragonetName,\n      age: 0,\n      tribe: character.tribe,\n      hybridTribes: isHybrid ? [character.tribe, partnerTribe] : undefined,\n      inheritedTraits,\n      isAnimus,\n      parentage: \"biological\",\n      personality: this.generatePersonality()\n    };\n\n    // Add to character's dragonets\n    character.dragonets.push(dragonet);\n\n    // Add romantic event\n    const romanticEvent: RomanticEvent = {\n      partnerName: character.mate!,\n      eventType: \"mating\",\n      turnOccurred: character.age,\n      outcome: `${dragonetName} was born`,\n      hasOffspring: true\n    };\n    character.romanticHistory.push(romanticEvent);\n\n    // Improve relationship with mate\n    mate.strength = Math.min(100, mate.strength + 15);\n    mate.history.push(`Had dragonet ${dragonetName} together`);\n\n    return dragonet;\n  }\n\n  static progressDragonetDevelopment(character: Character): DragonetEvent[] {\n    const events: DragonetEvent[] = [];\n\n    character.dragonets.forEach(dragonet => {\n      // Age the dragonet\n      dragonet.age += 1;\n\n      // Generate development events based on age\n      const event = this.generateDragonetEvent(dragonet, character);\n      if (event) {\n        events.push(event);\n      }\n\n      // Handle coming of age (age 7+)\n      if (dragonet.age >= 7 && Math.random() < 0.3) {\n        const independenceEvent = this.generateIndependenceEvent(dragonet, character);\n        if (independenceEvent) {\n          events.push(independenceEvent);\n        }\n      }\n    });\n\n    return events;\n  }\n\n  private static generateDragonetEvent(dragonet: Dragonet, parent: Character): DragonetEvent | null {\n    const eventChance = 0.4; // 40% chance of event per turn\n    if (Math.random() > eventChance) return null;\n\n    let eventType: DragonetEvent['eventType'];\n    let description: string;\n    let parentReaction: string;\n\n    if (dragonet.age === 0) {\n      eventType = \"first_words\";\n      description = `${dragonet.name} speaks their first word: \"${parent.name}!\"`;\n      parentReaction = \"You feel overwhelming pride and joy as your dragonet recognizes you.\";\n    } else if (dragonet.age === 1) {\n      eventType = \"first_flight\";\n      description = `${dragonet.name} takes their first successful flight, wobbling but determined.`;\n      parentReaction = \"You watch nervously but encourage their efforts, remembering your own first flight.\";\n    } else if (dragonet.age === 2) {\n      eventType = \"school_start\";\n      description = `${dragonet.name} starts attending basic classes at the academy.`;\n      parentReaction = \"You feel proud watching them join other young dragonets in learning.\";\n    } else if (dragonet.age === 3 && (dragonet.isAnimus || dragonet.hybridTribes)) {\n      eventType = \"power_manifestation\";\n      if (dragonet.isAnimus) {\n        description = `${dragonet.name} accidentally enchants a toy, revealing their animus powers.`;\n        parentReaction = \"You feel a mix of pride and concern, knowing the burden they will carry.\";\n      } else {\n        description = `${dragonet.name} shows signs of their hybrid abilities.`;\n        parentReaction = \"You're amazed by their unique heritage and the potential it represents.\";\n      }\n    } else if (dragonet.age >= 4 && dragonet.age < 7) {\n      const randomEvents = [\n        {\n          type: \"school_start\" as const,\n          desc: `${dragonet.name} excels in their studies and makes new friends.`,\n          reaction: \"You beam with pride at their academic and social success.\"\n        },\n        {\n          type: \"power_manifestation\" as const,\n          desc: `${dragonet.name} shows impressive skill in their tribal abilities.`,\n          reaction: \"You see echoes of yourself in their growing abilities.\"\n        }\n      ];\n      const event = randomEvents[Math.floor(Math.random() * randomEvents.length)];\n      eventType = event.type;\n      description = event.desc;\n      parentReaction = event.reaction;\n    } else if (dragonet.age >= 6) {\n      eventType = \"coming_of_age\";\n      description = `${dragonet.name} demonstrates adult-level reasoning and independence.`;\n      parentReaction = \"You realize your little dragonet is growing into a capable adult dragon.\";\n    } else {\n      return null;\n    }\n\n    return {\n      id: `${dragonet.name}_${eventType}_${dragonet.age}`,\n      dragonetName: dragonet.name,\n      eventType,\n      description,\n      ageOccurred: dragonet.age,\n      parentReaction\n    };\n  }\n\n  private static generateIndependenceEvent(dragonet: Dragonet, parent: Character): DragonetEvent {\n    const outcomes = [\n      `${dragonet.name} decides to travel to explore other kingdoms and learn about the world.`,\n      `${dragonet.name} chooses to stay at Jade Mountain Academy to continue their advanced studies.`,\n      `${dragonet.name} joins a diplomatic mission to help improve inter-tribal relations.`,\n      `${dragonet.name} becomes interested in preserving ancient dragon history and artifacts.`,\n      `${dragonet.name} starts their own adventure, following in your footsteps but forging their own path.`\n    ];\n\n    return {\n      id: `${dragonet.name}_independence`,\n      dragonetName: dragonet.name,\n      eventType: \"independence\",\n      description: outcomes[Math.floor(Math.random() * outcomes.length)],\n      ageOccurred: dragonet.age,\n      parentReaction: \"You feel bittersweet pride as you watch them become independent, knowing you've raised them well.\"\n    };\n  }\n\n  private static generateInheritedTraits(parent: Character, partnerTribe: string): string[] {\n    const traits: string[] = [];\n    \n    // Inherit some parent traits\n    const parentTraits = parent.traits.filter(trait => Math.random() < 0.4);\n    traits.push(...parentTraits);\n\n    // Add tribal-specific traits\n    if (parent.isAnimus && Math.random() < 0.1) { // 10% chance to inherit animus\n      traits.push(\"Potential Animus Heritage\");\n    }\n\n    // Add personality traits\n    const personalityTraits = this.PERSONALITY_TRAITS.filter(() => Math.random() < 0.3).slice(0, 2);\n    traits.push(...personalityTraits);\n\n    return [...new Set(traits)]; // Remove duplicates\n  }\n\n  private static calculateAnimusInheritance(parent: Character, isHybrid: boolean): boolean {\n    if (!parent.isAnimus) return false;\n    \n    let baseChance = 0.15; // 15% base chance\n    if (isHybrid) baseChance *= 1.5; // Hybrids have higher chance\n    \n    return Math.random() < baseChance;\n  }\n\n  private static generatePersonality(): string {\n    const traits = this.PERSONALITY_TRAITS.filter(() => Math.random() < 0.4).slice(0, 3);\n    return traits.join(\", \") || \"Balanced\";\n  }\n\n  private static getTribeFromRelationshipHistory(history: string[]): string | null {\n    // Try to extract tribe from relationship history\n    const tribes = [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"];\n    \n    for (const entry of history) {\n      for (const tribe of tribes) {\n        if (entry.includes(tribe)) {\n          return tribe;\n        }\n      }\n    }\n    return null;\n  }\n\n  private static getRandomTribe(): string {\n    const tribes = [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"];\n    return tribes[Math.floor(Math.random() * tribes.length)];\n  }\n\n  static getDragonetSummary(character: Character): {\n    totalDragonets: number;\n    youngDragonets: number; // age 0-3\n    adolescentDragonets: number; // age 4-6\n    adultDragonets: number; // age 7+\n    animusDragonets: number;\n    hybridDragonets: number;\n  } {\n    return {\n      totalDragonets: character.dragonets.length,\n      youngDragonets: character.dragonets.filter(d => d.age <= 3).length,\n      adolescentDragonets: character.dragonets.filter(d => d.age >= 4 && d.age <= 6).length,\n      adultDragonets: character.dragonets.filter(d => d.age >= 7).length,\n      animusDragonets: character.dragonets.filter(d => d.isAnimus).length,\n      hybridDragonets: character.dragonets.filter(d => d.hybridTribes).length\n    };\n  }\n}","size_bytes":10495},"client/src/lib/enhanced-game-integration.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\nimport { EnhancedSocialSystem } from \"./enhanced-social-system\";\nimport { EnhancedDragonetSystem } from \"./enhanced-dragonet-system\";\nimport { RomanceSystem } from \"./romance-system\";\n\n// Simplified integration system that works with existing game\nexport class EnhancedGameIntegration {\n  // Enhanced social interactions\n  static generateSocialScenario(character: Character, gameData: GameData): Scenario | null {\n    if (Math.random() < 0.3) {\n      const socialEvent = EnhancedSocialSystem.generateSocialEvent(character);\n      \n      return {\n        id: `social_${socialEvent.id}_${Date.now()}`,\n        type: 'SOCIAL',\n        text: socialEvent.narrativeText.join(' '),\n        choices: [\n          {\n            id: \"positive_social\",\n            text: \"Respond positively and engage warmly\",\n            description: `Greet ${socialEvent.participantName} with enthusiasm and openness`,\n            consequences: [`You warmly engage with ${socialEvent.participantName}, building a positive connection`],\n            soulCost: 0,\n            sanityCost: 0\n          },\n          {\n            id: \"neutral_social\", \n            text: \"Be polite but maintain distance\",\n            description: \"Show courtesy while keeping things professional\",\n            consequences: [`You interact politely with ${socialEvent.participantName} but remain somewhat distant`],\n            soulCost: 0,\n            sanityCost: 0\n          },\n          {\n            id: \"negative_social\",\n            text: \"Be dismissive or rude\",\n            description: `Show disinterest or hostility toward ${socialEvent.participantName}`,\n            consequences: [`Your rude behavior damages your relationship with ${socialEvent.participantName}`],\n            soulCost: 0,\n            sanityCost: -1\n          }\n        ],\n        location: gameData.location || \"jade_mountain_academy\"\n      };\n    }\n    return null;\n  }\n\n  // Enhanced dragonet interactions  \n  static generateDragonetScenario(character: Character, gameData: GameData): Scenario | null {\n    if (character.dragonets.length > 0 && Math.random() < 0.25) {\n      const randomDragonet = character.dragonets[Math.floor(Math.random() * character.dragonets.length)];\n      \n      const scenarios = [\n        `Your dragonet ${randomDragonet.name} asks you about their ${randomDragonet.isAnimus ? 'animus powers' : 'tribal abilities'}. How do you respond?`,\n        `${randomDragonet.name} is having trouble making friends at school. What guidance do you offer?`,\n        `Your dragonet ${randomDragonet.name} shows interest in exploring dangerous places. How do you handle this?`,\n        `${randomDragonet.name} asks about their other parent and why they look different from other dragonets. What do you tell them?`\n      ];\n\n      return {\n        id: `dragonet_${randomDragonet.name}_${Date.now()}`,\n        type: 'FAMILY',\n        text: scenarios[Math.floor(Math.random() * scenarios.length)],\n        choices: [\n          {\n            id: \"supportive_parent\",\n            text: \"Be supportive and understanding\",\n            description: `Encourage ${randomDragonet.name} with love and patience`,\n            consequences: [`You offer loving support to ${randomDragonet.name}, strengthening your family bond`],\n            soulCost: 0,\n            sanityCost: 0\n          },\n          {\n            id: \"protective_parent\",\n            text: \"Be protective and cautious\",\n            description: `Keep ${randomDragonet.name} safe while being firm about boundaries`,\n            consequences: [`You prioritize ${randomDragonet.name}'s safety with protective guidance`],\n            soulCost: 0,\n            sanityCost: 0\n          },\n          {\n            id: \"wise_guidance\",\n            text: \"Offer wise guidance and life lessons\",\n            description: `Share your wisdom and experience with ${randomDragonet.name}`,\n            consequences: [`You pass on valuable life lessons to ${randomDragonet.name}, helping them grow wiser`],\n            soulCost: 0,\n            sanityCost: 0\n          }\n        ],\n        location: gameData.location || \"jade_mountain_academy\"\n      };\n    }\n    return null;\n  }\n\n  // Romance and mating scenarios\n  static generateRomanceScenario(character: Character, gameData: GameData): Scenario | null {\n    if (character.age >= 4 && Math.random() < 0.2) {\n      const hasPartner = character.mate || Object.values(character.relationships).some(r => r.type === 'romantic');\n      \n      if (!hasPartner) {\n        // Generate a romantic encounter with proper narrative\n        const romanticEncounter = RomanceSystem.generateRomanticEncounter(character);\n        \n        return {\n          id: `romance_meeting_${Date.now()}`,\n          type: 'ROMANCE',\n          text: romanticEncounter.narrativeText.join(' '),\n          choices: [\n            {\n              id: \"pursue_romance\",\n              text: `Show romantic interest in ${romanticEncounter.partnerName}`,\n              description: `Express your attraction and desire to get to know ${romanticEncounter.partnerName} better`,\n              consequences: [`You pursue a romantic connection with ${romanticEncounter.partnerName}, the charming ${romanticEncounter.partnerTribe} dragon`],\n              soulCost: 0,\n              sanityCost: 1\n            },\n            {\n              id: \"friendship_first\",\n              text: \"Suggest starting as friends\",\n              description: \"Build a foundation of friendship before considering romance\",\n              consequences: [`You choose to develop a friendship with ${romanticEncounter.partnerName} first, letting romance develop naturally`],\n              soulCost: 0,\n              sanityCost: 0\n            },\n            {\n              id: \"avoid_romance\",\n              text: \"Keep things casual\",\n              description: \"Maintain a friendly but non-romantic relationship\",\n              consequences: [`You decide to keep your relationship with ${romanticEncounter.partnerName} purely platonic`],\n              soulCost: 0,\n              sanityCost: -1\n            }\n          ],\n          location: gameData.location || \"jade_mountain_academy\"\n        };\n      } else if (character.mate && EnhancedDragonetSystem.canHaveOffspring(character)) {\n        // Existing relationship - potential for offspring\n        return {\n          id: `offspring_consideration_${Date.now()}`,\n          type: 'FAMILY',\n          text: `You and your mate ${character.mate} have been discussing the possibility of having dragonets. This is a major life decision that would change everything.`,\n          choices: [\n            {\n              id: \"try_offspring\",\n              text: \"Decide to try for dragonets together\",\n              consequences: [\"offspring_attempted\"],\n              soulCost: 0,\n              sanityCost: 2\n            },\n            {\n              id: \"wait_offspring\", \n              text: \"Wait until you're more established before having dragonets\",\n              consequences: [\"family_planning\"],\n              soulCost: 0,\n              sanityCost: 0\n            },\n            {\n              id: \"no_offspring\",\n              text: \"Decide to focus on your relationship without dragonets for now\",\n              consequences: [\"couple_focus\"],\n              soulCost: 0,\n              sanityCost: 0\n            }\n          ],\n          location: gameData.location || \"jade_mountain_academy\"\n        };\n      }\n    }\n    return null;\n  }\n\n  // Process social event outcomes with proper messaging\n  static processSocialEvent(character: Character, choice: Choice, socialEvent: any): void {\n    if (!socialEvent) return;\n    \n    // Update relationship based on choice\n    let relationshipChange = 0;\n    let newRelationshipType: 'friend' | 'neutral' | 'rival' | 'enemy' = 'neutral';\n    \n    switch (choice.id) {\n      case \"positive_social\":\n        relationshipChange = socialEvent.relationshipChange || 15;\n        newRelationshipType = 'friend';\n        break;\n      case \"neutral_social\":\n        relationshipChange = 5;\n        newRelationshipType = 'neutral';\n        break;\n      case \"negative_social\":\n        relationshipChange = -(Math.abs(socialEvent.relationshipChange) || 10);\n        newRelationshipType = 'rival';\n        break;\n    }\n    \n    // Apply relationship change and ensure it's saved properly\n    EnhancedSocialSystem.processRelationshipChange(\n      character,\n      socialEvent.participantName,\n      socialEvent.participantTribe,\n      relationshipChange,\n      socialEvent.type || 'cooperation'\n    );\n    \n    // Force character update to ensure relationships are saved and notify the system\n    console.log(`Relationship updated: ${socialEvent.participantName} - Type: ${character.relationships[socialEvent.participantName]?.type}, Strength: ${character.relationships[socialEvent.participantName]?.strength}`);\n    \n    // Ensure the character data is marked as dirty for saving\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('characterUpdated', { detail: character }));\n    }\n  }\n\n  // Process romance event outcomes\n  static processRomanceEvent(character: Character, choice: Choice, romanticEncounter: any): void {\n    if (!romanticEncounter) return;\n    \n    switch (choice.id) {\n      case \"pursue_romance\":\n        RomanceSystem.developRomance(character, romanticEncounter.partnerName, romanticEncounter.partnerTribe);\n        break;\n      case \"friendship_first\":\n        // Add as friend relationship\n        character.relationships[romanticEncounter.partnerName] = {\n          name: romanticEncounter.partnerName,\n          type: \"friend\",\n          strength: 40,\n          history: [\"Started as friends\"],\n          isAlive: true\n        };\n        break;\n      case \"avoid_romance\":\n        // Add as neutral relationship\n        character.relationships[romanticEncounter.partnerName] = {\n          name: romanticEncounter.partnerName,\n          type: \"neutral\",\n          strength: 25,\n          history: [\"Kept relationship casual\"],\n          isAlive: true\n        };\n        break;\n    }\n  }\n\n  // Enhanced artifact discovery\n  static generateArtifactScenario(character: Character, gameData: GameData): Scenario | null {\n    const currentLocation = gameData.location || \"jade_mountain_academy\";\n    \n    // Simple artifact discovery based on location\n    if (Math.random() < 0.05) { // 5% chance\n      const artifacts = {\n        \"jade_mountain_academy\": { name: \"Ancient Scroll of Wisdom\", description: \"glowing with magical energy\" },\n        \"scorpion_den\": { name: \"Gambler's Lucky Charm\", description: \"pulsing with probability magic\" },\n        \"sand_kingdom\": { name: \"Desert Rose Crystal\", description: \"shimmering with heat mirages\" },\n        \"mud_kingdom\": { name: \"Healing Clay Pot\", description: \"emanating soothing warmth\" },\n        \"sky_kingdom\": { name: \"Wind Rider's Compass\", description: \"spinning with aerial magic\" },\n        \"sea_kingdom\": { name: \"Tide Turner's Pearl\", description: \"glowing with oceanic power\" },\n        \"ice_kingdom\": { name: \"Frost Crown Shard\", description: \"radiating freezing energy\" },\n        \"rainforest_kingdom\": { name: \"Camouflage Vine\", description: \"shifting colors mysteriously\" },\n        \"night_kingdom_old\": { name: \"Prophecy Stone\", description: \"showing glimpses of possible futures\" },\n        \"poison_jungle\": { name: \"Immunity Flower\", description: \"protected by a shimmering barrier\" }\n      };\n\n      const artifact = artifacts[currentLocation as keyof typeof artifacts] || artifacts[\"jade_mountain_academy\"];\n\n      return {\n        id: `artifact_discovery_${currentLocation}_${Date.now()}`,\n        type: 'DISCOVERY',\n        text: `While exploring ${currentLocation.replace('_', ' ')}, you discover a ${artifact.name} ${artifact.description}. This appears to be a powerful animus artifact.`,\n        choices: [\n          {\n            id: \"claim_artifact\",\n            text: `Take the ${artifact.name} despite unknown risks`,\n            consequences: [\"artifact_claimed\", \"soul_risk\"],\n            soulCost: 2,\n            sanityCost: 0\n          },\n          {\n            id: \"study_artifact\",\n            text: \"Study the artifact carefully before deciding\",\n            consequences: [\"artifact_studied\"],\n            soulCost: 0,\n            sanityCost: 1\n          },\n          {\n            id: \"leave_artifact\",\n            text: \"Leave the artifact alone - it's too dangerous\",\n            consequences: [\"artifact_avoided\"],\n            soulCost: 0,\n            sanityCost: 0\n          }\n        ],\n        location: currentLocation\n      };\n    }\n    return null;\n  }\n\n  // Process consequences from enhanced scenarios\n  static processEnhancedConsequences(\n    character: Character,\n    gameData: GameData,\n    consequences: string[],\n    scenario: Scenario\n  ): void {\n    consequences.forEach(consequence => {\n      switch (consequence) {\n        case \"social_relationship_improved\":\n          // Add or improve a random relationship\n          const socialEvent = EnhancedSocialSystem.generateSocialEvent(character);\n          EnhancedSocialSystem.processRelationshipChange(\n            character, \n            socialEvent.participantName, \n            socialEvent.participantTribe, \n            15, \n            'friendship'\n          );\n          break;\n\n        case \"family_bond_strengthened\":\n          // Improve relationships with family members\n          Object.values(character.relationships).forEach(rel => {\n            if (rel.type === 'family' || rel.type === 'mate') {\n              rel.strength = Math.min(100, rel.strength + 10);\n            }\n          });\n          break;\n\n        case \"offspring_attempted\":\n          // Try to generate offspring\n          if (character.mate) {\n            const newDragonet = EnhancedDragonetSystem.attemptOffspring(character);\n            if (newDragonet) {\n              gameData.relationships = gameData.relationships || {};\n              gameData.relationships[`dragonet_${newDragonet.name}`] = 50;\n            }\n          }\n          break;\n\n        case \"romantic_interest_developed\":\n          // Create new romantic relationship\n          const partnerName = \"NewRomanticInterest\"; // Would be dynamic in full implementation\n          character.relationships[partnerName] = {\n            name: partnerName,\n            type: 'romantic',\n            strength: 40,\n            history: [\"Met and felt immediate connection\"],\n            isAlive: true\n          };\n          break;\n\n        case \"artifact_claimed\":\n          // Add artifact to inventory (simplified)\n          gameData.achievements = gameData.achievements || [];\n          if (!gameData.achievements.includes(\"Artifact Collector\")) {\n            gameData.achievements.push(\"Artifact Collector\");\n          }\n          break;\n      }\n    });\n  }\n\n  // Main integration method - generates enhanced scenarios\n  static generateEnhancedScenario(character: Character, gameData: GameData): Scenario | null {\n    // Try different types of enhanced scenarios\n    const scenarios = [\n      () => this.generateSocialScenario(character, gameData),\n      () => this.generateDragonetScenario(character, gameData), \n      () => this.generateRomanceScenario(character, gameData),\n      () => this.generateArtifactScenario(character, gameData)\n    ];\n\n    // Randomly try each type\n    const shuffled = scenarios.sort(() => Math.random() - 0.5);\n    \n    for (const scenarioGen of shuffled) {\n      const scenario = scenarioGen();\n      if (scenario) return scenario;\n    }\n\n    return null;\n  }\n}","size_bytes":15672},"client/src/lib/enhanced-social-system.ts":{"content":"import { Character, Relationship } from \"@shared/schema\";\n\nexport interface SocialEvent {\n  id: string;\n  type: \"friendship\" | \"rivalry\" | \"alliance\" | \"betrayal\" | \"gossip\" | \"party\" | \"conflict\";\n  participantName: string;\n  participantTribe: string;\n  description: string;\n  relationshipChange: number;\n  requirements?: (character: Character) => boolean;\n}\n\nexport interface SocialGroup {\n  name: string;\n  members: string[];\n  type: \"study_group\" | \"combat_training\" | \"secret_society\" | \"political_faction\" | \"hobby_club\";\n  influence: number;\n  reputation: number;\n}\n\nexport class EnhancedSocialSystem {\n  private static readonly DRAGON_NAMES_BY_TRIBE = {\n    MudWing: ['Clay', 'Marsh', 'Umber', 'Sora', 'Reed', 'Pheasant', 'Cattail', 'Newt', 'Crane', 'Sepia'],\n    SandWing: ['Sunny', 'Thorn', 'Qibli', 'Ostrich', 'Jackal', 'Camel', 'Fennec', 'Addax', 'Cobra', 'Rattlesnake'],\n    SkyWing: ['Scarlet', 'Ruby', 'Peril', 'Clay', 'Flame', 'Garnet', 'Hawk', 'Eagle', 'Kestrel', 'Osprey'],\n    SeaWing: ['Tsunami', 'Coral', 'Anemone', 'Riptide', 'Pearl', 'Current', 'Nautilus', 'Turtle', 'Shark', 'Whale'],\n    IceWing: ['Winter', 'Lynx', 'Snowfall', 'Hailstorm', 'Icicle', 'Frost', 'Arctic', 'Glacier', 'Blizzard', 'Tundra'],\n    RainWing: ['Glory', 'Kinkajou', 'Bromeliad', 'Tamarin', 'Orchid', 'Coconut', 'Mango', 'Papaya', 'Liana', 'Heliconia'],\n    NightWing: ['Starflight', 'Fatespeaker', 'Mastermind', 'Morrowseer', 'Moonwatcher', 'Darkstalker', 'Clearsight', 'Listener', 'Mindreader', 'Thoughtful'],\n    SilkWing: ['Blue', 'Cricket', 'Luna', 'Admiral', 'Morpho', 'Silverspot', 'Tau', 'Danaid', 'Fritillary', 'Pierid'],\n    HiveWing: ['Wasp', 'Hornet', 'Yellowjacket', 'Cicada', 'Vinegaroon', 'Tsetse', 'Jewel', 'Katydid', 'Grasshopper', 'Weevil'],\n    LeafWing: ['Sundew', 'Willow', 'Hazel', 'Sequoia', 'Maple', 'Pokeweed', 'Bryony', 'Hemlock', 'Nettle', 'Mandrake']\n  };\n\n  private static readonly SOCIAL_EVENTS: SocialEvent[] = [\n    {\n      id: \"study_partner\",\n      type: \"friendship\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"A classmate asks you to be their study partner for upcoming exams.\",\n      relationshipChange: 15\n    },\n    {\n      id: \"combat_rivalry\",\n      type: \"rivalry\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"Another dragon challenges your combat skills publicly.\",\n      relationshipChange: -20\n    },\n    {\n      id: \"tribal_alliance\",\n      type: \"alliance\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"A dragon from another tribe offers a political alliance.\",\n      relationshipChange: 25\n    },\n    {\n      id: \"secret_betrayal\",\n      type: \"betrayal\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You discover someone you trusted has been spreading rumors about you.\",\n      relationshipChange: -35\n    },\n    {\n      id: \"gossip_session\",\n      type: \"gossip\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You're invited to join a group sharing the latest academy gossip.\",\n      relationshipChange: 10\n    },\n    {\n      id: \"birthday_celebration\",\n      type: \"party\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"A friend invites you to their hatching day celebration.\",\n      relationshipChange: 20\n    },\n    {\n      id: \"philosophical_debate\",\n      type: \"conflict\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"A heated debate about inter-tribal politics causes tension.\",\n      relationshipChange: -10\n    },\n    {\n      id: \"rescue_mission\",\n      type: \"alliance\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You and another dragon work together to rescue someone in danger.\",\n      relationshipChange: 30\n    },\n    {\n      id: \"talent_show\",\n      type: \"friendship\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You participate in a talent show together, bonding over shared performance.\",\n      relationshipChange: 18\n    },\n    {\n      id: \"food_sharing\",\n      type: \"friendship\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You share your favorite tribal food with someone curious about your culture.\",\n      relationshipChange: 12\n    },\n    {\n      id: \"academic_competition\",\n      type: \"rivalry\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"Competition for the top academic spot creates tension between you and a peer.\",\n      relationshipChange: -15\n    },\n    {\n      id: \"cultural_exchange\",\n      type: \"friendship\",\n      participantName: \"\",\n      participantTribe: \"\",\n      description: \"You exchange cultural traditions and stories with a dragon from another tribe.\",\n      relationshipChange: 22\n    }\n  ];\n\n  static generateRandomDragonName(tribe: string): string {\n    const names = this.DRAGON_NAMES_BY_TRIBE[tribe as keyof typeof this.DRAGON_NAMES_BY_TRIBE] || this.DRAGON_NAMES_BY_TRIBE.NightWing;\n    return names[Math.floor(Math.random() * names.length)];\n  }\n\n  static generateRandomTribe(excludeTribe?: string): string {\n    const tribes = Object.keys(this.DRAGON_NAMES_BY_TRIBE);\n    const availableTribes = excludeTribe ? tribes.filter(t => t !== excludeTribe) : tribes;\n    return availableTribes[Math.floor(Math.random() * availableTribes.length)];\n  }\n\n  static generateSocialEvent(character: Character): SocialEvent & { narrativeText: string[] } {\n    const baseEvent = this.SOCIAL_EVENTS[Math.floor(Math.random() * this.SOCIAL_EVENTS.length)];\n    const participantTribe = this.generateRandomTribe(character.tribe);\n    const participantName = this.generateRandomDragonName(participantTribe);\n    \n    // Create comprehensive narrative text with proper context\n    const contextIntros = [\n      `You notice ${participantName}, a ${participantTribe} dragon with distinctive ${this.getPhysicalDescription(participantTribe)} markings, approaching you in the academy courtyard.`,\n      `While studying in the library, ${participantName}, a friendly-looking ${participantTribe} dragon, settles nearby and strikes up a conversation.`,\n      `During meal time, ${participantName}, a ${participantTribe} dragon from your advanced studies class, joins your table.`,\n      `Walking through the academy halls, you encounter ${participantName}, a ${participantTribe} dragon you've seen around but never spoken to.`\n    ];\n    \n    const narrativeText = [\n      contextIntros[Math.floor(Math.random() * contextIntros.length)],\n      baseEvent.description.replace(/A classmate|Another dragon|A dragon|someone/gi, participantName),\n      `${participantName} seems genuine in their approach, and you sense this interaction could significantly impact your relationship with them.`\n    ];\n    \n    return {\n      ...baseEvent,\n      participantName,\n      participantTribe,\n      narrativeText\n    };\n  }\n\n  private static getPhysicalDescription(tribe: string): string {\n    const descriptions = {\n      MudWing: \"earth-toned\",\n      SandWing: \"golden\",\n      SkyWing: \"crimson and orange\",\n      SeaWing: \"blue and green\",\n      IceWing: \"silvery-white\",\n      RainWing: \"rainbow-shifting\",\n      NightWing: \"dark starry\",\n      SilkWing: \"delicate silk-producing\",\n      HiveWing: \"amber and black\",\n      LeafWing: \"forest-green\"\n    };\n    return descriptions[tribe as keyof typeof descriptions] || \"distinctive\";\n  }\n\n  static processRelationshipChange(\n    character: Character, \n    dragonName: string, \n    tribe: string, \n    relationshipChange: number,\n    eventType: SocialEvent['type']\n  ): void {\n    // Ensure relationships object exists\n    if (!character.relationships) {\n      character.relationships = {};\n    }\n    \n    if (!character.relationships[dragonName]) {\n      // Create new relationship\n      character.relationships[dragonName] = {\n        name: dragonName,\n        type: this.getRelationshipType(relationshipChange, eventType),\n        strength: Math.max(0, Math.min(100, 50 + relationshipChange)),\n        history: [`First met through ${eventType || 'social encounter'}`],\n        isAlive: true\n      };\n      console.log(`New relationship created: ${dragonName} - ${character.relationships[dragonName].type}`);\n    } else {\n      // Update existing relationship\n      const relationship = character.relationships[dragonName];\n      relationship.strength = Math.max(0, Math.min(100, relationship.strength + relationshipChange));\n      relationship.history.push(`${eventType || 'social'} event: ${relationshipChange > 0 ? 'improved' : 'worsened'} relationship`);\n      \n      // Update relationship type based on new strength\n      const oldType = relationship.type;\n      relationship.type = this.getRelationshipType(relationship.strength, eventType);\n      console.log(`Relationship updated: ${dragonName} - ${oldType} -> ${relationship.type} (strength: ${relationship.strength})`);\n    }\n    \n    // Force a character save to local storage\n    console.log(`Total relationships after update: ${Object.keys(character.relationships).length}`);\n  }\n\n  private static getRelationshipType(strengthOrChange: number, eventType: SocialEvent['type']): Relationship['type'] {\n    const strength = strengthOrChange > 100 ? strengthOrChange : strengthOrChange + 50;\n    \n    if (eventType === 'betrayal' || strength < 20) return 'enemy';\n    if (eventType === 'rivalry' || strength < 40) return 'rival';\n    if (strength >= 60) return 'friend';\n    return 'neutral';\n  }\n\n  static getRelationshipSummary(character: Character): {\n    friends: number;\n    enemies: number;\n    rivals: number;\n    romantic: number;\n    neutral: number;\n  } {\n    const summary = {\n      friends: 0,\n      enemies: 0,\n      rivals: 0,\n      romantic: 0,\n      neutral: 0\n    };\n\n    Object.values(character.relationships).forEach(relationship => {\n      if (!relationship.isAlive) return;\n      \n      switch (relationship.type) {\n        case 'friend':\n          summary.friends++;\n          break;\n        case 'enemy':\n          summary.enemies++;\n          break;\n        case 'rival':\n          summary.rivals++;\n          break;\n        case 'romantic':\n        case 'mate':\n          summary.romantic++;\n          break;\n        case 'neutral':\n          summary.neutral++;\n          break;\n      }\n    });\n\n    return summary;\n  }\n\n  static canHaveMoreSocialEvents(character: Character): boolean {\n    const relationshipCount = Object.keys(character.relationships).length;\n    const maxRelationships = 15 + Math.floor(character.charisma / 2);\n    return relationshipCount < maxRelationships;\n  }\n\n  static generateSocialGroupInvitation(character: Character): {\n    groupName: string;\n    groupType: SocialGroup['type'];\n    description: string;\n  } | null {\n    if (Math.random() > 0.3) return null; // 30% chance of group invitation\n\n    const groups = [\n      {\n        groupName: \"Jade Mountain Study Circle\",\n        groupType: \"study_group\" as const,\n        description: \"A group of academically minded dragons who meet weekly to discuss complex subjects and help each other with studies.\"\n      },\n      {\n        groupName: \"Inter-tribal Combat Training\",\n        groupType: \"combat_training\" as const,\n        description: \"Dragons from different tribes who practice combat techniques together, learning from each other's tribal fighting styles.\"\n      },\n      {\n        groupName: \"The Scroll Keepers\",\n        groupType: \"secret_society\" as const,\n        description: \"A secretive group dedicated to preserving ancient knowledge and protecting dangerous information from falling into wrong claws.\"\n      },\n      {\n        groupName: \"Peace Alliance Coalition\",\n        groupType: \"political_faction\" as const,\n        description: \"Dragons working toward better inter-tribal relations and preventing future wars through diplomacy and understanding.\"\n      },\n      {\n        groupName: \"Creative Arts Society\",\n        groupType: \"hobby_club\" as const,\n        description: \"Artists, storytellers, and creative dragons who share their work and inspire each other's artistic endeavors.\"\n      }\n    ];\n\n    return groups[Math.floor(Math.random() * groups.length)];\n  }\n}","size_bytes":12210},"client/src/lib/attribute-progression-system.ts":{"content":"import { Character, Choice, Scenario } from \"@shared/schema\";\n\nexport interface AttributeGain {\n  strength?: number;\n  charisma?: number;\n  wisdom?: number;\n  intelligence?: number;\n  reason: string;\n}\n\nexport class AttributeProgressionSystem {\n  private static readonly ATTRIBUTE_CAPS = {\n    strength: 20,\n    charisma: 20,\n    wisdom: 20,\n    intelligence: 20\n  };\n\n  static processAttributeGains(character: Character, choice: Choice, scenario: Scenario): AttributeGain | null {\n    const gains: AttributeGain = { reason: \"\" };\n    let hasGains = false;\n\n    // Strength gains from combat, physical challenges, training\n    if (this.isStrengthChoice(choice, scenario)) {\n      const gain = Math.floor(Math.random() * 2) + 1; // 1-2 points\n      if (character.strength < this.ATTRIBUTE_CAPS.strength) {\n        gains.strength = Math.min(gain, this.ATTRIBUTE_CAPS.strength - character.strength);\n        gains.reason = this.getStrengthGainReason(choice);\n        hasGains = true;\n      }\n    }\n\n    // Charisma gains from social interactions, leadership, diplomacy\n    if (this.isCharismaChoice(choice, scenario)) {\n      const gain = Math.floor(Math.random() * 2) + 1; // 1-2 points\n      if (character.charisma < this.ATTRIBUTE_CAPS.charisma) {\n        gains.charisma = Math.min(gain, this.ATTRIBUTE_CAPS.charisma - character.charisma);\n        gains.reason = this.getCharismaGainReason(choice);\n        hasGains = true;\n      }\n    }\n\n    // Wisdom gains from moral choices, life experience, difficult decisions\n    if (this.isWisdomChoice(choice, scenario)) {\n      const gain = Math.floor(Math.random() * 2) + 1; // 1-2 points\n      if (character.wisdom < this.ATTRIBUTE_CAPS.wisdom) {\n        gains.wisdom = Math.min(gain, this.ATTRIBUTE_CAPS.wisdom - character.wisdom);\n        gains.reason = this.getWisdomGainReason(choice);\n        hasGains = true;\n      }\n    }\n\n    // Intelligence gains from studying, solving puzzles, learning\n    if (this.isIntelligenceChoice(choice, scenario)) {\n      const gain = Math.floor(Math.random() * 2) + 1; // 1-2 points\n      if (character.intelligence < this.ATTRIBUTE_CAPS.intelligence) {\n        gains.intelligence = Math.min(gain, this.ATTRIBUTE_CAPS.intelligence - character.intelligence);\n        gains.reason = this.getIntelligenceGainReason(choice);\n        hasGains = true;\n      }\n    }\n\n    return hasGains ? gains : null;\n  }\n\n  private static isStrengthChoice(choice: Choice, scenario: Scenario): boolean {\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    const strengthKeywords = [\n      'fight', 'combat', 'battle', 'train', 'physical', 'strength', 'muscle', \n      'workout', 'exercise', 'lift', 'carry', 'push', 'climb', 'swim'\n    ];\n    \n    return strengthKeywords.some(keyword => text.includes(keyword)) || \n           (scenario.type === 'extraordinary' && text.includes('force'));\n  }\n\n  private static isCharismaChoice(choice: Choice, scenario: Scenario): boolean {\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    const charismaKeywords = [\n      'persuade', 'convince', 'negotiate', 'diplomacy', 'leadership', 'inspire',\n      'charm', 'social', 'friend', 'alliance', 'speak', 'conversation', 'debate'\n    ];\n    \n    return charismaKeywords.some(keyword => text.includes(keyword));\n  }\n\n  private static isWisdomChoice(choice: Choice, scenario: Scenario): boolean {\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    const wisdomKeywords = [\n      'wise', 'careful', 'consider', 'think', 'moral', 'ethical', 'right',\n      'wrong', 'justice', 'mercy', 'patience', 'experience', 'learn from'\n    ];\n    \n    return wisdomKeywords.some(keyword => text.includes(keyword)) ||\n           (choice.sanityCost > 5 && !choice.corruption) ||\n           (choice.soulCost < 0); // Soul restoration choices\n  }\n\n  private static isIntelligenceChoice(choice: Choice, scenario: Scenario): boolean {\n    const text = (choice.text || '').toLowerCase() + ' ' + (choice.description || '').toLowerCase();\n    const intelligenceKeywords = [\n      'study', 'learn', 'research', 'analyze', 'solve', 'puzzle', 'knowledge',\n      'understand', 'figure out', 'investigate', 'examine', 'explore', 'discover'\n    ];\n    \n    return intelligenceKeywords.some(keyword => text.includes(keyword)) ||\n           (scenario.type === 'mundane' && text.includes('academic'));\n  }\n\n  private static getStrengthGainReason(choice: Choice): string {\n    const reasons = [\n      \"Your muscles grew stronger from the physical challenge\",\n      \"Combat training has improved your physical prowess\",\n      \"The exertion has built your stamina and power\",\n      \"Your body adapted to the physical demands\",\n      \"Regular training is paying off with increased strength\"\n    ];\n    return reasons[Math.floor(Math.random() * reasons.length)];\n  }\n\n  private static getCharismaGainReason(choice: Choice): string {\n    const reasons = [\n      \"Your social skills improved through interaction\",\n      \"You learned how to better connect with others\",\n      \"Your confidence in social situations has grown\",\n      \"Leadership experience has enhanced your presence\",\n      \"You've become more persuasive and engaging\"\n    ];\n    return reasons[Math.floor(Math.random() * reasons.length)];\n  }\n\n  private static getWisdomGainReason(choice: Choice): string {\n    const reasons = [\n      \"This experience taught you valuable life lessons\",\n      \"You gained insight from this difficult decision\",\n      \"Your understanding of right and wrong has deepened\",\n      \"Moral reflection has made you wiser\",\n      \"Life experience has broadened your perspective\"\n    ];\n    return reasons[Math.floor(Math.random() * reasons.length)];\n  }\n\n  private static getIntelligenceGainReason(choice: Choice): string {\n    const reasons = [\n      \"Your studies have expanded your knowledge\",\n      \"Problem-solving has sharpened your mind\",\n      \"Research and learning have made you smarter\",\n      \"Academic pursuit has increased your intelligence\",\n      \"Your curiosity led to greater understanding\"\n    ];\n    return reasons[Math.floor(Math.random() * reasons.length)];\n  }\n\n  static applyAttributeGains(character: Character, gains: AttributeGain): void {\n    if (gains.strength) {\n      character.strength = Math.min(character.strength + gains.strength, this.ATTRIBUTE_CAPS.strength);\n    }\n    if (gains.charisma) {\n      character.charisma = Math.min(character.charisma + gains.charisma, this.ATTRIBUTE_CAPS.charisma);\n    }\n    if (gains.wisdom) {\n      character.wisdom = Math.min(character.wisdom + gains.wisdom, this.ATTRIBUTE_CAPS.wisdom);\n    }\n    if (gains.intelligence) {\n      character.intelligence = Math.min(character.intelligence + gains.intelligence, this.ATTRIBUTE_CAPS.intelligence);\n    }\n  }\n\n  static getAttributeGainMessage(gains: AttributeGain): string {\n    const parts = [];\n    \n    if (gains.strength) {\n      parts.push(`+${gains.strength} Strength`);\n    }\n    if (gains.charisma) {\n      parts.push(`+${gains.charisma} Charisma`);\n    }\n    if (gains.wisdom) {\n      parts.push(`+${gains.wisdom} Wisdom`);\n    }\n    if (gains.intelligence) {\n      parts.push(`+${gains.intelligence} Intelligence`);\n    }\n\n    if (parts.length === 0) return \"\";\n    \n    return `${parts.join(', ')} - ${gains.reason}`;\n  }\n}","size_bytes":7407},"client/src/components/artifact-usage-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, Sparkles, Skull, Heart, Eye } from \"lucide-react\";\nimport { AnimusArtifact, ArtifactOption } from \"@/lib/animus-artifact-system\";\nimport { Character, InventoryItem } from \"@shared/schema\";\n\ninterface ArtifactUsageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  artifact: InventoryItem;\n  character: Character;\n  onUseArtifact: (artifactId: string, optionId: string) => void;\n}\n\nexport function ArtifactUsageModal({\n  isOpen,\n  onClose,\n  artifact,\n  character,\n  onUseArtifact\n}: ArtifactUsageModalProps) {\n  const [selectedOption, setSelectedOption] = useState<ArtifactOption | null>(null);\n\n  // Get the full artifact data from the animus system\n  const fullArtifact = require('@/lib/animus-artifact-system').ANIMUS_ARTIFACTS.find(\n    (a: AnimusArtifact) => a.id === artifact.id\n  ) as AnimusArtifact | undefined;\n\n  if (!fullArtifact) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle>Artifact Not Found</DialogTitle>\n          </DialogHeader>\n          <p>This artifact's data could not be loaded.</p>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const handleUseOption = () => {\n    if (selectedOption) {\n      // Pass the option ID as part of the result string for the engine to process\n      const result = `Using option: ${selectedOption.id} - ${selectedOption.outcome}`;\n      onUseArtifact(artifact.id, result);\n      onClose();\n    }\n  };\n\n  const getCostColor = (cost: number) => {\n    if (cost === 0) return \"text-green-600\";\n    if (cost <= 2) return \"text-yellow-600\"; \n    return \"text-red-600\";\n  };\n\n  const getCorruptionIcon = (corruption: boolean) => {\n    return corruption ? <Skull className=\"w-4 h-4 text-red-500\" /> : <Heart className=\"w-4 h-4 text-blue-500\" />;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-purple-500\" />\n            Using: {fullArtifact.name}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Artifact Details */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  {fullArtifact.cursed && <AlertTriangle className=\"w-5 h-5 text-red-500\" />}\n                  {fullArtifact.name}\n                  <Badge variant={fullArtifact.cursed ? \"destructive\" : \"secondary\"}>\n                    {fullArtifact.rarity}\n                  </Badge>\n                </CardTitle>\n                <CardDescription>{fullArtifact.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">Power Level:</span>\n                    <Badge variant=\"outline\">{fullArtifact.powerLevel}</Badge>\n                  </div>\n                  \n                  {fullArtifact.enchantments && fullArtifact.enchantments.length > 0 && (\n                    <div>\n                      <span className=\"font-medium\">Enchantments:</span>\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {fullArtifact.enchantments.map((enchantment, i) => (\n                          <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                            {enchantment}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                    <p className=\"text-sm\">{fullArtifact.discoveryScenario}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Usage Options */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">How do you want to use this artifact?</h3>\n            <ScrollArea className=\"h-[400px] pr-4\">\n              <div className=\"space-y-3\">\n                {fullArtifact.usageOptions.map((option, index) => (\n                  <Card \n                    key={option.id}\n                    className={`cursor-pointer transition-colors ${\n                      selectedOption?.id === option.id \n                        ? 'ring-2 ring-primary bg-primary/5' \n                        : 'hover:bg-muted/50'\n                    }`}\n                    onClick={() => setSelectedOption(option)}\n                  >\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-base flex items-center justify-between\">\n                        {option.text}\n                        <div className=\"flex items-center gap-1\">\n                          {getCorruptionIcon(option.corruption)}\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {option.outcome}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4 text-xs\">\n                          <span className={getCostColor(option.soulCost)}>\n                            Soul Cost: {option.soulCost}\n                          </span>\n                          <span className={getCostColor(option.sanityCost)}>\n                            Sanity Cost: {option.sanityCost}\n                          </span>\n                        </div>\n                        \n                        {option.corruption && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Corrupting\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      {option.consequences.length > 0 && (\n                        <>\n                          <Separator className=\"my-2\" />\n                          <div className=\"space-y-1\">\n                            <span className=\"text-xs font-medium\">Consequences:</span>\n                            {option.consequences.map((consequence, i) => (\n                              <div key={i} className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                                <Eye className=\"w-3 h-3\" />\n                                {consequence}\n                              </div>\n                            ))}\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </div>\n\n        <Separator />\n        \n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-sm text-muted-foreground\">\n            Current Soul: {character.soulPercentage}% | Current Sanity: {character.sanityPercentage}%\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleUseOption}\n              disabled={!selectedOption}\n              className=\"min-w-[100px]\"\n            >\n              Use Artifact\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8228}}}